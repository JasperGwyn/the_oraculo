"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@twind";
exports.ids = ["vendor-chunks/@twind"];
exports.modules = {

/***/ "(ssr)/../node_modules/@twind/core/core.dev.js":
/*!***********************************************!*\
  !*** ../node_modules/@twind/core/core.dev.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   animation: () => (/* binding */ animation),\n/* harmony export */   apply: () => (/* binding */ apply),\n/* harmony export */   arbitrary: () => (/* binding */ arbitrary),\n/* harmony export */   asArray: () => (/* binding */ asArray),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   autoDarkColor: () => (/* binding */ autoDarkColor),\n/* harmony export */   colorFromTheme: () => (/* binding */ colorFromTheme),\n/* harmony export */   consume: () => (/* binding */ consume),\n/* harmony export */   css: () => (/* binding */ css),\n/* harmony export */   cssom: () => (/* binding */ cssom),\n/* harmony export */   cx: () => (/* binding */ cx),\n/* harmony export */   defineConfig: () => (/* binding */ defineConfig),\n/* harmony export */   dom: () => (/* binding */ dom),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   fromMatch: () => (/* binding */ fromMatch),\n/* harmony export */   fromTheme: () => (/* binding */ fromTheme),\n/* harmony export */   getAutocompleteProvider: () => (/* binding */ getAutocompleteProvider),\n/* harmony export */   getSheet: () => (/* binding */ getSheet),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   injectGlobal: () => (/* binding */ injectGlobal),\n/* harmony export */   inline: () => (/* binding */ inline),\n/* harmony export */   install: () => (/* binding */ install),\n/* harmony export */   keyframes: () => (/* binding */ keyframes),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   matchColor: () => (/* binding */ matchColor),\n/* harmony export */   matchTheme: () => (/* binding */ matchTheme),\n/* harmony export */   mo: () => (/* binding */ mo),\n/* harmony export */   mql: () => (/* binding */ mql),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseValue: () => (/* binding */ parseValue),\n/* harmony export */   setup: () => (/* binding */ setup),\n/* harmony export */   shortcut: () => (/* binding */ shortcut),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   style: () => (/* binding */ style),\n/* harmony export */   toCSS: () => (/* binding */ toCSS),\n/* harmony export */   toColorValue: () => (/* binding */ toColorValue),\n/* harmony export */   tw: () => (/* binding */ tw),\n/* harmony export */   twind: () => (/* binding */ twind),\n/* harmony export */   tx: () => (/* binding */ tx),\n/* harmony export */   virtual: () => (/* binding */ virtual),\n/* harmony export */   withAutocomplete: () => (/* binding */ withAutocomplete)\n/* harmony export */ });\nlet active;\nfunction toClassName(rule) {\n    return [\n        ...rule.v,\n        (rule.i ? '!' : '') + rule.n\n    ].join(':');\n}\nfunction format(rules, seperator = ',') {\n    return rules.map(toClassName).join(seperator);\n}\n/**\n * @internal\n */ let escape = 'undefined' != typeof CSS && CSS.escape || // Simplified: escaping only special characters\n// Needed for NodeJS and Edge <79 (https://caniuse.com/mdn-api_css_escape)\n((className)=>className.// Simplifed escape testing only for chars that we know happen to be in tailwind directives\n    replace(/[!\"'`*+.,;:\\\\/<=>?@#$%&^|~()[\\]{}]/g, '\\\\$&').// If the character is the first character and is in the range [0-9] (2xl, ...)\n    // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n    replace(/^\\d/, '\\\\3$& '));\n// Based on https://stackoverflow.com/a/52171480\n/**\n * @group Configuration\n * @param value\n * @returns\n */ function hash(value) {\n    // eslint-disable-next-line no-var\n    for(var h = 9, index = value.length; index--;)h = Math.imul(h ^ value.charCodeAt(index), 0x5f356495);\n    return '#' + ((h ^ h >>> 9) >>> 0).toString(36);\n}\n/**\n * @internal\n * @param screen\n * @param prefix\n * @returns\n */ function mql(screen, prefix = '@media ') {\n    return prefix + asArray(screen).map((screen)=>{\n        return 'string' == typeof screen && (screen = {\n            min: screen\n        }), screen.raw || Object.keys(screen).map((feature)=>`(${feature}-width:${screen[feature]})`).join(' and ');\n    }).join(',');\n}\n/**\n * @internal\n * @param value\n * @returns\n */ function asArray(value = []) {\n    return Array.isArray(value) ? value : null == value ? [] : [\n        value\n    ];\n}\n/**\n * @internal\n * @param value\n * @returns\n */ function identity(value) {\n    return value;\n}\n/**\n * @internal\n */ function noop() {}\n// no-op\n// Based on https://github.com/kripod/otion\n// License MIT\n// export const enum Shifts {\n//   darkMode = 30,\n//   layer = 27,\n//   screens = 26,\n//   responsive = 22,\n//   atRules = 18,\n//   variants = 0,\n// }\nlet Layer = {\n    /**\n   * 1. `default` (public)\n   */ d: /* efaults */ 0,\n    /* Shifts.layer */ /**\n   * 2. `base` (public) — for things like reset rules or default styles applied to plain HTML elements.\n   */ b: /* ase */ 134217728,\n    /* Shifts.layer */ /**\n   * 3. `components` (public, used by `style()`) — is for class-based styles that you want to be able to override with utilities.\n   */ c: /* omponents */ 268435456,\n    /* Shifts.layer */ // reserved for style():\n    // - props: 0b011\n    // - when: 0b100\n    /**\n   * 6. `aliases` (public, used by `apply()`) — `~(...)`\n   */ a: /* liases */ 671088640,\n    /* Shifts.layer */ /**\n   * 6. `utilities` (public) — for small, single-purpose classes\n   */ u: /* tilities */ 805306368,\n    /* Shifts.layer */ /**\n   * 7. `overrides` (public, used by `css()`)\n   */ o: /* verrides */ 939524096\n};\n/*\nTo set a bit: n |= mask;\nTo clear a bit: n &= ~mask;\nTo test if a bit is set: (n & mask)\n\nBit shifts for the primary bits:\n\n| bits | trait                                                   | shift |\n| ---- | ------------------------------------------------------- | ----- |\n| 1    | dark mode                                               | 30    |\n| 3    | layer: preflight, global, components, utilities, css    | 27    |\n| 1    | screens: is this a responsive variation of a rule       | 26    |\n| 4    | responsive based on min-width, max-width or width       | 22    |\n| 4    | at-rules                                                | 18    |\n| 18   | pseudo and group variants                               | 0     |\n\nLayer: 0 - 7: 3 bits\n  - defaults: 0 << 27\n  - base: 1 << 27\n  - components: 2 << 27\n  - variants: 3 << 27\n  - joints: 4 << 27\n  - aliases: 5 << 27\n  - utilities: 6 << 27\n  - overrides: 7 << 27\n\nThese are calculated by serialize and added afterwards:\n\n| bits | trait                               |\n| ---- | ----------------------------------- |\n| 4    | number of selectors (descending)    |\n| 4    | number of declarations (descending) |\n| 4    | greatest precedence of properties   |\n\nThese are added by shifting the primary bits using multiplication as js only\nsupports bit shift up to 32 bits.\n*/ // Colon and dash count of string (ascending)\nfunction seperatorPrecedence(string) {\n    return string.match(/[-=:;]/g)?.length || 0;\n}\nfunction atRulePrecedence(css) {\n    // 0 - 15: 4 bits (max 144rem or 2304px)\n    // rem -> bit\n    // <20 ->  0 (<320px)\n    //  20 ->  1 (320px)\n    //  24 ->  2 (384px)\n    //  28 ->  3 (448px)\n    //  32 ->  4 (512px)\n    //  36 ->  5 (576px)\n    //  42 ->  6 (672px)\n    //  48 ->  7 (768px)\n    //  56 ->  8 (896px)\n    //  64 ->  9 (1024px)\n    //  72 -> 10 (1152px)\n    //  80 -> 11 (1280px)\n    //  96 -> 12 (1536px)\n    // 112 -> 13 (1792px)\n    // 128 -> 14 (2048px)\n    // 144 -> 15 (2304px)\n    // https://www.dcode.fr/function-equation-finder\n    return Math.min(/(?:^|width[^\\d]+)(\\d+(?:.\\d+)?)(p)?/.test(css) ? Math.max(0, 29.63 * (+RegExp.$1 / (RegExp.$2 ? 15 : 1)) ** 0.137 - 43) : 0, 15) << 22 | /* Shifts.responsive */ Math.min(seperatorPrecedence(css), 15) << 18;\n}\n/* Shifts.atRules */ // Pesudo variant presedence\n// Chars 3 - 8: Uniquely identifies a pseudo selector\n// represented as a bit set for each relevant value\n// 18 bits: one for each variant plus one for unknown variants\n//\n// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')\n// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')\n// Sources:\n// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L931\nlet PRECEDENCES_BY_PSEUDO_CLASS = [\n    /* fi */ 'rst-c',\n    /* hild: 0 */ /* la */ 'st-ch',\n    /* ild: 1 */ // even and odd use: nth-child\n    /* nt */ 'h-chi',\n    /* ld: 2 */ /* an */ 'y-lin',\n    /* k: 3 */ /* li */ 'nk',\n    /* : 4 */ /* vi */ 'sited',\n    /* : 5 */ /* ch */ 'ecked',\n    /* : 6 */ /* em */ 'pty',\n    /* : 7 */ /* re */ 'ad-on',\n    /* ly: 8 */ /* fo */ 'cus-w',\n    /* ithin : 9 */ /* ho */ 'ver',\n    /* : 10 */ /* fo */ 'cus',\n    /* : 11 */ /* fo */ 'cus-v',\n    /* isible : 12 */ /* ac */ 'tive',\n    /* : 13 */ /* di */ 'sable',\n    /* d : 14 */ /* op */ 'tiona',\n    /* l: 15 */ /* re */ 'quire'\n];\n/** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */ /** The calculated precedence taking all variants into account. */ /** The rulesets (selectors and at-rules). expanded variants `@media ...`, `@supports ...`, `&:focus`, `.dark &` */ /** Is this rule `!important` eg something like `!underline` or `!bg-red-500` or `!red-500` */ function convert({ n: name , i: important , v: variants = []  }, context, precedence, conditions) {\n    name && (name = toClassName({\n        n: name,\n        i: important,\n        v: variants\n    }));\n    conditions = [\n        ...asArray(conditions)\n    ];\n    for (let variant of variants){\n        let screen = context.theme('screens', variant);\n        for (let condition of asArray(screen && mql(screen) || context.v(variant))){\n            var /* d: 16 */ selector;\n            conditions.push(condition);\n            precedence |= screen ? 67108864 | /* Shifts.screens */ atRulePrecedence(condition) : 'dark' == variant ? 1073741824 : /* Shifts.darkMode */ '@' == condition[0] ? atRulePrecedence(condition) : (selector = condition, // use first found pseudo-class\n            1 << ~(/:([a-z-]+)/.test(selector) && ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7)) || -18));\n        }\n    }\n    return {\n        n: name,\n        p: precedence,\n        r: conditions,\n        i: important\n    };\n}\nlet registry = new Map();\nfunction stringify$1(rule) {\n    if (rule.d) {\n        let groups = [], selector = replaceEach(// merge all conditions into a selector string\n        rule.r.reduce((selector, condition)=>{\n            return '@' == condition[0] ? (groups.push(condition), selector) : // Go over the selector and replace the matching multiple selectors if any\n            condition ? replaceEach(selector, (selectorPart)=>replaceEach(condition, // If the current condition has a nested selector replace it\n                (conditionPart)=>{\n                    let mergeMatch = /(:merge\\(.+?\\))(:[a-z-]+|\\\\[.+])/.exec(conditionPart);\n                    if (mergeMatch) {\n                        let selectorIndex = selectorPart.indexOf(mergeMatch[1]);\n                        return ~selectorIndex ? // [':merge(.group):hover .rule', ':merge(.group):focus &'] -> ':merge(.group):focus:hover .rule'\n                        // ':merge(.group)' + ':focus' + ':hover .rule'\n                        selectorPart.slice(0, selectorIndex) + mergeMatch[0] + selectorPart.slice(selectorIndex + mergeMatch[1].length) : // [':merge(.peer):focus~&', ':merge(.group):hover &'] -> ':merge(.peer):focus~:merge(.group):hover &'\n                        replaceReference(selectorPart, conditionPart);\n                    }\n                    // Return the current selector with the key matching multiple selectors if any\n                    return replaceReference(conditionPart, selectorPart);\n                })) : selector;\n        }, '&'), // replace '&' with rule name or an empty string\n        (selectorPart)=>replaceReference(selectorPart, rule.n ? '.' + escape(rule.n) : ''));\n        return selector && groups.push(selector.replace(/:merge\\((.+?)\\)/g, '$1')), groups.reduceRight((body, grouping)=>grouping + '{' + body + '}', rule.d);\n    }\n}\nfunction replaceEach(selector, iteratee) {\n    return selector.replace(/ *((?:\\(.+?\\)|\\[.+?\\]|[^,])+) *(,|$)/g, (_, selectorPart, comma)=>iteratee(selectorPart) + comma);\n}\nfunction replaceReference(selector, reference) {\n    return selector.replace(/&/g, reference);\n}\nlet collator = new Intl.Collator('en', {\n    numeric: true\n});\n/** The calculated precedence taking all variants into account. */ /* The precedence of the properties within {@link d}. */ /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */ /**\n * Find the array index of where to add an element to keep it sorted.\n *\n * @returns The insertion index\n */ function sortedInsertionIndex(array, element) {\n    // Find position using binary search\n    // eslint-disable-next-line no-var\n    for(var low = 0, high = array.length; low < high;){\n        let pivot = high + low >> 1;\n        0 >= compareTwindRules(array[pivot], element) ? low = pivot + 1 : high = pivot;\n    }\n    return high;\n}\nfunction compareTwindRules(a, b) {\n    // base and overrides (css) layers are kept in order they are declared\n    let layer = a.p & Layer.o;\n    return layer == (b.p & Layer.o) && (layer == Layer.b || layer == Layer.o) ? 0 : a.p - b.p || a.o - b.o || collator.compare(byModifier(a.n), byModifier(b.n)) || collator.compare(byName(a.n), byName(b.n));\n}\nfunction byModifier(s) {\n    return (s || '').split(/:/).pop().split('/').pop() || '\\x00';\n}\nfunction byName(s) {\n    return (s || '').replace(/\\W/g, (c)=>String.fromCharCode(127 + c.charCodeAt(0))) + '\\x00';\n}\nfunction parseColorComponent(chars, factor) {\n    return Math.round(parseInt(chars, 16) * factor);\n}\n/**\n * @internal\n * @param color\n * @param options\n * @returns\n */ function toColorValue(color, options = {}) {\n    if ('function' == typeof color) return color(options);\n    let { opacityValue ='1' , opacityVariable  } = options, opacity = opacityVariable ? `var(${opacityVariable})` : opacityValue;\n    if (color.includes('<alpha-value>')) return color.replace('<alpha-value>', opacity);\n    // rgb hex: #0123 and #001122\n    if ('#' == color[0] && (4 == color.length || 7 == color.length)) {\n        let size = (color.length - 1) / 3, factor = [\n            17,\n            1,\n            0.062272\n        ][size - 1];\n        return `rgba(${[\n            parseColorComponent(color.substr(1, size), factor),\n            parseColorComponent(color.substr(1 + size, size), factor),\n            parseColorComponent(color.substr(1 + 2 * size, size), factor),\n            opacity\n        ]})`;\n    }\n    return '1' == opacity ? color : '0' == opacity ? '#0000' : // convert rgb and hsl to alpha variant\n    color.replace(/^(rgb|hsl)(\\([^)]+)\\)$/, `$1a$2,${opacity})`);\n}\n/**\n * Looks for a matching dark color within a [tailwind color palette](https://tailwindcss.com/docs/customizing-colors) (`50`, `100`, `200`, ..., `800`, `900`).\n *\n * ```js\n * defineConfig({\n *   darkColor: autoDarkColor,\n * })\n * ```\n *\n * **Note**: Does not work for arbitrary values like `[theme(colors.gray.500)]` or `[theme(colors.gray.500, #ccc)]`.\n *\n * @group Configuration\n * @param section within theme to use\n * @param key of the light color or an arbitrary value\n * @param context to use\n * @returns the dark color if found\n */ function autoDarkColor(section, key, { theme  }) {\n    return theme(section, // 50 -> 900, 100 -> 800, ..., 800 -> 100, 900 -> 50\n    // key: gray-50, gray.50\n    key = key.replace(/\\d+$/, (shade)=>// ~~(parseInt(shade, 10) / 100): 50 -> 0, 900 -> 9\n        100 * // (9 - 0) -> 900, (9 - 9) -> 50\n        (9 - ~~(parseInt(shade, 10) / 100) || 0.5)));\n}\nfunction serialize(style, rule, context, precedence, conditions = []) {\n    return function serialize$(style, { n: name , p: precedence , r: conditions = [] , i: important  }, context) {\n        let rules = [], // The generated declaration block eg body of the css rule\n        declarations = '', // This ensures that 'border-top-width' has a higher precedence than 'border-top'\n        maxPropertyPrecedence = 0, // More specific utilities have less declarations and a higher precedence\n        numberOfDeclarations = 0;\n        for(let key in style || {}){\n            var layer, // https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts\n            // \"+1\": [\n            // \t/* ^border-.*(w|c|sty) */\n            // \t\"border-.*(width,color,style)\",\n            // \t/* ^[tlbr].{2,4}m?$ */\n            // \t\"top\",\n            // \t\"left\",\n            // \t\"bottom\",\n            // \t\"right\",\n            // \t/* ^c.{7}$ */\n            // \t\"continue\",\n            // \t/* ^c.{8}$ */\n            // \t\"container\",\n            // ],\n            // \"-1\": [\n            // \t/* ^[fl].{5}l */\n            // \t\"flex-flow\",\n            // \t\"line-clamp\",\n            // \t/* ^g.{8}$ */\n            // \t\"grid-area\",\n            // \t/* ^pl */\n            // \t\"place-content\",\n            // \t\"place-items\",\n            // \t\"place-self\",\n            // ],\n            // group: 1 => +1\n            // group: 2 => -1\n            // 0 - 15 => 4 bits\n            // Ignore vendor prefixed and custom properties\n            property;\n            let value = style[key];\n            if ('@' == key[0]) {\n                // at rules: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n                if (!value) continue;\n                // @apply ...;\n                if ('a' == key[1]) {\n                    rules.push(...translateWith(name, precedence, parse('' + value), context, precedence, conditions, important, true));\n                    continue;\n                }\n                // @layer <layer>\n                if ('l' == key[1]) {\n                    for (let css of asArray(value))rules.push(...serialize$(css, {\n                        n: name,\n                        p: (layer = Layer[key[7]], // Set layer (first reset, than set)\n                        precedence & ~Layer.o | layer),\n                        r: 'd' == key[7] ? [] : conditions,\n                        i: important\n                    }, context));\n                    continue;\n                }\n                // @import\n                if ('i' == key[1]) {\n                    rules.push(...asArray(value).map((value)=>({\n                            // before all layers\n                            p: -1,\n                            o: 0,\n                            r: [],\n                            d: key + ' ' + value\n                        })));\n                    continue;\n                }\n                // @keyframes\n                if ('k' == key[1]) {\n                    // Use defaults layer\n                    rules.push({\n                        p: Layer.d,\n                        o: 0,\n                        r: [\n                            key\n                        ],\n                        d: serialize$(value, {\n                            p: Layer.d\n                        }, context).map(stringify$1).join('')\n                    });\n                    continue;\n                }\n                // @font-face\n                // TODO @font-feature-values\n                if ('f' == key[1]) {\n                    // Use defaults layer\n                    rules.push(...asArray(value).map((value)=>({\n                            p: Layer.d,\n                            o: 0,\n                            r: [\n                                key\n                            ],\n                            d: serialize$(value, {\n                                p: Layer.d\n                            }, context).map(stringify$1).join('')\n                        })));\n                    continue;\n                }\n            }\n            // -> All other are handled below; same as selector\n            // @media\n            // @supports\n            // selector\n            if ('object' != typeof value || Array.isArray(value)) {\n                if ('label' == key && value) name = value + hash(JSON.stringify([\n                    precedence,\n                    important,\n                    style\n                ]));\n                else if (value || 0 === value) {\n                    // property -> hyphenate\n                    key = key.replace(/[A-Z]/g, (_)=>'-' + _.toLowerCase());\n                    // Update precedence\n                    numberOfDeclarations += 1;\n                    maxPropertyPrecedence = Math.max(maxPropertyPrecedence, '-' == (property = key)[0] ? 0 : seperatorPrecedence(property) + (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(property) ? +!!RegExp.$1 || /* +1 */ -!!RegExp.$2 : /* -1 */ 0) + 1);\n                    declarations += (declarations ? ';' : '') + asArray(value).map((value)=>context.s(key, // support theme(...) function in values\n                        // calc(100vh - theme('spacing.12'))\n                        resolveThemeFunction('' + value, context.theme) + (important ? ' !important' : ''))).join(';');\n                }\n            } else // at-rule or non-global selector\n            if ('@' == key[0] || key.includes('&')) {\n                let rulePrecedence = precedence;\n                if ('@' == key[0]) {\n                    // Handle `@media screen(sm)` and `@media (screen(sm) or ...)`\n                    key = key.replace(/\\bscreen\\(([^)]+)\\)/g, (_, screenKey)=>{\n                        let screen = context.theme('screens', screenKey);\n                        return screen ? (rulePrecedence |= 67108864, /* Shifts.screens */ mql(screen, '')) : _;\n                    });\n                    rulePrecedence |= atRulePrecedence(key);\n                }\n                rules.push(...serialize$(value, {\n                    n: name,\n                    p: rulePrecedence,\n                    r: [\n                        ...conditions,\n                        key\n                    ],\n                    i: important\n                }, context));\n            } else // global selector\n            rules.push(...serialize$(value, {\n                p: precedence,\n                r: [\n                    ...conditions,\n                    key\n                ]\n            }, context));\n        }\n        return(// PERF: prevent unshift using `rules = [{}]` above and then `rules[0] = {...}`\n        rules.unshift({\n            n: name,\n            p: precedence,\n            o: // number of declarations (descending)\n            Math.max(0, 15 - numberOfDeclarations) + // greatest precedence of properties\n            // if there is no property precedence this is most likely a custom property only declaration\n            // these have the highest precedence\n            1.5 * Math.min(maxPropertyPrecedence || 15, 15),\n            r: conditions,\n            // stringified declarations\n            d: declarations\n        }), rules.sort(compareTwindRules));\n    }(style, convert(rule, context, precedence, conditions), context);\n}\nfunction resolveThemeFunction(value, theme) {\n    // support theme(...) function in values\n    // calc(100vh - theme('spacing.12'))\n    // theme('borderColor.DEFAULT', 'currentColor')\n    // PERF: check for theme before running the regexp\n    // if (value.includes('theme')) {\n    return value.replace(/theme\\(([\"'`])?(.+?)\\1(?:\\s*,\\s*([\"'`])?(.+?)\\3)?\\)/g, (_, __, key, ___, defaultValue = '')=>{\n        let value = theme(key, defaultValue);\n        return 'function' == typeof value && /color|fill|stroke/i.test(key) ? toColorValue(value) : '' + asArray(value).filter((v)=>Object(v) !== v);\n    });\n}\n// }\n// return value\nfunction merge(rules, name) {\n    let current;\n    // merge:\n    // - same conditions\n    // - replace name with hash of name + condititions + declarations\n    // - precedence:\n    //   - combine bits or use max precendence\n    //   - set layer bit to merged\n    let result = [];\n    for (let rule of rules)// only merge rules with declarations and names (eg no global rules)\n    if (rule.d && rule.n) {\n        if (current?.p == rule.p && '' + current.r == '' + rule.r) {\n            current.c = [\n                current.c,\n                rule.c\n            ].filter(Boolean).join(' ');\n            current.d = current.d + ';' + rule.d;\n        } else // only set name for named rules eg not for global or className propagation rules\n        result.push(current = {\n            ...rule,\n            n: rule.n && name\n        });\n    } else result.push({\n        ...rule,\n        n: rule.n && name\n    });\n    return result;\n}\nfunction translate(rules, context, precedence = Layer.u, conditions, important) {\n    // Sorted by precedence\n    let result = [];\n    for (let rule of rules)for (let cssRule of function(rule, context, precedence, conditions, important) {\n        rule = {\n            ...rule,\n            i: rule.i || important\n        };\n        let resolved = function(rule, context) {\n            let factory = registry.get(rule.n);\n            return factory ? factory(rule, context) : context.r(rule.n, 'dark' == rule.v[0]);\n        }(rule, context);\n        return resolved ? // a list of class names\n        'string' == typeof resolved ? ({ r: conditions , p: precedence  } = convert(rule, context, precedence, conditions), merge(translate(parse(resolved), context, precedence, conditions, rule.i), rule.n)) : Array.isArray(resolved) ? resolved.map((rule)=>{\n            var /* Shifts.layer */ /*\nTo have a predictable styling the styles must be ordered.\n\nThis order is represented by a precedence number. The lower values\nare inserted before higher values. Meaning higher precedence styles\noverwrite lower precedence styles.\n\nEach rule has some traits that are put into a bit set which form\nthe precedence:\n\n| bits | trait                                                |\n| ---- | ---------------------------------------------------- |\n| 1    | dark mode                                            |\n| 2    | layer: preflight, global, components, utilities, css |\n| 1    | screens: is this a responsive variation of a rule    |\n| 5    | responsive based on min-width                        |\n| 4    | at-rules                                             |\n| 18   | pseudo and group variants                            |\n| 4    | number of declarations (descending)                  |\n| 4    | greatest precedence of properties                    |\n\n**Dark Mode: 1 bit**\n\nFlag for dark mode rules.\n\n**Layer: 3 bits**\n\n- defaults = 0: The preflight styles and any base styles registered by plugins.\n- base = 1: The global styles registered by plugins.\n- components = 2\n- variants = 3\n- compounds = 4\n- aliases = 5\n- utilities = 6: Utility classes and any utility classes registered by plugins.\n- css = 7: Styles generated by css\n\n**Screens: 1 bit**\n\nFlag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.\n\n**Responsive: 4 bits**\n\nBased on extracted `min-width` value:\n\n- 576px -> 3\n- 1536px -> 10\n- 36rem -> 3\n- 96rem -> 9\n\n**At-Rules: 4 bits**\n\nBased on the count of special chars (`-:,`) within the at-rule.\n\n**Pseudo and group variants: 18 bits**\n\nEnsures predictable order of pseudo classes.\n\n- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718\n\n**Number of declarations (descending): 4 bits**\n\nAllows single declaration styles to overwrite styles from multi declaration styles.\n\n**Greatest precedence of properties: 4 bits**\n\nEnsure shorthand properties are inserted before longhand properties; eg longhand override shorthand\n*/ precedence1, layer;\n            return {\n                o: 0,\n                ...rule,\n                r: [\n                    ...asArray(conditions),\n                    ...asArray(rule.r)\n                ],\n                p: (precedence1 = precedence, layer = rule.p ?? precedence, precedence1 & ~Layer.o | layer)\n            };\n        }) : serialize(resolved, rule, context, precedence, conditions) : // propagate className as is\n        [\n            {\n                c: toClassName(rule),\n                p: 0,\n                o: 0,\n                r: []\n            }\n        ];\n    }(rule, context, precedence, conditions, important))result.splice(sortedInsertionIndex(result, cssRule), 0, cssRule);\n    return result;\n}\nfunction translateWith(name, layer, rules, context, precedence, conditions, important, useOrderOfRules) {\n    return merge((useOrderOfRules ? rules.flatMap((rule)=>translate([\n            rule\n        ], context, precedence, conditions, important)) : translate(rules, context, precedence, conditions, important)).map((rule)=>{\n        return(// do not move defaults\n        // move only rules with a name unless they are in the base layer\n        rule.p & Layer.o && (rule.n || layer == Layer.b) ? {\n            ...rule,\n            p: rule.p & ~Layer.o | layer,\n            o: 0\n        } : rule);\n    }), name);\n}\nfunction define(className, layer, rules, useOrderOfRules) {\n    var factory;\n    return factory = (rule, context)=>{\n        let { n: name , p: precedence , r: conditions , i: important  } = convert(rule, context, layer);\n        return rules && translateWith(name, layer, rules, context, precedence, conditions, important, useOrderOfRules);\n    }, registry.set(className, factory), className;\n}\n/**\n   * The utility name including `-` if set, but without `!` and variants\n   */ /**\n   * All variants without trailing colon: `hover`, `after:`, `[...]`\n   */ /**\n   * Something like `!underline` or `!bg-red-500` or `!red-500`\n   */ function createRule(active, current, loc) {\n    if ('(' != active[active.length - 1]) {\n        let variants = [], important = false, negated = false, name = '';\n        for (let value of active)if (!('(' == value || /[~@]$/.test(value))) {\n            if ('!' == value[0]) {\n                value = value.slice(1);\n                important = !important;\n            }\n            if (value.endsWith(':')) {\n                variants['dark:' == value ? 'unshift' : 'push'](value.slice(0, -1));\n                continue;\n            }\n            if ('-' == value[0]) {\n                value = value.slice(1);\n                negated = !negated;\n            }\n            value.endsWith('-') && (value = value.slice(0, -1));\n            value && '&' != value && (name += (name && '-') + value);\n        }\n        if (name) {\n            negated && (name = '-' + name);\n            current[0].push(Object.defineProperties({\n                n: name,\n                v: variants.filter(uniq),\n                i: important\n            }, {\n                a: {\n                    value: [\n                        ...active\n                    ]\n                },\n                l: {\n                    value: loc\n                }\n            }));\n        }\n    }\n}\nfunction uniq(value, index, values) {\n    return values.indexOf(value) == index;\n}\nlet cache = new Map();\n/**\n * @internal\n * @param token\n * @returns\n */ function parse(token) {\n    let parsed = cache.get(token);\n    if (!parsed) {\n        // Stack of active groupings (`(`), variants, or nested (`~` or `@`)\n        let active = [], // Stack of current rule list to put new rules in\n        // the first `0` element is the current list\n        current = [\n            []\n        ], startIndex = 0, skip = 0, comment = null, position = 0, // eslint-disable-next-line no-inner-declarations\n        commit = (isRule, endOffset = 0)=>{\n            if (startIndex != position) {\n                active.push(token.slice(startIndex, position + endOffset));\n                isRule && createRule(active, current, [\n                    startIndex,\n                    position + endOffset\n                ]);\n            }\n            startIndex = position + 1;\n        };\n        for(; position < token.length; position++){\n            let char = token[position];\n            if (skip) '\\\\' != token[position - 1] && (skip += +('[' == char) || -(']' == char));\n            else if ('[' == char) // start to skip\n            skip += 1;\n            else if (comment) {\n                if ('\\\\' != token[position - 1] && comment.test(token.slice(position))) {\n                    comment = null;\n                    startIndex = position + RegExp.lastMatch.length;\n                }\n            } else if ('/' == char && '\\\\' != token[position - 1] && ('*' == token[position + 1] || '/' == token[position + 1])) // multiline or single line comment\n            comment = '*' == token[position + 1] ? /^\\*\\// : /^[\\r\\n]/;\n            else if ('(' == char) {\n                // hover:(...) or utilitity-(...)\n                commit();\n                active.push(char);\n            } else if (':' == char) ':' != token[position + 1] && commit(false, 1);\n            else if (/[\\s,)]/.test(char)) {\n                // whitespace, comma or closing brace\n                commit(true);\n                let lastGroup = active.lastIndexOf('(');\n                if (')' == char) {\n                    // Close nested block\n                    let nested = active[lastGroup - 1];\n                    if (/[~@]$/.test(nested)) {\n                        let rules = current.shift();\n                        active.length = lastGroup;\n                        // remove variants that are already applied through active\n                        createRule([\n                            ...active,\n                            '#'\n                        ], current, [\n                            startIndex,\n                            position\n                        ]);\n                        let { v  } = current[0].pop();\n                        for (let rule of rules)// if a rule has dark we need to splice after the first entry eg dark\n                        rule.v.splice(+('dark' == rule.v[0]) - +('dark' == v[0]), v.length);\n                        createRule([\n                            ...active,\n                            define(// named nested\n                            nested.length > 1 ? nested.slice(0, -1) + hash(JSON.stringify([\n                                nested,\n                                rules\n                            ])) : nested + '(' + format(rules) + ')', Layer.a, rules, /@$/.test(nested))\n                        ], current, [\n                            startIndex,\n                            position\n                        ]);\n                    }\n                    lastGroup = active.lastIndexOf('(', lastGroup - 1);\n                }\n                active.length = lastGroup + 1;\n            } else /[~@]/.test(char) && '(' == token[position + 1] && // start nested block\n            // ~(...) or button~(...)\n            // @(...) or button@(...)\n            current.unshift([]);\n        }\n        // Consume remaining stack\n        commit(true);\n        cache.set(token, parsed = current[0]);\n    }\n    return parsed;\n}\nfunction interleave(strings, interpolations, handle) {\n    return interpolations.reduce((result, interpolation, index)=>result + handle(interpolation) + strings[index + 1], strings[0]);\n}\n// based on https://github.com/lukeed/clsx and https://github.com/jorgebucaran/classcat\nfunction interpolate(strings, interpolations) {\n    return Array.isArray(strings) && Array.isArray(strings.raw) ? interleave(strings, interpolations, (value)=>toString(value).trim()) : interpolations.filter(Boolean).reduce((result, value)=>result + toString(value), strings ? toString(strings) : '');\n}\nfunction toString(value) {\n    let tmp, result = '';\n    if (value && 'object' == typeof value) {\n        if (Array.isArray(value)) (tmp = interpolate(value[0], value.slice(1))) && (result += ' ' + tmp);\n        else for(let key in value)value[key] && (result += ' ' + key);\n    } else null != value && 'boolean' != typeof value && (result += ' ' + value);\n    return result;\n}\n/**\n * @group Class Name Generators\n */ let apply = /* #__PURE__ */ alias('@'), /**\n * @group Class Name Generators\n */ shortcut = /* #__PURE__ */ alias('~');\nfunction alias(marker) {\n    return new Proxy(function alias(strings, ...interpolations) {\n        return alias$('', strings, interpolations);\n    }, {\n        get (target, name) {\n            return name in target ? target[name] : function namedAlias(strings, ...interpolations) {\n                return alias$(name, strings, interpolations);\n            };\n        }\n    });\n    function alias$(name, strings, interpolations) {\n        return format(parse(name + marker + '(' + interpolate(strings, interpolations) + ')'));\n    }\n}\nfunction astish(strings, interpolations) {\n    return Array.isArray(strings) ? astish$(interleave(strings, interpolations, (interpolation)=>null != interpolation && 'boolean' != typeof interpolation ? interpolation : '')) : 'string' == typeof strings ? astish$(strings) : [\n        strings\n    ];\n}\n// Based on https://github.com/cristianbote/goober/blob/master/src/core/astish.js\nlet newRule = / *(?:(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}))/g;\n/**\n * Convert a css style string into a object\n */ function astish$(css) {\n    let block;\n    css = // Remove comments (multiline and single line)\n    css.replace(/\\/\\*[^]*?\\*\\/|\\s\\s+|\\n/gm, ' ');\n    let tree = [\n        {}\n    ], rules = [\n        tree[0]\n    ], conditions = [];\n    for(; block = newRule.exec(css);){\n        // Remove the current entry\n        if (block[4]) {\n            tree.shift();\n            conditions.shift();\n        }\n        if (block[3]) {\n            // new nested\n            conditions.unshift(block[3]);\n            tree.unshift({});\n            rules.push(conditions.reduce((body, condition)=>({\n                    [condition]: body\n                }), tree[0]));\n        } else if (!block[4]) {\n            // if we already have that property — start a new CSSObject\n            if (tree[0][block[1]]) {\n                tree.unshift({});\n                rules.push(conditions.reduce((body, condition)=>({\n                        [condition]: body\n                    }), tree[0]));\n            }\n            tree[0][block[1]] = block[2];\n        }\n    }\n    // console.log(rules)\n    return rules;\n}\n/**\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n */ function css(strings, ...interpolations) {\n    var factory;\n    let ast = astish(strings, interpolations), className = (ast.find((o)=>o.label)?.label || 'css') + hash(JSON.stringify(ast));\n    return factory = (rule, context)=>merge(ast.flatMap((css)=>serialize(css, rule, context, Layer.o)), className), registry.set(className, factory), className;\n}\n/**\n * @group Class Name Generators\n */ let animation = /* #__PURE__ */ new Proxy(function animation(animation, waypoints) {\n    return animation$('animation', animation, waypoints);\n}, {\n    get (target, name) {\n        return name in target ? target[name] : function namedAnimation(animation, waypoints) {\n            return animation$(name, animation, waypoints);\n        };\n    }\n});\nfunction animation$(label, animation, waypoints) {\n    return {\n        toString () {\n            return css({\n                label,\n                '@layer components': {\n                    ...'object' == typeof animation ? animation : {\n                        animation\n                    },\n                    animationName: '' + waypoints\n                }\n            });\n        }\n    };\n}\n/**\n * @group Configuration\n * @param pattern\n */ /**\n * @group Configuration\n * @param pattern\n * @param resolver\n */ /**\n * @group Configuration\n * @param pattern\n * @param resolve\n */ // eslint-disable-next-line @typescript-eslint/ban-types\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n * @param convert\n */ function match(pattern, // eslint-disable-next-line @typescript-eslint/ban-types\nresolve, convert) {\n    return [\n        pattern,\n        fromMatch(resolve, convert)\n    ];\n}\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */ /**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */ /**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */ /**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */ function fromMatch(resolve, convert) {\n    return 'function' == typeof resolve ? resolve : 'string' == typeof resolve && /^[\\w-]+$/.test(resolve) ? // a CSS property alias\n    (match, context)=>({\n            [resolve]: convert ? convert(match, context) : maybeNegate(match, 1)\n        }) : (match)=>// CSSObject, shortcut or apply\n        resolve || {\n            [match[1]]: maybeNegate(match, 2)\n        };\n}\nfunction maybeNegate(match, offset, value = match.slice(offset).find(Boolean) || match.$$ || match.input) {\n    return '-' == match.input[0] ? `calc(${value} * -1)` : value;\n}\n/**\n * @group Configuration\n * @param pattern\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */ function matchTheme(pattern, /** Theme section to use (default: `$1` — The first matched group) */ section, /** The css property (default: value of {@link section}) */ resolve, convert) {\n    return [\n        pattern,\n        fromTheme(section, resolve, convert)\n    ];\n}\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchTheme} instead.\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */ function fromTheme(/** Theme section to use (default: `$1` — The first matched group) */ section, /** The css property (default: value of {@link section}) */ resolve, convert) {\n    let factory = 'string' == typeof resolve ? (match, context)=>({\n            [resolve]: convert ? convert(match, context) : match._\n        }) : resolve || (({ 1: $1 , _  }, context, section)=>({\n            [$1 || section]: _\n        }));\n    return(/** The found theme value */ // indirection wrapper to remove autocomplete functions from production bundles\n    withAutocomplete((match, context)=>{\n        let themeSection = camelize(section || match[1]), value = context.theme(themeSection, match.$$) ?? arbitrary(match.$$, themeSection, context);\n        if (null != value) return match._ = maybeNegate(match, 0, value), factory(match, context, themeSection);\n    }, (match, context)=>{\n        let themeSection = camelize(section || match[1]), isKeyLookup = match.input.endsWith('-');\n        if (isKeyLookup) return Object.entries(context.theme(themeSection) || {}).filter(([key, value])=>key && 'DEFAULT' != key && (!/color|fill|stroke/i.test(themeSection) || [\n                'string',\n                'function'\n            ].includes(typeof value))).map(([key, value])=>({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: {\n                    section: themeSection,\n                    key\n                },\n                color: /color|fill|stroke/i.test(themeSection) && toColorValue(value, {\n                    opacityValue: '1'\n                })\n            })).concat([\n            {\n                suffix: '['\n            }\n        ]);\n        let value = context.theme(themeSection, 'DEFAULT');\n        return value ? [\n            {\n                suffix: '',\n                theme: {\n                    section: themeSection,\n                    key: 'DEFAULT'\n                },\n                color: /color|fill|stroke/i.test(themeSection) && toColorValue(value, {\n                    opacityValue: '1'\n                })\n            }\n        ] : [];\n    }));\n}\n/** Theme section to use (default: `$0.replace('-', 'Color')` — The matched string with `Color` appended) */ /** The css property (default: value of {@link section}) */ /** `--tw-${$0}opacity` -> '--tw-text-opacity' */ /** `section.replace('Color', 'Opacity')` -> 'textOpacity' */ /**\n * @group Configuration\n * @param pattern\n * @param options\n * @param resolve\n * @returns\n */ function matchColor(pattern, options = {}, resolve) {\n    return [\n        pattern,\n        colorFromTheme(options, resolve)\n    ];\n}\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchColor} instead.\n * @param options\n * @param resolve\n * @returns\n */ function colorFromTheme(options = {}, resolve) {\n    return withAutocomplete((match, context)=>{\n        // text- -> textColor\n        // ring-offset(?:-|$) -> ringOffsetColor\n        let { section =camelize(match[0]).replace('-', '') + 'Color'  } = options, // extract color and opacity\n        // rose-500                  -> ['rose-500']\n        // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n        // indigo-500/100            -> ['indigo-500', '100']\n        // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n        [colorMatch, opacityMatch] = parseValue(match.$$);\n        if (!colorMatch) return;\n        let colorValue = context.theme(section, colorMatch) || arbitrary(colorMatch, section, context);\n        if (!colorValue || 'object' == typeof colorValue) return;\n        let { // text- -> --tw-text-opacity\n        // ring-offset(?:-|$) -> --tw-ring-offset-opacity\n        // TODO move this default into preset-tailwind?\n        opacityVariable =`--tw-${match[0].replace(/-$/, '')}-opacity` , opacitySection =section.replace('Color', 'Opacity') , property =section , selector  } = options, opacityValue = context.theme(opacitySection, opacityMatch || 'DEFAULT') || opacityMatch && arbitrary(opacityMatch, opacitySection, context), // if (typeof color != 'string') {\n        //   console.warn(`Invalid color ${colorMatch} (from ${match.input}):`, color)\n        //   return\n        // }\n        create = resolve || (({ _  })=>{\n            let properties = toCSS(property, _);\n            return selector ? {\n                [selector]: properties\n            } : properties;\n        });\n        match._ = {\n            value: toColorValue(colorValue, {\n                opacityVariable: opacityVariable || void 0,\n                opacityValue: opacityValue || void 0\n            }),\n            color: (options)=>toColorValue(colorValue, options),\n            opacityVariable: opacityVariable || void 0,\n            opacityValue: opacityValue || void 0\n        };\n        let properties = create(match, context);\n        // auto support dark mode colors\n        if (!match.dark) {\n            let darkColorValue = context.d(section, colorMatch, colorValue);\n            if (darkColorValue && darkColorValue !== colorValue) {\n                match._ = {\n                    value: toColorValue(darkColorValue, {\n                        opacityVariable: opacityVariable || void 0,\n                        opacityValue: opacityValue || '1'\n                    }),\n                    color: (options)=>toColorValue(darkColorValue, options),\n                    opacityVariable: opacityVariable || void 0,\n                    opacityValue: opacityValue || void 0\n                };\n                properties = {\n                    '&': properties,\n                    [context.v('dark')]: create(match, context)\n                };\n            }\n        }\n        return properties;\n    }, (match, context)=>{\n        let { section =camelize(match[0]).replace('-', '') + 'Color' , opacitySection =section.replace('Color', 'Opacity')  } = options, isKeyLookup = match.input.endsWith('-'), opacities = Object.entries(context.theme(opacitySection) || {}).filter(([key, value])=>'DEFAULT' != key && /^[\\w-]+$/.test(key) && 'string' == typeof value);\n        if (isKeyLookup) // ['gray-50', ['/0', '/10', ...]],\n        // ['gray-100', ['/0', '/10', ...]],\n        return Object.entries(context.theme(section) || {}).filter(([key, value])=>key && 'DEFAULT' != key && [\n                'string',\n                'function'\n            ].includes(typeof value)).map(([key, value])=>({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: {\n                    section,\n                    key\n                },\n                color: toColorValue(value, {\n                    opacityValue: context.theme(opacitySection, 'DEFAULT') || '1'\n                }),\n                modifiers: ('function' == typeof value || 'string' == typeof value && (value.includes('<alpha-value>') || '#' == value[0] && (4 == value.length || 7 == value.length))) && opacities.map(([key, opacityValue])=>({\n                        modifier: key,\n                        theme: {\n                            section: opacitySection,\n                            key\n                        },\n                        color: toColorValue(value, {\n                            opacityValue\n                        })\n                    })).concat([\n                    {\n                        modifier: '[',\n                        color: toColorValue(value, {\n                            opacityValue: '1'\n                        })\n                    }\n                ])\n            })).concat([\n            {\n                suffix: '['\n            }\n        ]);\n        let value = context.theme(section, 'DEFAULT');\n        return value ? [\n            {\n                suffix: '',\n                theme: {\n                    section,\n                    key: 'DEFAULT'\n                },\n                color: toColorValue(value, {\n                    opacityValue: context.theme(opacitySection, 'DEFAULT') || '1'\n                }),\n                modifiers: ('function' == typeof value || 'string' == typeof value && (value.includes('<alpha-value>') || '#' == value[0] && (4 == value.length || 7 == value.length))) && opacities.map(([key, opacityValue])=>({\n                        modifier: key,\n                        theme: {\n                            section: opacitySection,\n                            key\n                        },\n                        color: toColorValue(value, {\n                            opacityValue\n                        })\n                    })).concat([\n                    {\n                        modifier: '[',\n                        color: toColorValue(value, {\n                            opacityValue: '1'\n                        })\n                    }\n                ])\n            }\n        ] : [];\n    });\n}\n/**\n * @internal\n * @param input\n */ function parseValue(input) {\n    // extract color and opacity\n    // rose-500                  -> ['rose-500']\n    // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n    // indigo-500/100            -> ['indigo-500', '100']\n    // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n    return (input.match(/^(\\[[^\\]]+]|[^/]+?)(?:\\/(.+))?$/) || []).slice(1);\n}\n/**\n * @internal\n * @param property\n * @param value\n * @returns\n */ function toCSS(property, value) {\n    let properties = {};\n    if ('string' == typeof value) properties[property] = value;\n    else {\n        value.opacityVariable && value.value.includes(value.opacityVariable) && (properties[value.opacityVariable] = value.opacityValue || '1');\n        properties[property] = value.value;\n    }\n    return properties;\n}\n/**\n * @internal\n * @param value\n * @param section\n * @param context\n * @returns\n */ function arbitrary(value, section, context) {\n    if ('[' == value[0] && ']' == value.slice(-1)) {\n        value = normalize(resolveThemeFunction(value.slice(1, -1), context.theme));\n        if (!section) return value;\n        if (// Respect type hints from the user on ambiguous arbitrary values - https://tailwindcss.com/docs/adding-custom-styles#resolving-ambiguities\n        !// If this is a color section and the value is a hex color, color function or color name\n        (/color|fill|stroke/i.test(section) && !(/^color:/.test(value) || /^(#|((hsl|rgb)a?|hwb|lab|lch|color)\\(|[a-z]+$)/.test(value)) || // url(, [a-z]-gradient(, image(, cross-fade(, image-set(\n        /image/i.test(section) && !(/^image:/.test(value) || /^[a-z-]+\\(/.test(value)) || // font-*\n        // - fontWeight (type: ['lookup', 'number', 'any'])\n        // - fontFamily (type: ['lookup', 'generic-name', 'family-name'])\n        /weight/i.test(section) && !(/^(number|any):/.test(value) || /^\\d+$/.test(value)) || // bg-*\n        // - backgroundPosition (type: ['lookup', ['position', { preferOnConflict: true }]])\n        // - backgroundSize (type: ['lookup', 'length', 'percentage', 'size'])\n        /position/i.test(section) && /^(length|size):/.test(value))) // remove arbitrary type prefix — we do not need it but user may use it\n        // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js\n        // url, number, percentage, length, line-width, shadow, color, image, gradient, position, family-name, lookup, any, generic-name, absolute-size, relative-size\n        return value.replace(/^[a-z-]+:/, '');\n    }\n}\nfunction camelize(value) {\n    return value.replace(/-./g, (x)=>x[1].toUpperCase());\n}\n/**\n * @internal\n * @param value\n * @returns\n */ function normalize(value) {\n    return(// Keep raw strings if it starts with `url(`\n    value.includes('url(') ? value.replace(/(.*?)(url\\(.*?\\))(.*?)/g, (_, before = '', url, after = '')=>normalize(before) + url + normalize(after)) : value.// Convert `_` to ` `, except for escaped underscores `\\_`\n    replace(/(^|[^\\\\])_+/g, (fullMatch, characterBefore)=>characterBefore + ' '.repeat(fullMatch.length - characterBefore.length)).replace(/\\\\_/g, '_').// Add spaces around operators inside math functions like calc() that do not follow an operator\n    // or '('.\n    replace(/(calc|min|max|clamp)\\(.+\\)/g, (match)=>match.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g, '$1 $2 ')));\n}\n/** Allows to resolve theme values. */ let kAutocomplete = /* #__PURE__ */ Symbol('@twind/autocomplete');\n/**\n * @experimental\n * @group Configuration\n * @param resolver\n * @param autocomplete\n */ function withAutocomplete(rule, autocomplete) {\n    if (autocomplete) {\n        if ('function' == typeof rule) return Object.defineProperty(rule, kAutocomplete, {\n            value: autocomplete,\n            configurable: true\n        });\n        let [pattern, resolve, convert] = asArray(rule);\n        // [\n        //   patterns: MaybeArray<string | RegExp>,\n        //   resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n        //   convert?: MatchConverter<Theme>,\n        // ]\n        return [\n            pattern,\n            Object.defineProperty(fromMatch(resolve, convert), kAutocomplete, {\n                value: autocomplete,\n                configurable: true\n            })\n        ];\n    }\n    return rule;\n}\n/**\n * @internal\n * @param resolver\n * @returns\n */ function getAutocompleteProvider(resolver) {\n    return resolver[kAutocomplete];\n}\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n * @returns\n */ /**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param input\n */ function cx(strings, ...interpolations) {\n    return format(parse(interpolate(strings, interpolations)), ' ');\n}\n/**\n * @group Configuration\n * @param param0\n * @returns\n */ function defineConfig({ presets =[] , ...userConfig }) {\n    // most user config values go first to have precendence over preset config\n    // only `preflight` and `theme` are applied as last preset to override all presets\n    let config = {\n        darkMode: void 0,\n        darkColor: void 0,\n        preflight: false !== userConfig.preflight && [],\n        theme: {},\n        variants: asArray(userConfig.variants),\n        rules: asArray(userConfig.rules),\n        ignorelist: asArray(userConfig.ignorelist),\n        hash: void 0,\n        stringify: (property, value)=>property + ':' + value,\n        finalize: []\n    };\n    for (let preset of asArray([\n        ...presets,\n        {\n            darkMode: userConfig.darkMode,\n            darkColor: userConfig.darkColor,\n            preflight: false !== userConfig.preflight && asArray(userConfig.preflight),\n            theme: userConfig.theme,\n            hash: userConfig.hash,\n            stringify: userConfig.stringify,\n            finalize: userConfig.finalize\n        }\n    ])){\n        let { preflight , darkMode =config.darkMode , darkColor =config.darkColor , theme , variants , rules , ignorelist , hash =config.hash , stringify =config.stringify , finalize  } = 'function' == typeof preset ? preset(config) : preset;\n        config = {\n            // values defined by user or previous presets take precedence\n            preflight: false !== config.preflight && false !== preflight && [\n                ...config.preflight,\n                ...asArray(preflight)\n            ],\n            darkMode,\n            darkColor,\n            theme: {\n                ...config.theme,\n                ...theme,\n                extend: {\n                    ...config.theme.extend,\n                    ...theme?.extend\n                }\n            },\n            variants: [\n                ...config.variants,\n                ...asArray(variants)\n            ],\n            rules: [\n                ...config.rules,\n                ...asArray(rules)\n            ],\n            ignorelist: [\n                ...config.ignorelist,\n                ...asArray(ignorelist)\n            ],\n            hash,\n            stringify,\n            finalize: [\n                ...config.finalize,\n                ...asArray(finalize)\n            ]\n        };\n    }\n    return config;\n}\nfunction warn(message, code, detail) {\n    if ('function' == typeof dispatchEvent && 'function' == typeof CustomEvent) {\n        // Browser\n        let event = new CustomEvent('warning', {\n            detail: {\n                message,\n                code,\n                detail\n            },\n            cancelable: true\n        });\n        dispatchEvent(event);\n        event.defaultPrevented || console.warn(`[${code}] ${message}`, {\n            detail\n        });\n    } else 'object' == typeof process && 'function' == typeof process.emitWarning ? // Node.JS\n    process.emitWarning(message, {\n        code,\n        detail\n    }) : // Fallback\n    console.warn(`[${code}] ${message}`, {\n        detail\n    });\n}\nfunction find(value, list, cache, getResolver, context, isDark) {\n    for (let item of list){\n        let resolver = cache.get(item);\n        resolver || cache.set(item, resolver = getResolver(item));\n        let resolved = resolver(value, context, isDark);\n        if (resolved) return resolved;\n    }\n}\nfunction getVariantResolver(variant) {\n    var resolve;\n    return createResolve(variant[0], 'function' == typeof (resolve = variant[1]) ? resolve : ()=>resolve);\n}\nfunction getRuleResolver(rule) {\n    var resolve, convert;\n    return Array.isArray(rule) ? createResolve(rule[0], fromMatch(rule[1], rule[2])) : createResolve(rule, fromMatch(resolve, convert));\n}\nfunction createResolve(patterns, resolve) {\n    return createRegExpExecutor(patterns, (value, condition, context, isDark)=>{\n        let match = condition.exec(value);\n        if (match) return(// MATCH.$_ = value\n        match.$$ = value.slice(match[0].length), match.dark = isDark, resolve(match, context));\n    });\n}\nfunction createRegExpExecutor(patterns, run) {\n    let conditions = asArray(patterns).map(toCondition);\n    return (value, context, isDark)=>{\n        for (let condition of conditions){\n            let result = run(value, condition, context, isDark);\n            if (result) return result;\n        }\n    };\n}\nfunction toCondition(value) {\n    // \"visible\" -> /^visible$/\n    // \"(float)-(left|right|none)\" -> /^(float)-(left|right|none)$/\n    // \"auto-rows-\" -> /^auto-rows-/\n    // \"gap(-|$)\" -> /^gap(-|$)/\n    return 'string' == typeof value ? RegExp('^' + value + (value.includes('$') || '-' == value.slice(-1) ? '' : '$')) : value;\n}\n/**\n * @group Runtime\n * @param config\n * @param sheet\n */ function twind(userConfig, sheet) {\n    let config = defineConfig(userConfig), context = function({ theme , darkMode , darkColor =noop , variants , rules , hash: hash$1 , stringify , ignorelist , finalize  }) {\n        // Used to cache resolved rule values\n        let variantCache = new Map(), // lazy created resolve functions\n        variantResolvers = new Map(), // Used to cache resolved rule values\n        ruleCache = new Map(), // lazy created resolve functions\n        ruleResolvers = new Map(), ignored = createRegExpExecutor(ignorelist, (value, condition)=>condition.test(value)), reportedUnknownClasses = /* #__PURE__ */ new Set();\n        // add dark as last variant to allow user to override it\n        // we can modify variants as it has been passed through defineConfig which already made a copy\n        variants.push([\n            'dark',\n            Array.isArray(darkMode) || 'class' == darkMode ? `${asArray(darkMode)[1] || '.dark'} &` : 'string' == typeof darkMode && 'media' != darkMode ? darkMode : // a custom selector\n            '@media (prefers-color-scheme:dark)'\n        ]);\n        let h = 'function' == typeof hash$1 ? (value)=>hash$1(value, hash) : hash$1 ? hash : identity;\n        h !== identity && finalize.push((rule)=>({\n                ...rule,\n                n: rule.n && h(rule.n),\n                d: rule.d?.replace(/--(tw(?:-[\\w-]+)?)\\b/g, (_, property)=>'--' + h(property).replace('#', ''))\n            }));\n        let ctx = {\n            theme: function({ extend ={} , ...base }) {\n                let resolved = {}, resolveContext = {\n                    get colors () {\n                        return theme('colors');\n                    },\n                    theme,\n                    // Stub implementation as negated values are automatically infered and do _not_ need to be in the theme\n                    negative () {\n                        return {};\n                    },\n                    breakpoints (screens) {\n                        let breakpoints = {};\n                        for(let key in screens)'string' == typeof screens[key] && (breakpoints['screen-' + key] = screens[key]);\n                        return breakpoints;\n                    }\n                };\n                return theme;\n                function theme(sectionKey, key, defaultValue, opacityValue) {\n                    if (sectionKey) {\n                        ({ 1: sectionKey , 2: opacityValue  } = // eslint-disable-next-line no-sparse-arrays\n                        /^(\\S+?)(?:\\s*\\/\\s*([^/]+))?$/.exec(sectionKey) || [\n                            ,\n                            sectionKey\n                        ]);\n                        if (/[.[]/.test(sectionKey)) {\n                            let path = [];\n                            // dotted deep access: colors.gray.500 or spacing[2.5]\n                            sectionKey.replace(/\\[([^\\]]+)\\]|([^.[]+)/g, (_, $1, $2 = $1)=>path.push($2));\n                            sectionKey = path.shift();\n                            defaultValue = key;\n                            key = path.join('-');\n                        }\n                        let section = resolved[sectionKey] || // two-step deref to allow extend section to reference base section\n                        Object.assign(Object.assign(// Make sure to not get into recursive calls\n                        resolved[sectionKey] = {}, deref(base, sectionKey)), deref(extend, sectionKey));\n                        if (null == key) return section;\n                        key || (key = 'DEFAULT');\n                        let value = section[key] ?? key.split('-').reduce((obj, prop)=>obj?.[prop], section) ?? defaultValue;\n                        return opacityValue ? toColorValue(value, {\n                            opacityValue: resolveThemeFunction(opacityValue, theme)\n                        }) : value;\n                    }\n                    // Collect the whole theme\n                    let result = {};\n                    for (let section1 of [\n                        ...Object.keys(base),\n                        ...Object.keys(extend)\n                    ])result[section1] = theme(section1);\n                    return result;\n                }\n                function deref(source, section) {\n                    let value = source[section];\n                    return ('function' == typeof value && (value = value(resolveContext)), value && /color|fill|stroke/i.test(section)) ? function flattenColorPalette(colors, path = []) {\n                        let flattend = {};\n                        for(let key in colors){\n                            let value = colors[key], keyPath = [\n                                ...path,\n                                key\n                            ];\n                            flattend[keyPath.join('-')] = value;\n                            if ('DEFAULT' == key) {\n                                keyPath = path;\n                                flattend[path.join('-')] = value;\n                            }\n                            'object' == typeof value && Object.assign(flattend, flattenColorPalette(value, keyPath));\n                        }\n                        return flattend;\n                    }(value) : value;\n                }\n            }(theme),\n            e: escape,\n            h,\n            s (property, value) {\n                return stringify(property, value, ctx);\n            },\n            d (section, key, color) {\n                return darkColor(section, key, ctx, color);\n            },\n            v (value) {\n                return variantCache.has(value) || variantCache.set(value, find(value, variants, variantResolvers, getVariantResolver, ctx) || '&:' + value), variantCache.get(value);\n            },\n            r (className, isDark) {\n                let key = JSON.stringify([\n                    className,\n                    isDark\n                ]);\n                if (!ruleCache.has(key)) {\n                    ruleCache.set(key, !ignored(className, ctx) && find(className, rules, ruleResolvers, getRuleResolver, ctx, isDark));\n                    {\n                        let rule = ruleCache.get(key);\n                        if (null == rule && !reportedUnknownClasses.has(className)) {\n                            reportedUnknownClasses.add(className);\n                            warn(`Unknown class ${JSON.stringify(className)} found.`, 'TWIND_INVALID_CLASS', className);\n                        }\n                    }\n                }\n                return ruleCache.get(key);\n            },\n            f (rule) {\n                return finalize.reduce((rule, p)=>p(rule, ctx), rule);\n            }\n        };\n        return ctx;\n    }(config), // Map of tokens to generated className\n    cache = new Map(), // An array of precedence by index within the sheet\n    // always sorted\n    sortedPrecedences = [], // Cache for already inserted css rules\n    // to prevent double insertions\n    insertedRules = new Set();\n    sheet.resume((className)=>cache.set(className, className), (cssText, rule)=>{\n        sheet.insert(cssText, sortedPrecedences.length, rule);\n        sortedPrecedences.push(rule);\n        insertedRules.add(cssText);\n    });\n    function insert(rule) {\n        let finalRule = context.f(rule), cssText = stringify$1(finalRule);\n        // If not already inserted\n        if (cssText && !insertedRules.has(cssText)) {\n            // Mark rule as inserted\n            insertedRules.add(cssText);\n            // Find the correct position\n            let index = sortedInsertionIndex(sortedPrecedences, rule);\n            // Insert\n            sheet.insert(cssText, index, rule);\n            // Update sorted index\n            sortedPrecedences.splice(index, 0, rule);\n        }\n        return finalRule.n;\n    }\n    return Object.defineProperties(function tw(tokens) {\n        if (!cache.size) for (let preflight of asArray(config.preflight)){\n            'function' == typeof preflight && (preflight = preflight(context));\n            preflight && ('string' == typeof preflight ? translateWith('', Layer.b, parse(preflight), context, Layer.b, [], false, true) : serialize(preflight, {}, context, Layer.b)).forEach(insert);\n        }\n        tokens = '' + tokens;\n        let className = cache.get(tokens);\n        if (!className) {\n            let classNames = new Set();\n            for (let rule of translate(parse(tokens), context))classNames.add(rule.c).add(insert(rule));\n            className = [\n                ...classNames\n            ].filter(Boolean).join(' ');\n            // Remember the generated class name\n            cache.set(tokens, className).set(className, className);\n        }\n        return className;\n    }, Object.getOwnPropertyDescriptors({\n        get target () {\n            return sheet.target;\n        },\n        theme: context.theme,\n        config,\n        snapshot () {\n            let restoreSheet = sheet.snapshot(), insertedRules$ = new Set(insertedRules), cache$ = new Map(cache), sortedPrecedences$ = [\n                ...sortedPrecedences\n            ];\n            return ()=>{\n                restoreSheet();\n                insertedRules = insertedRules$;\n                cache = cache$;\n                sortedPrecedences = sortedPrecedences$;\n            };\n        },\n        clear () {\n            sheet.clear();\n            insertedRules = new Set();\n            cache = new Map();\n            sortedPrecedences = [];\n        },\n        destroy () {\n            this.clear();\n            sheet.destroy();\n        }\n    }));\n}\n/**\n * Determines if two class name strings contain the same classes.\n *\n * @param a first class names\n * @param b second class names\n * @returns are they different\n */ function changed(a, b) {\n    return a != b && '' + a.split(' ').sort() != '' + b.split(' ').sort();\n}\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n * @internal\n */ function mo(tw) {\n    let observer = new MutationObserver(handleMutationRecords);\n    return {\n        observe (target) {\n            observer.observe(target, {\n                attributeFilter: [\n                    'class'\n                ],\n                subtree: true,\n                childList: true\n            });\n            // handle class attribute on target\n            handleClassAttributeChange(target);\n            // handle children of target\n            handleMutationRecords([\n                {\n                    target,\n                    type: ''\n                }\n            ]);\n        },\n        disconnect () {\n            observer.disconnect();\n        }\n    };\n    function handleMutationRecords(records) {\n        for (let { type , target  } of records)if ('a' == type[0]) /* attribute */ // class attribute has been changed\n        handleClassAttributeChange(target);\n        else /* childList */ // some nodes have been added — find all with a class attribute\n        for (let el of target.querySelectorAll('[class]'))handleClassAttributeChange(el);\n        // remove pending mutations — these are triggered by updating the class attributes\n        observer.takeRecords();\n    }\n    // XXX maybe we need to handle all pending mutations\n    // observer.takeRecords().forEach(handleMutation)\n    function handleClassAttributeChange(target) {\n        let className;\n        // Not using target.classList.value (not supported in all browsers) or target.class (this is an SVGAnimatedString for svg)\n        // safe guard access to getAttribute because ShadowRoot does not have attribute but child nodes\n        let tokens = target.getAttribute?.('class');\n        tokens && changed(tokens, className = tw(tokens)) && // Not using `target.className = ...` as that is read-only for SVGElements\n        target.setAttribute('class', className);\n    }\n}\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n */ function observe(tw$1 = tw, target = 'undefined' != typeof document && document.documentElement) {\n    if (target) {\n        let observer = mo(tw$1);\n        observer.observe(target);\n        // monkey patch tw.destroy to disconnect this observer\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        let { destroy  } = tw$1;\n        tw$1.destroy = ()=>{\n            observer.disconnect();\n            destroy.call(tw$1);\n        };\n    }\n    return tw$1;\n}\n/**\n * Simplified MutationRecord which allows us to pass an\n * ArrayLike (compatible with Array and NodeList) `addedNodes` and\n * omit other properties we are not interested in.\n */ function getStyleElement(selector) {\n    let style = document.querySelector(selector || 'style[data-twind=\"\"]');\n    if (!style || 'STYLE' != style.tagName) {\n        style = document.createElement('style');\n        document.head.prepend(style);\n    }\n    return style.dataset.twind = 'claimed', style;\n}\n/**\n * @group Sheets\n * @param element\n * @returns\n */ function cssom(element) {\n    let target = element?.cssRules ? element : (element && 'string' != typeof element ? element : getStyleElement(element)).sheet;\n    return {\n        target,\n        snapshot () {\n            // collect current rules\n            let rules = Array.from(target.cssRules, (rule)=>rule.cssText);\n            return ()=>{\n                // remove all existing rules\n                this.clear();\n                // add all snapshot rules back\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                rules.forEach(this.insert);\n            };\n        },\n        clear () {\n            // remove all added rules\n            for(let index = target.cssRules.length; index--;)target.deleteRule(index);\n        },\n        destroy () {\n            target.ownerNode?.remove();\n        },\n        insert (cssText, index) {\n            try {\n                // Insert\n                target.insertRule(cssText, index);\n            } catch (error) {\n                // Empty rule to keep index valid — not using `*{}` as that would show up in all rules (DX)\n                target.insertRule(':root{}', index);\n                /:-[mwo]/.test(cssText) || warn(error.message, 'TWIND_INVALID_CSS', cssText);\n            }\n        },\n        resume: noop\n    };\n}\n/**\n * @group Sheets\n * @param element\n * @returns\n */ function dom(element) {\n    let target = element && 'string' != typeof element ? element : getStyleElement(element);\n    return {\n        target,\n        snapshot () {\n            // collect current rules\n            let rules = Array.from(target.childNodes, (node)=>node.textContent);\n            return ()=>{\n                // remove all existing rules\n                this.clear();\n                // add all snapshot rules back\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                rules.forEach(this.insert);\n            };\n        },\n        clear () {\n            target.textContent = '';\n        },\n        destroy () {\n            target.remove();\n        },\n        insert (cssText, index) {\n            target.insertBefore(document.createTextNode(cssText), target.childNodes[index] || null);\n        },\n        resume: noop\n    };\n}\n/**\n * @group Sheets\n * @param includeResumeData\n * @returns\n */ function virtual(includeResumeData) {\n    let target = [];\n    return {\n        target,\n        snapshot () {\n            // collect current rules\n            let rules = [\n                ...target\n            ];\n            return ()=>{\n                // remove all existing rules and add all snapshot rules back\n                target.splice(0, target.length, ...rules);\n            };\n        },\n        clear () {\n            target.length = 0;\n        },\n        destroy () {\n            this.clear();\n        },\n        insert (css, index, rule) {\n            target.splice(index, 0, includeResumeData ? `/*!${rule.p.toString(36)},${(2 * rule.o).toString(36)}${rule.n ? ',' + rule.n : ''}*/${css}` : css);\n        },\n        resume: noop\n    };\n}\n/**\n * Returns a sheet useable in the current environment.\n *\n * @group Sheets\n * @param useDOMSheet usually something like `process.env.NODE_ENV != 'production'` or `import.meta.env.DEV` (default: browser={@link cssom}, server={@link virtual})\n * @param disableResume to not include or use resume data\n * @returns a sheet to use\n */ function getSheet(useDOMSheet, disableResume) {\n    let sheet = 'undefined' == typeof document ? virtual(!disableResume) : useDOMSheet ? dom() : cssom();\n    return disableResume || (sheet.resume = resume), sheet;\n}\n/**\n * @group Sheets\n * @param target\n * @returns\n */ function stringify(target) {\n    // string[] | CSSStyleSheet | HTMLStyleElement\n    return(// prefer the raw text content of a CSSStyleSheet as it may include the resume data\n    (target.ownerNode || target).textContent || (target.cssRules ? Array.from(target.cssRules, (rule)=>rule.cssText) : asArray(target)).join(''));\n}\nfunction resume(addClassName, insert) {\n    // hydration from SSR sheet\n    let textContent = stringify(this.target), RE = /\\/\\*!([\\da-z]+),([\\da-z]+)(?:,(.+?))?\\*\\//g;\n    // only if this is a hydratable sheet\n    if (RE.test(textContent)) {\n        var match;\n        let // 3. parse SSR styles\n        lastMatch;\n        // RE has global flag — reset index to get the first match as well\n        RE.lastIndex = 0;\n        // 1. start with a fresh sheet\n        this.clear();\n        // 2. add all existing class attributes to the token/className cache\n        if ('undefined' != typeof document) for (let el of document.querySelectorAll('[class]'))addClassName(el.getAttribute('class'));\n        for(; match = RE.exec(textContent), lastMatch && insert(// grep the cssText from the previous match end up to this match start\n        textContent.slice(lastMatch.index + lastMatch[0].length, match?.index), {\n            p: parseInt(lastMatch[1], 36),\n            o: parseInt(lastMatch[2], 36) / 2,\n            n: lastMatch[3]\n        }), lastMatch = match;);\n    }\n}\n/* no-op */ /**\n * @group Runtime\n * @param install\n * @returns\n */ function auto(install) {\n    // If we run in the browser we call install at latest when the body is inserted\n    // This algorith works well for _normal_ scripts (`<script src=\"...\"></script>`)\n    // but not for modules because those are executed __after__ the DOM is ready\n    // and we would have FOUC\n    if ('undefined' != typeof document && document.currentScript) {\n        let cancelAutoInstall = ()=>observer.disconnect(), observer = new MutationObserver((mutationsList)=>{\n            for (let { target  } of mutationsList)// If we reach the body we immediately run the install to prevent FOUC\n            if (target === document.body) {\n                install();\n                return cancelAutoInstall();\n            }\n        });\n        return observer.observe(document.documentElement, {\n            childList: true,\n            subtree: true\n        }), cancelAutoInstall;\n    }\n    return noop;\n}\nfunction assertActive() {\n    if (!active) throw Error(\"No active twind instance found. Make sure to call setup or install before accessing tw.\");\n}\n/**\n * A proxy to the currently active Twind instance.\n * @group Style Injectors\n */ let tw = /* #__PURE__ */ new Proxy(// just exposing the active as tw should work with most bundlers\n// as ES module export can be re-assigned BUT some bundlers to not honor this\n// -> using a delegation proxy here\nnoop, {\n    apply (_target, _thisArg, args) {\n        return assertActive(), active(args[0]);\n    },\n    get (target, property) {\n        // Workaround webpack accessing the prototype in dev mode\n        if (!active && property in target) // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return target[property];\n        assertActive();\n        let value = active[property];\n        return 'function' == typeof value ? function() {\n            return assertActive(), // eslint-disable-next-line prefer-rest-params\n            value.apply(active, arguments);\n        } : value;\n    }\n});\n/**\n * Manages a single Twind instance — works in browser, Node.js, Deno, workers...\n *\n * @group Runtime\n * @param config\n * @param sheet\n * @param target\n * @returns\n */ function setup(config = {}, sheet = getSheet, target) {\n    return active?.destroy(), active = observe(twind(config, 'function' == typeof sheet ? sheet() : sheet), target);\n}\n/**\n * Injects styles into the global scope and is useful for applications such as gloabl styles, CSS resets or font faces.\n *\n * It **does not** return a class name, but adds the styles within the base layer to the stylesheet directly.\n *\n * @group Style Injectors\n */ let injectGlobal = function(strings, ...interpolations) {\n    ('function' == typeof this ? this : tw)(css({\n        '@layer base': astish(strings, interpolations)\n    }));\n};\n/**\n * @group Runtime\n * @param config\n * @param isProduction\n */ function install(config, isProduction = false) {\n    let config$ = defineConfig(config);\n    return setup({\n        ...config$,\n        // in production use short hashed class names\n        hash: config$.hash ?? isProduction\n    }, ()=>getSheet(!isProduction));\n}\n/**\n * **Note**: The styles will be injected on first use.\n *\n * @group Style Injectors\n */ let keyframes = /* #__PURE__ */ function bind(thisArg) {\n    return new Proxy(function keyframes(strings, ...interpolations) {\n        return keyframes$(thisArg, '', strings, interpolations);\n    }, {\n        get (target, name) {\n            return 'bind' === name ? bind : name in target ? target[name] : function namedKeyframes(strings, ...interpolations) {\n                return keyframes$(thisArg, name, strings, interpolations);\n            };\n        }\n    });\n}();\nfunction keyframes$(thisArg, name, strings, interpolations) {\n    // lazy inject keyframes\n    return {\n        toString () {\n            let ast = astish(strings, interpolations), keyframeName = escape(name + hash(JSON.stringify([\n                name,\n                ast\n            ])));\n            return(// lazy access tw\n            ('function' == typeof thisArg ? thisArg : tw)(css({\n                [`@keyframes ${keyframeName}`]: astish(strings, interpolations)\n            })), keyframeName);\n        }\n    };\n}\n/**\n * Options for {@link inline}\n */ /**\n   * {@link Twind} instance to use (default: {@link @twind/core.tw})\n   */ /**\n   * Allows to minify the resulting CSS.\n   */ /**\n   * Called to minify the CSS.\n   *\n   * @param css the CSS to minify\n   * @param html the HTML that will be used — allows to only include above-the-fold CSS\n   * @return the resulting CSS\n   */ /**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. inject a style element with the CSS as last element into the head\n * 4. return the HTML string with the final element classes\n *\n * ```js\n * import { inline } from '@twind/core'\n *\n * function render() {\n *   return inline(renderApp())\n * }\n * ```\n *\n * Minify CSS with [@parcel/css](https://www.npmjs.com/package/@parcel/css):\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { transform } from '@parcel/css'\n *\n * function render() {\n *   return inline(renderApp(), { minify: (css) => transform({ filename: 'twind.css', code: Buffer.from(css), minify: true }) })\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   return inline(renderApp(), { tw })\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param options to customize the processing\n * @returns the resulting HTML\n */ function inline(markup, options = {}) {\n    let { tw: tw$1 = tw , minify =identity  } = 'function' == typeof options ? {\n        tw: options\n    } : options, { html , css  } = extract(markup, tw$1);\n    // inject as last element into the head\n    return html.replace('</head>', `<style data-twind>${minify(css, html)}</style></head>`);\n}\n/**\n * Result of {@link extract}\n */ /** The possibly modified HTML */ /** The generated CSS */ /**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { extract } from '@twind/core'\n *\n * function render() {\n *   const { html, css } = extract(renderApp())\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { extract } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const { html, css } = extract(renderApp(), tw)\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance (default: twind managed tw)\n * @returns the possibly modified html and css\n */ function extract(html, tw$1 = tw) {\n    let restore = tw$1.snapshot(), result = {\n        html: consume(html, tw$1),\n        css: stringify(tw$1.target)\n    };\n    return restore(), result;\n}\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} or {@link extract} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { consume, stringify, tw } from '@twind/core'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = tw.snapshot()\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // restore global classes\n *   restore()\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { consume, stringify } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = snapshot(tw.target)\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // restore global classes\n *   restore()\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance\n * @returns possibly modified HTML\n */ function consume(markup, tw$1 = tw) {\n    let result = '', lastChunkStart = 0;\n    return !function(markup, onClass) {\n        let mode = 1, startIndex = 0, quote = '', attributeName = '', commit = (currentIndex)=>{\n            5 == mode && 'class' == attributeName && false === onClass(startIndex, currentIndex, quote) && (markup = '');\n        };\n        for(let position = 0; position < markup.length; position++){\n            let char = markup[position];\n            if (1 == mode) '<' == char && (mode = '!--' == markup.substr(position + 1, 3) ? 4 : 3);\n            else if (4 == mode) '>' == char && '--' == markup.slice(position - 2, position) && (mode = 1);\n            else if (quote) {\n                if (char == quote && '\\\\' != markup[position - 1]) {\n                    commit(position);\n                    mode = 2;\n                    quote = '';\n                }\n            } else if ('\"' == char || \"'\" == char) {\n                quote = char;\n                startIndex += 1;\n            } else if ('>' == char) {\n                commit(position);\n                mode = 1;\n            } else if (mode) {\n                // MODE_SLASH\n                // Ignore everything until the tag ends\n                if ('=' == char) {\n                    attributeName = markup.slice(startIndex, position);\n                    mode = 5;\n                    startIndex = position + 1;\n                } else if ('/' == char && (mode < 5 || '>' == markup[position + 1])) {\n                    commit(position);\n                    mode = // For now we are using a simple parser adapted from htm (https://github.com/developit/htm/blob/master/src/build.mjs)\n                    // If we find any issues we can switch to something more sophisticated like\n                    // - https://github.com/acrazing/html5parser\n                    // - https://github.com/fb55/htmlparser2\n                    0;\n                } else if (/\\s/.test(char)) {\n                    // <a class=font-bold>\n                    commit(position);\n                    mode = 2;\n                    startIndex = position + 1;\n                }\n            }\n        }\n    }(markup, (startIndex, endIndex, quote)=>{\n        var quote1;\n        let value = markup.slice(startIndex, endIndex), className = tw$1(// const value = markup.slice(startIndex, endIndex)\n        // Lets handle some special react cases:\n        //   * arbitrary values for `content-`\n        //     <span class=\"before:content-[&#x27;asas&#x27;]\"></span>\n        //     <span class=\"before:content-[&quot;asas&quot;]\"></span>\n        //\n        //   * self-referenced groups\n        //     <span class=\"flex(&amp; col)\"></span>\n        //\n        //     If a class name contains `'`, `\"`, or `&` those will be replaced with HTML entities\n        //     To fix this we replace those for depending on the actual symbol that is being used\n        //     As an alternative we could always escape class names direcly in twind like react does\n        //     but this works for now\n        ('\"' == (quote1 = quote) ? // `'` -> &#39; &apos; &#x27;\n        value.replace(/(=|\\[)(?:&#39;|&apos;|&#x27;)|(?:&#39;|&apos;|&#x27;)(])/g, \"$1'$2\") : \"'\" == quote1 ? // `\"` -> &#34; &quot; &#x22;\n        value.replace(/(=|\\[)(?:&#34;|&quot;|&#x22;)|(?:&#34;|&quot;|&#x22;)(])/g, '$1\"$2') : value).replace(/(&#38;|&amp;|&#x26;)/g, '&'));\n        // We only need to shift things around if we need to actually change the markup\n        if (changed(value, className)) {\n            // We've hit another mutation boundary\n            // Add quote if necessary\n            quote = quote ? '' : '\"';\n            result += markup.slice(lastChunkStart, startIndex) + quote + className + quote;\n            lastChunkStart = endIndex;\n        }\n    }), // Combine the current result with the tail-end of the input\n    result + markup.slice(lastChunkStart, markup.length);\n}\n// Based on https://github.com/modulz/stitches\n// No support for thunks yet — these may use props that are not in the generated class name\n// and may therefore override each other\n/**\n * Allows to extract the supported properties of a style function.\n *\n * Here is an example for `react`\n * ```js\n * import { HTMLAttributes } from \"react\";\n * import { style, PropsOf } from \"@twind/core\";\n * const button = style({ ... })\n * type ButtonProps = PropsOf<typeof button>\n * export const Button = (props: ButtonProps & HTMLAttributes<HTMLButtonElement>) => {\n *   return <button className={style(props)} {...rest} />\n * }\n * ```\n */ /** initial breakpoint */ // TODO possible breakpoint from theme\n/** initial breakpoint */ // eslint-disable-next-line @typescript-eslint/ban-types\n/** Used as prefix */ /**\n   * CSS Class associated with the current component.\n   *\n   * ```jsx\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * <div className={button()} />\n   * ```\n   * <br />\n   */ /**\n   * To be used as resolve within config.rules:\n   *\n   * ```js\n   * {\n   *   rules: [\n   *     // label?prop=value&other=propValue\n   *     // if the style has base eg no prop is required\n   *     ['label(\\\\?.+)?', style( /* ... *\\/ )],\n   *\n   *     // if the style requires at least one prop\n   *     ['label\\\\?(.+)', style( /* ... *\\/ )],\n   *   ]\n   * }\n   * ```\n   *\n   * The first group is used to extract the props using {@link !URLSearchParams | URLSearchParams}.\n   */ /**\n   * CSS Class associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css`\n   *     color: \"DarkSlateGray\"\n   *   `\n   * })\n   *\n   * <div className={button.className} />\n   * ```\n   */ /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * const Card = styled({\n   *   base: css`\n   *     & ${button.selector} {\n   *       boxShadow: \"0 0 0 5px\"\n   *     }\n   *   `\n   * })\n   * ```\n   */ /**\n * @group Class Name Generators\n */ let style = (base, config)=>'function' == typeof base ? createStyle(config, base) : createStyle(base);\nfunction createStyle(config = {}, parent) {\n    let { label ='style' , base , props: variants = {} , defaults: localDefaults , when =[]  } = config, defaults = {\n        ...parent?.defaults,\n        ...localDefaults\n    }, id = hash(JSON.stringify([\n        label,\n        parent?.className,\n        base,\n        variants,\n        defaults,\n        when\n    ])), // Layers:\n    // component: 0b010\n    // props: 0b011\n    // when: 0b100\n    className = register('', base || '', Layer.c);\n    function register(mq, token, layer) {\n        return define(// `<name>#<id>` or `<parent>~<name>#<id>`\n        ((parent ? parent.className.replace(/#.+$/, '~') : '') + label + mq + id).replace(/[: ,()[\\]]/, ''), layer, token && parse(token));\n    }\n    return Object.defineProperties(function style(allProps) {\n        let isWithinRuleDeclaration, token;\n        if (Array.isArray(allProps)) {\n            isWithinRuleDeclaration = true;\n            allProps = Object.fromEntries(new URLSearchParams(allProps[1]).entries());\n        }\n        let props = {\n            ...defaults,\n            ...allProps\n        }, // If this style is used within config.rules we do NOT include the marker classes\n        classNames = isWithinRuleDeclaration ? '' : (parent ? parent(props) + ' ' : '') + className;\n        for(let variantKey in variants){\n            let variant = variants[variantKey], propsValue = props[variantKey];\n            if (propsValue === Object(propsValue)) {\n                // inline responsive breakpoints\n                let mq = '';\n                token = '';\n                for(let breakpoint in propsValue){\n                    let breakpointToken = variant[propsValue[breakpoint]];\n                    if (breakpointToken) {\n                        mq += '@' + breakpoint + '-' + propsValue[breakpoint];\n                        token += (token && ' ') + ('_' == breakpoint ? breakpointToken : breakpoint + ':(' + breakpointToken + ')');\n                    }\n                }\n                token && (classNames += ' ' + register('--' + variantKey + '-' + mq, token, 402653184));\n            } else (token = variant[propsValue]) && (classNames += ' ' + register('--' + variantKey + '-' + propsValue, token, 402653184));\n        }\n        return /* Shifts.layer */ when.forEach((match, index)=>{\n            let mq = '';\n            for(let variantKey in match[0]){\n                let propsValue = props[variantKey];\n                // TODO we ignore inline responsive breakpoints for now — what be the result??\n                if (propsValue !== Object(propsValue) && '' + propsValue == '' + match[0][variantKey]) mq += (mq && '_') + variantKey + '-' + propsValue;\n                else {\n                    mq = '';\n                    break;\n                }\n            }\n            mq && (token = match[1]) && (classNames += ' ' + register('-' + index + '--' + mq, token, 536870912));\n        }), /* Shifts.layer */ classNames;\n    }, Object.getOwnPropertyDescriptors({\n        className,\n        defaults,\n        selector: '.' + escape(className)\n    }));\n}\n/**\n * Combines {@link tw} and {@link cx}.\n *\n * Using the default `tw` instance:\n *\n * ```js\n * import { tw } from '@twind/core'\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n *\n * // using a custom twind instance\n * import { tw } from './custom/twind'\n * import { tw } from './custom/twind'\n * tx.bind(tw)\n * ```\n *\n * Using a custom `tw` instance:\n *\n * ```js\n * import { tx as tx$ } from '@twind/core'\n * import { tw } from './custom/twind'\n *\n * export const tx = tx$.bind(tw)\n *\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n * ```\n *\n * @group Style Injectors\n * @param this {@link Twind} instance to use (default: {@link tw})\n * @param strings\n * @param interpolations\n * @returns the class name\n */ let tx = function(strings, ...interpolations) {\n    return ('function' == typeof this ? this : tw)(interpolate(strings, interpolations));\n};\n\n//# sourceMappingURL=core.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/core/core.dev.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/_/colors-16fd59b8.js":
/*!*******************************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/_/colors-16fd59b8.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   amber: () => (/* binding */ amber),\n/* harmony export */   blue: () => (/* binding */ blue),\n/* harmony export */   colors: () => (/* binding */ colors),\n/* harmony export */   cyan: () => (/* binding */ cyan),\n/* harmony export */   emerald: () => (/* binding */ emerald),\n/* harmony export */   fuchsia: () => (/* binding */ fuchsia),\n/* harmony export */   gray: () => (/* binding */ gray),\n/* harmony export */   green: () => (/* binding */ green),\n/* harmony export */   indigo: () => (/* binding */ indigo),\n/* harmony export */   lime: () => (/* binding */ lime),\n/* harmony export */   neutral: () => (/* binding */ neutral),\n/* harmony export */   orange: () => (/* binding */ orange),\n/* harmony export */   pink: () => (/* binding */ pink),\n/* harmony export */   purple: () => (/* binding */ purple),\n/* harmony export */   red: () => (/* binding */ red),\n/* harmony export */   rose: () => (/* binding */ rose),\n/* harmony export */   sky: () => (/* binding */ sky),\n/* harmony export */   slate: () => (/* binding */ slate),\n/* harmony export */   stone: () => (/* binding */ stone),\n/* harmony export */   teal: () => (/* binding */ teal),\n/* harmony export */   violet: () => (/* binding */ violet),\n/* harmony export */   yellow: () => (/* binding */ yellow),\n/* harmony export */   zinc: () => (/* binding */ zinc)\n/* harmony export */ });\n// Source from https://github.com/tailwindlabs/tailwindcss/blob/master/src/public/colors.js\n/**\n * @module @twind/preset-tailwind/colors\n */ let slate = {\n    50: '#f8fafc',\n    100: '#f1f5f9',\n    200: '#e2e8f0',\n    300: '#cbd5e1',\n    400: '#94a3b8',\n    500: '#64748b',\n    600: '#475569',\n    700: '#334155',\n    800: '#1e293b',\n    900: '#0f172a'\n}, gray = {\n    50: '#f9fafb',\n    100: '#f3f4f6',\n    200: '#e5e7eb',\n    300: '#d1d5db',\n    400: '#9ca3af',\n    500: '#6b7280',\n    600: '#4b5563',\n    700: '#374151',\n    800: '#1f2937',\n    900: '#111827'\n}, zinc = {\n    50: '#fafafa',\n    100: '#f4f4f5',\n    200: '#e4e4e7',\n    300: '#d4d4d8',\n    400: '#a1a1aa',\n    500: '#71717a',\n    600: '#52525b',\n    700: '#3f3f46',\n    800: '#27272a',\n    900: '#18181b'\n}, neutral = {\n    50: '#fafafa',\n    100: '#f5f5f5',\n    200: '#e5e5e5',\n    300: '#d4d4d4',\n    400: '#a3a3a3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717'\n}, stone = {\n    50: '#fafaf9',\n    100: '#f5f5f4',\n    200: '#e7e5e4',\n    300: '#d6d3d1',\n    400: '#a8a29e',\n    500: '#78716c',\n    600: '#57534e',\n    700: '#44403c',\n    800: '#292524',\n    900: '#1c1917'\n}, red = {\n    50: '#fef2f2',\n    100: '#fee2e2',\n    200: '#fecaca',\n    300: '#fca5a5',\n    400: '#f87171',\n    500: '#ef4444',\n    600: '#dc2626',\n    700: '#b91c1c',\n    800: '#991b1b',\n    900: '#7f1d1d'\n}, orange = {\n    50: '#fff7ed',\n    100: '#ffedd5',\n    200: '#fed7aa',\n    300: '#fdba74',\n    400: '#fb923c',\n    500: '#f97316',\n    600: '#ea580c',\n    700: '#c2410c',\n    800: '#9a3412',\n    900: '#7c2d12'\n}, amber = {\n    50: '#fffbeb',\n    100: '#fef3c7',\n    200: '#fde68a',\n    300: '#fcd34d',\n    400: '#fbbf24',\n    500: '#f59e0b',\n    600: '#d97706',\n    700: '#b45309',\n    800: '#92400e',\n    900: '#78350f'\n}, yellow = {\n    50: '#fefce8',\n    100: '#fef9c3',\n    200: '#fef08a',\n    300: '#fde047',\n    400: '#facc15',\n    500: '#eab308',\n    600: '#ca8a04',\n    700: '#a16207',\n    800: '#854d0e',\n    900: '#713f12'\n}, lime = {\n    50: '#f7fee7',\n    100: '#ecfccb',\n    200: '#d9f99d',\n    300: '#bef264',\n    400: '#a3e635',\n    500: '#84cc16',\n    600: '#65a30d',\n    700: '#4d7c0f',\n    800: '#3f6212',\n    900: '#365314'\n}, green = {\n    50: '#f0fdf4',\n    100: '#dcfce7',\n    200: '#bbf7d0',\n    300: '#86efac',\n    400: '#4ade80',\n    500: '#22c55e',\n    600: '#16a34a',\n    700: '#15803d',\n    800: '#166534',\n    900: '#14532d'\n}, emerald = {\n    50: '#ecfdf5',\n    100: '#d1fae5',\n    200: '#a7f3d0',\n    300: '#6ee7b7',\n    400: '#34d399',\n    500: '#10b981',\n    600: '#059669',\n    700: '#047857',\n    800: '#065f46',\n    900: '#064e3b'\n}, teal = {\n    50: '#f0fdfa',\n    100: '#ccfbf1',\n    200: '#99f6e4',\n    300: '#5eead4',\n    400: '#2dd4bf',\n    500: '#14b8a6',\n    600: '#0d9488',\n    700: '#0f766e',\n    800: '#115e59',\n    900: '#134e4a'\n}, cyan = {\n    50: '#ecfeff',\n    100: '#cffafe',\n    200: '#a5f3fc',\n    300: '#67e8f9',\n    400: '#22d3ee',\n    500: '#06b6d4',\n    600: '#0891b2',\n    700: '#0e7490',\n    800: '#155e75',\n    900: '#164e63'\n}, sky = {\n    50: '#f0f9ff',\n    100: '#e0f2fe',\n    200: '#bae6fd',\n    300: '#7dd3fc',\n    400: '#38bdf8',\n    500: '#0ea5e9',\n    600: '#0284c7',\n    700: '#0369a1',\n    800: '#075985',\n    900: '#0c4a6e'\n}, blue = {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    200: '#bfdbfe',\n    300: '#93c5fd',\n    400: '#60a5fa',\n    500: '#3b82f6',\n    600: '#2563eb',\n    700: '#1d4ed8',\n    800: '#1e40af',\n    900: '#1e3a8a'\n}, indigo = {\n    50: '#eef2ff',\n    100: '#e0e7ff',\n    200: '#c7d2fe',\n    300: '#a5b4fc',\n    400: '#818cf8',\n    500: '#6366f1',\n    600: '#4f46e5',\n    700: '#4338ca',\n    800: '#3730a3',\n    900: '#312e81'\n}, violet = {\n    50: '#f5f3ff',\n    100: '#ede9fe',\n    200: '#ddd6fe',\n    300: '#c4b5fd',\n    400: '#a78bfa',\n    500: '#8b5cf6',\n    600: '#7c3aed',\n    700: '#6d28d9',\n    800: '#5b21b6',\n    900: '#4c1d95'\n}, purple = {\n    50: '#faf5ff',\n    100: '#f3e8ff',\n    200: '#e9d5ff',\n    300: '#d8b4fe',\n    400: '#c084fc',\n    500: '#a855f7',\n    600: '#9333ea',\n    700: '#7e22ce',\n    800: '#6b21a8',\n    900: '#581c87'\n}, fuchsia = {\n    50: '#fdf4ff',\n    100: '#fae8ff',\n    200: '#f5d0fe',\n    300: '#f0abfc',\n    400: '#e879f9',\n    500: '#d946ef',\n    600: '#c026d3',\n    700: '#a21caf',\n    800: '#86198f',\n    900: '#701a75'\n}, pink = {\n    50: '#fdf2f8',\n    100: '#fce7f3',\n    200: '#fbcfe8',\n    300: '#f9a8d4',\n    400: '#f472b6',\n    500: '#ec4899',\n    600: '#db2777',\n    700: '#be185d',\n    800: '#9d174d',\n    900: '#831843'\n}, rose = {\n    50: '#fff1f2',\n    100: '#ffe4e6',\n    200: '#fecdd3',\n    300: '#fda4af',\n    400: '#fb7185',\n    500: '#f43f5e',\n    600: '#e11d48',\n    700: '#be123c',\n    800: '#9f1239',\n    900: '#881337'\n}, // get lightBlue() {\n//   warn({ version: 'v2.2', from: 'lightBlue', to: 'sky' })\n//   return this.sky\n// }\n// get warmGray() {\n//   warn({ version: 'v3.0', from: 'warmGray', to: 'stone' })\n//   return this.stone\n// }\n// get trueGray() {\n//   warn({ version: 'v3.0', from: 'trueGray', to: 'neutral' })\n//   return this.neutral\n// }\n// get coolGray() {\n//   warn({ version: 'v3.0', from: 'coolGray', to: 'gray' })\n//   return this.gray\n// }\n// get blueGray() {\n//   warn({ version: 'v3.0', from: 'blueGray', to: 'slate' })\n//   return this.slate\n// }\ncolors = {\n    __proto__: null,\n    slate,\n    gray,\n    zinc,\n    neutral,\n    stone,\n    red,\n    orange,\n    amber,\n    yellow,\n    lime,\n    green,\n    emerald,\n    teal,\n    cyan,\n    sky,\n    blue,\n    indigo,\n    violet,\n    purple,\n    fuchsia,\n    pink,\n    rose\n};\n\n//# sourceMappingURL=colors-16fd59b8.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/_/colors-16fd59b8.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/base.dev.js":
/*!**********************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/base.dev.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ presetTailwindBase)\n/* harmony export */ });\n/* harmony import */ var _baseTheme_dev_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseTheme.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/baseTheme.js\");\n/* harmony import */ var _preflight_dev_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./preflight.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/preflight.dev.js\");\n/* harmony import */ var _rules_dev_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rules.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/rules.dev.js\");\n/* harmony import */ var _variants_dev_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./variants.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/variants.dev.js\");\n\n\n\n\n/** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */ /**\n * @experimental\n */ function presetTailwindBase({ colors , disablePreflight  } = {}) {\n    return {\n        // allow other preflight to run\n        preflight: disablePreflight ? void 0 : _preflight_dev_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        theme: {\n            ..._baseTheme_dev_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n            colors: {\n                inherit: 'inherit',\n                current: 'currentColor',\n                transparent: 'transparent',\n                black: '#000',\n                white: '#fff',\n                ...colors\n            }\n        },\n        variants: _variants_dev_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n        rules: _rules_dev_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        finalize (rule) {\n            return(// automatically add `content: ''` to before and after so you don’t have to specify it unless you want a different value\n            // ignore global, preflight, and auto added rules\n            rule.n && // only if there are declarations\n            rule.d && // and it has a ::before or ::after selector\n            rule.r.some((r)=>/^&::(before|after)$/.test(r)) && // there is no content property yet\n            !/(^|;)content:/.test(rule.d) ? {\n                ...rule,\n                d: 'content:var(--tw-content);' + rule.d\n            } : rule);\n        }\n    };\n}\n\n//# sourceMappingURL=base.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0d2luZC9wcmVzZXQtdGFpbHdpbmQvYmFzZS5kZXYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUM7QUFDSTtBQUNSO0FBQ007QUFDekM7QUFDQTtBQUNBLGtDQUFrQyw2QkFBNkIsSUFBSTtBQUNuRTtBQUNBO0FBQ0EsK0NBQStDLHlEQUFTO0FBQ3hEO0FBQ0EsZUFBZSx5REFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdCQUFnQjtBQUNoQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsOENBQThDO0FBQzlDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDeUM7QUFDekMiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0d2luZC9wcmVzZXQtdGFpbHdpbmQvYmFzZS5kZXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRoZW1lIGZyb20gJy4vYmFzZVRoZW1lLmRldi5qcyc7XG5pbXBvcnQgcHJlZmxpZ2h0IGZyb20gJy4vcHJlZmxpZ2h0LmRldi5qcyc7XG5pbXBvcnQgcnVsZXMgZnJvbSAnLi9ydWxlcy5kZXYuanMnO1xuaW1wb3J0IHZhcmlhbnRzIGZyb20gJy4vdmFyaWFudHMuZGV2LmpzJztcbi8qKiBBbGxvd3MgdG8gZGlzYWJsZSB0byB0YWlsd2luZCBwcmVmbGlnaHQgKGRlZmF1bHQ6IGBmYWxzZWAgZWcgaW5jbHVkZSB0aGUgdGFpbHdpbmQgcHJlZmxpZ2h0ICkgKi8gLyoqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi8gZnVuY3Rpb24gcHJlc2V0VGFpbHdpbmRCYXNlKHsgY29sb3JzICwgZGlzYWJsZVByZWZsaWdodCAgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gYWxsb3cgb3RoZXIgcHJlZmxpZ2h0IHRvIHJ1blxuICAgICAgICBwcmVmbGlnaHQ6IGRpc2FibGVQcmVmbGlnaHQgPyB2b2lkIDAgOiBwcmVmbGlnaHQsXG4gICAgICAgIHRoZW1lOiB7XG4gICAgICAgICAgICAuLi50aGVtZSxcbiAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgIGluaGVyaXQ6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBjdXJyZW50OiAnY3VycmVudENvbG9yJyxcbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICBibGFjazogJyMwMDAnLFxuICAgICAgICAgICAgICAgIHdoaXRlOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgLi4uY29sb3JzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZhcmlhbnRzLFxuICAgICAgICBydWxlcyxcbiAgICAgICAgZmluYWxpemUgKHJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybigvLyBhdXRvbWF0aWNhbGx5IGFkZCBgY29udGVudDogJydgIHRvIGJlZm9yZSBhbmQgYWZ0ZXIgc28geW91IGRvbuKAmXQgaGF2ZSB0byBzcGVjaWZ5IGl0IHVubGVzcyB5b3Ugd2FudCBhIGRpZmZlcmVudCB2YWx1ZVxuICAgICAgICAgICAgLy8gaWdub3JlIGdsb2JhbCwgcHJlZmxpZ2h0LCBhbmQgYXV0byBhZGRlZCBydWxlc1xuICAgICAgICAgICAgcnVsZS5uICYmIC8vIG9ubHkgaWYgdGhlcmUgYXJlIGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgcnVsZS5kICYmIC8vIGFuZCBpdCBoYXMgYSA6OmJlZm9yZSBvciA6OmFmdGVyIHNlbGVjdG9yXG4gICAgICAgICAgICBydWxlLnIuc29tZSgocik9Pi9eJjo6KGJlZm9yZXxhZnRlcikkLy50ZXN0KHIpKSAmJiAvLyB0aGVyZSBpcyBubyBjb250ZW50IHByb3BlcnR5IHlldFxuICAgICAgICAgICAgIS8oXnw7KWNvbnRlbnQ6Ly50ZXN0KHJ1bGUuZCkgPyB7XG4gICAgICAgICAgICAgICAgLi4ucnVsZSxcbiAgICAgICAgICAgICAgICBkOiAnY29udGVudDp2YXIoLS10dy1jb250ZW50KTsnICsgcnVsZS5kXG4gICAgICAgICAgICB9IDogcnVsZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0IHsgcHJlc2V0VGFpbHdpbmRCYXNlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuZGV2LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/base.dev.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/baseTheme.js":
/*!***********************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/baseTheme.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ theme)\n/* harmony export */ });\n/**\n * @module @twind/preset-tailwind/baseTheme\n */ /**\n * @experimental\n */ let theme = {\n    screens: {\n        sm: '640px',\n        md: '768px',\n        lg: '1024px',\n        xl: '1280px',\n        '2xl': '1536px'\n    },\n    columns: {\n        auto: 'auto',\n        // Handled by plugin,\n        // 1: '1',\n        // 2: '2',\n        // 3: '3',\n        // 4: '4',\n        // 5: '5',\n        // 6: '6',\n        // 7: '7',\n        // 8: '8',\n        // 9: '9',\n        // 10: '10',\n        // 11: '11',\n        // 12: '12',\n        '3xs': '16rem',\n        '2xs': '18rem',\n        xs: '20rem',\n        sm: '24rem',\n        md: '28rem',\n        lg: '32rem',\n        xl: '36rem',\n        '2xl': '42rem',\n        '3xl': '48rem',\n        '4xl': '56rem',\n        '5xl': '64rem',\n        '6xl': '72rem',\n        '7xl': '80rem'\n    },\n    spacing: {\n        px: '1px',\n        0: '0px',\n        .../* #__PURE__ */ linear(4, 'rem', 4, 0.5, 0.5),\n        // 0.5: '0.125rem',\n        // 1: '0.25rem',\n        // 1.5: '0.375rem',\n        // 2: '0.5rem',\n        // 2.5: '0.625rem',\n        // 3: '0.75rem',\n        // 3.5: '0.875rem',\n        // 4: '1rem',\n        .../* #__PURE__ */ linear(12, 'rem', 4, 5),\n        // 5: '1.25rem',\n        // 6: '1.5rem',\n        // 7: '1.75rem',\n        // 8: '2rem',\n        // 9: '2.25rem',\n        // 10: '2.5rem',\n        // 11: '2.75rem',\n        // 12: '3rem',\n        14: '3.5rem',\n        .../* #__PURE__ */ linear(64, 'rem', 4, 16, 4),\n        // 16: '4rem',\n        // 20: '5rem',\n        // 24: '6rem',\n        // 28: '7rem',\n        // 32: '8rem',\n        // 36: '9rem',\n        // 40: '10rem',\n        // 44: '11rem',\n        // 48: '12rem',\n        // 52: '13rem',\n        // 56: '14rem',\n        // 60: '15rem',\n        // 64: '16rem',\n        72: '18rem',\n        80: '20rem',\n        96: '24rem'\n    },\n    durations: {\n        75: '75ms',\n        100: '100ms',\n        150: '150ms',\n        200: '200ms',\n        300: '300ms',\n        500: '500ms',\n        700: '700ms',\n        1000: '1000ms'\n    },\n    animation: {\n        none: 'none',\n        spin: 'spin 1s linear infinite',\n        ping: 'ping 1s cubic-bezier(0,0,0.2,1) infinite',\n        pulse: 'pulse 2s cubic-bezier(0.4,0,0.6,1) infinite',\n        bounce: 'bounce 1s infinite'\n    },\n    aspectRatio: {\n        auto: 'auto',\n        square: '1/1',\n        video: '16/9'\n    },\n    backdropBlur: /* #__PURE__ */ alias('blur'),\n    backdropBrightness: /* #__PURE__ */ alias('brightness'),\n    backdropContrast: /* #__PURE__ */ alias('contrast'),\n    backdropGrayscale: /* #__PURE__ */ alias('grayscale'),\n    backdropHueRotate: /* #__PURE__ */ alias('hueRotate'),\n    backdropInvert: /* #__PURE__ */ alias('invert'),\n    backdropOpacity: /* #__PURE__ */ alias('opacity'),\n    backdropSaturate: /* #__PURE__ */ alias('saturate'),\n    backdropSepia: /* #__PURE__ */ alias('sepia'),\n    backgroundColor: /* #__PURE__ */ alias('colors'),\n    backgroundImage: {\n        none: 'none'\n    },\n    // These are built-in\n    // 'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',\n    // 'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',\n    // 'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',\n    // 'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',\n    // 'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',\n    // 'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',\n    // 'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',\n    // 'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',\n    backgroundOpacity: /* #__PURE__ */ alias('opacity'),\n    // backgroundPosition: {\n    //   // The following are already handled by the plugin:\n    //   // center, right, left, bottom, top\n    //   // 'bottom-10px-right-20px' -> bottom 10px right 20px\n    // },\n    backgroundSize: {\n        auto: 'auto',\n        cover: 'cover',\n        contain: 'contain'\n    },\n    blur: {\n        none: 'none',\n        0: '0',\n        sm: '4px',\n        DEFAULT: '8px',\n        md: '12px',\n        lg: '16px',\n        xl: '24px',\n        '2xl': '40px',\n        '3xl': '64px'\n    },\n    brightness: {\n        .../* #__PURE__ */ linear(200, '', 100, 0, 50),\n        // 0: '0',\n        // 50: '.5',\n        // 150: '1.5',\n        // 200: '2',\n        .../* #__PURE__ */ linear(110, '', 100, 90, 5),\n        // 90: '.9',\n        // 95: '.95',\n        // 100: '1',\n        // 105: '1.05',\n        // 110: '1.1',\n        75: '0.75',\n        125: '1.25'\n    },\n    borderColor: ({ theme  })=>({\n            DEFAULT: theme('colors.gray.200', 'currentColor'),\n            ...theme('colors')\n        }),\n    borderOpacity: /* #__PURE__ */ alias('opacity'),\n    borderRadius: {\n        none: '0px',\n        sm: '0.125rem',\n        DEFAULT: '0.25rem',\n        md: '0.375rem',\n        lg: '0.5rem',\n        xl: '0.75rem',\n        '2xl': '1rem',\n        '3xl': '1.5rem',\n        '1/2': '50%',\n        full: '9999px'\n    },\n    borderSpacing: /* #__PURE__ */ alias('spacing'),\n    borderWidth: {\n        DEFAULT: '1px',\n        .../* #__PURE__ */ exponential(8, 'px')\n    },\n    // 0: '0px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n    boxShadow: {\n        sm: '0 1px 2px 0 rgba(0,0,0,0.05)',\n        DEFAULT: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)',\n        md: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n        lg: '0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)',\n        xl: '0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.1)',\n        '2xl': '0 25px 50px -12px rgba(0,0,0,0.25)',\n        inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.05)',\n        none: '0 0 #0000'\n    },\n    boxShadowColor: alias('colors'),\n    // container: {},\n    // cursor: {\n    //   // Default values are handled by plugin\n    // },\n    caretColor: /* #__PURE__ */ alias('colors'),\n    accentColor: ({ theme  })=>({\n            auto: 'auto',\n            ...theme('colors')\n        }),\n    contrast: {\n        .../* #__PURE__ */ linear(200, '', 100, 0, 50),\n        // 0: '0',\n        // 50: '.5',\n        // 150: '1.5',\n        // 200: '2',\n        75: '0.75',\n        125: '1.25'\n    },\n    content: {\n        none: 'none'\n    },\n    divideColor: /* #__PURE__ */ alias('borderColor'),\n    divideOpacity: /* #__PURE__ */ alias('borderOpacity'),\n    divideWidth: /* #__PURE__ */ alias('borderWidth'),\n    dropShadow: {\n        sm: '0 1px 1px rgba(0,0,0,0.05)',\n        DEFAULT: [\n            '0 1px 2px rgba(0,0,0,0.1)',\n            '0 1px 1px rgba(0,0,0,0.06)'\n        ],\n        md: [\n            '0 4px 3px rgba(0,0,0,0.07)',\n            '0 2px 2px rgba(0,0,0,0.06)'\n        ],\n        lg: [\n            '0 10px 8px rgba(0,0,0,0.04)',\n            '0 4px 3px rgba(0,0,0,0.1)'\n        ],\n        xl: [\n            '0 20px 13px rgba(0,0,0,0.03)',\n            '0 8px 5px rgba(0,0,0,0.08)'\n        ],\n        '2xl': '0 25px 25px rgba(0,0,0,0.15)',\n        none: '0 0 #0000'\n    },\n    fill: ({ theme  })=>({\n            ...theme('colors'),\n            none: 'none'\n        }),\n    grayscale: {\n        DEFAULT: '100%',\n        0: '0'\n    },\n    hueRotate: {\n        0: '0deg',\n        15: '15deg',\n        30: '30deg',\n        60: '60deg',\n        90: '90deg',\n        180: '180deg'\n    },\n    invert: {\n        DEFAULT: '100%',\n        0: '0'\n    },\n    flex: {\n        1: '1 1 0%',\n        auto: '1 1 auto',\n        initial: '0 1 auto',\n        none: 'none'\n    },\n    flexBasis: ({ theme  })=>({\n            ...theme('spacing'),\n            ...ratios(2, 6),\n            // '1/2': '50%',\n            // '1/3': '33.333333%',\n            // '2/3': '66.666667%',\n            // '1/4': '25%',\n            // '2/4': '50%',\n            // '3/4': '75%',\n            // '1/5': '20%',\n            // '2/5': '40%',\n            // '3/5': '60%',\n            // '4/5': '80%',\n            // '1/6': '16.666667%',\n            // '2/6': '33.333333%',\n            // '3/6': '50%',\n            // '4/6': '66.666667%',\n            // '5/6': '83.333333%',\n            ...ratios(12, 12),\n            // '1/12': '8.333333%',\n            // '2/12': '16.666667%',\n            // '3/12': '25%',\n            // '4/12': '33.333333%',\n            // '5/12': '41.666667%',\n            // '6/12': '50%',\n            // '7/12': '58.333333%',\n            // '8/12': '66.666667%',\n            // '9/12': '75%',\n            // '10/12': '83.333333%',\n            // '11/12': '91.666667%',\n            auto: 'auto',\n            full: '100%'\n        }),\n    flexGrow: {\n        DEFAULT: 1,\n        0: 0\n    },\n    flexShrink: {\n        DEFAULT: 1,\n        0: 0\n    },\n    fontFamily: {\n        sans: 'ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\"'.split(','),\n        serif: 'ui-serif,Georgia,Cambria,\"Times New Roman\",Times,serif'.split(','),\n        mono: 'ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace'.split(',')\n    },\n    fontSize: {\n        xs: [\n            '0.75rem',\n            '1rem'\n        ],\n        sm: [\n            '0.875rem',\n            '1.25rem'\n        ],\n        base: [\n            '1rem',\n            '1.5rem'\n        ],\n        lg: [\n            '1.125rem',\n            '1.75rem'\n        ],\n        xl: [\n            '1.25rem',\n            '1.75rem'\n        ],\n        '2xl': [\n            '1.5rem',\n            '2rem'\n        ],\n        '3xl': [\n            '1.875rem',\n            '2.25rem'\n        ],\n        '4xl': [\n            '2.25rem',\n            '2.5rem'\n        ],\n        '5xl': [\n            '3rem',\n            '1'\n        ],\n        '6xl': [\n            '3.75rem',\n            '1'\n        ],\n        '7xl': [\n            '4.5rem',\n            '1'\n        ],\n        '8xl': [\n            '6rem',\n            '1'\n        ],\n        '9xl': [\n            '8rem',\n            '1'\n        ]\n    },\n    fontWeight: {\n        thin: '100',\n        extralight: '200',\n        light: '300',\n        normal: '400',\n        medium: '500',\n        semibold: '600',\n        bold: '700',\n        extrabold: '800',\n        black: '900'\n    },\n    gap: /* #__PURE__ */ alias('spacing'),\n    gradientColorStops: /* #__PURE__ */ alias('colors'),\n    gridAutoColumns: {\n        auto: 'auto',\n        min: 'min-content',\n        max: 'max-content',\n        fr: 'minmax(0,1fr)'\n    },\n    gridAutoRows: {\n        auto: 'auto',\n        min: 'min-content',\n        max: 'max-content',\n        fr: 'minmax(0,1fr)'\n    },\n    gridColumn: {\n        // span-X is handled by the plugin: span-1 -> span 1 / span 1\n        auto: 'auto',\n        'span-full': '1 / -1'\n    },\n    // gridColumnEnd: {\n    //   // Defaults handled by plugin\n    // },\n    // gridColumnStart: {\n    //   // Defaults handled by plugin\n    // },\n    gridRow: {\n        // span-X is handled by the plugin: span-1 -> span 1 / span 1\n        auto: 'auto',\n        'span-full': '1 / -1'\n    },\n    // gridRowStart: {\n    //   // Defaults handled by plugin\n    // },\n    // gridRowEnd: {\n    //   // Defaults handled by plugin\n    // },\n    gridTemplateColumns: {\n        // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))\n        none: 'none'\n    },\n    gridTemplateRows: {\n        // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))\n        none: 'none'\n    },\n    height: ({ theme  })=>({\n            ...theme('spacing'),\n            ...ratios(2, 6),\n            // '1/2': '50%',\n            // '1/3': '33.333333%',\n            // '2/3': '66.666667%',\n            // '1/4': '25%',\n            // '2/4': '50%',\n            // '3/4': '75%',\n            // '1/5': '20%',\n            // '2/5': '40%',\n            // '3/5': '60%',\n            // '4/5': '80%',\n            // '1/6': '16.666667%',\n            // '2/6': '33.333333%',\n            // '3/6': '50%',\n            // '4/6': '66.666667%',\n            // '5/6': '83.333333%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content',\n            auto: 'auto',\n            full: '100%',\n            screen: '100vh'\n        }),\n    inset: ({ theme  })=>({\n            ...theme('spacing'),\n            ...ratios(2, 4),\n            // '1/2': '50%',\n            // '1/3': '33.333333%',\n            // '2/3': '66.666667%',\n            // '1/4': '25%',\n            // '2/4': '50%',\n            // '3/4': '75%',\n            auto: 'auto',\n            full: '100%'\n        }),\n    keyframes: {\n        spin: {\n            from: {\n                transform: 'rotate(0deg)'\n            },\n            to: {\n                transform: 'rotate(360deg)'\n            }\n        },\n        ping: {\n            '0%': {\n                transform: 'scale(1)',\n                opacity: '1'\n            },\n            '75%,100%': {\n                transform: 'scale(2)',\n                opacity: '0'\n            }\n        },\n        pulse: {\n            '0%,100%': {\n                opacity: '1'\n            },\n            '50%': {\n                opacity: '.5'\n            }\n        },\n        bounce: {\n            '0%, 100%': {\n                transform: 'translateY(-25%)',\n                animationTimingFunction: 'cubic-bezier(0.8,0,1,1)'\n            },\n            '50%': {\n                transform: 'none',\n                animationTimingFunction: 'cubic-bezier(0,0,0.2,1)'\n            }\n        }\n    },\n    letterSpacing: {\n        tighter: '-0.05em',\n        tight: '-0.025em',\n        normal: '0em',\n        wide: '0.025em',\n        wider: '0.05em',\n        widest: '0.1em'\n    },\n    lineHeight: {\n        .../* #__PURE__ */ linear(10, 'rem', 4, 3),\n        // 3: '.75rem',\n        // 4: '1rem',\n        // 5: '1.25rem',\n        // 6: '1.5rem',\n        // 7: '1.75rem',\n        // 8: '2rem',\n        // 9: '2.25rem',\n        // 10: '2.5rem',\n        none: '1',\n        tight: '1.25',\n        snug: '1.375',\n        normal: '1.5',\n        relaxed: '1.625',\n        loose: '2'\n    },\n    // listStyleType: {\n    //   // Defaults handled by plugin\n    // },\n    margin: ({ theme  })=>({\n            auto: 'auto',\n            ...theme('spacing')\n        }),\n    maxHeight: ({ theme  })=>({\n            full: '100%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content',\n            screen: '100vh',\n            ...theme('spacing')\n        }),\n    maxWidth: ({ theme , breakpoints  })=>({\n            ...breakpoints(theme('screens')),\n            none: 'none',\n            0: '0rem',\n            xs: '20rem',\n            sm: '24rem',\n            md: '28rem',\n            lg: '32rem',\n            xl: '36rem',\n            '2xl': '42rem',\n            '3xl': '48rem',\n            '4xl': '56rem',\n            '5xl': '64rem',\n            '6xl': '72rem',\n            '7xl': '80rem',\n            full: '100%',\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content',\n            prose: '65ch'\n        }),\n    minHeight: {\n        0: '0px',\n        full: '100%',\n        min: 'min-content',\n        max: 'max-content',\n        fit: 'fit-content',\n        screen: '100vh'\n    },\n    minWidth: {\n        0: '0px',\n        full: '100%',\n        min: 'min-content',\n        max: 'max-content',\n        fit: 'fit-content'\n    },\n    // objectPosition: {\n    //   // The plugins joins all arguments by default\n    // },\n    opacity: {\n        .../* #__PURE__ */ linear(100, '', 100, 0, 10),\n        // 0: '0',\n        // 10: '0.1',\n        // 20: '0.2',\n        // 30: '0.3',\n        // 40: '0.4',\n        // 60: '0.6',\n        // 70: '0.7',\n        // 80: '0.8',\n        // 90: '0.9',\n        // 100: '1',\n        5: '0.05',\n        25: '0.25',\n        75: '0.75',\n        95: '0.95'\n    },\n    order: {\n        // Handled by plugin\n        // 1: '1',\n        // 2: '2',\n        // 3: '3',\n        // 4: '4',\n        // 5: '5',\n        // 6: '6',\n        // 7: '7',\n        // 8: '8',\n        // 9: '9',\n        // 10: '10',\n        // 11: '11',\n        // 12: '12',\n        first: '-9999',\n        last: '9999',\n        none: '0'\n    },\n    padding: /* #__PURE__ */ alias('spacing'),\n    placeholderColor: /* #__PURE__ */ alias('colors'),\n    placeholderOpacity: /* #__PURE__ */ alias('opacity'),\n    outlineColor: /* #__PURE__ */ alias('colors'),\n    outlineOffset: /* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',,\n    outlineWidth: /* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',,\n    ringColor: ({ theme  })=>({\n            ...theme('colors'),\n            DEFAULT: '#3b82f6'\n        }),\n    ringOffsetColor: /* #__PURE__ */ alias('colors'),\n    ringOffsetWidth: /* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',,\n    ringOpacity: ({ theme  })=>({\n            ...theme('opacity'),\n            DEFAULT: '0.5'\n        }),\n    ringWidth: {\n        DEFAULT: '3px',\n        .../* #__PURE__ */ exponential(8, 'px')\n    },\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n    rotate: {\n        .../* #__PURE__ */ exponential(2, 'deg'),\n        // 0: '0deg',\n        // 1: '1deg',\n        // 2: '2deg',\n        .../* #__PURE__ */ exponential(12, 'deg', 3),\n        // 3: '3deg',\n        // 6: '6deg',\n        // 12: '12deg',\n        .../* #__PURE__ */ exponential(180, 'deg', 45)\n    },\n    // 45: '45deg',\n    // 90: '90deg',\n    // 180: '180deg',\n    saturate: /* #__PURE__ */ linear(200, '', 100, 0, 50),\n    // 0: '0',\n    // 50: '.5',\n    // 100: '1',\n    // 150: '1.5',\n    // 200: '2',\n    scale: {\n        .../* #__PURE__ */ linear(150, '', 100, 0, 50),\n        // 0: '0',\n        // 50: '.5',\n        // 150: '1.5',\n        .../* #__PURE__ */ linear(110, '', 100, 90, 5),\n        // 90: '.9',\n        // 95: '.95',\n        // 100: '1',\n        // 105: '1.05',\n        // 110: '1.1',\n        75: '0.75',\n        125: '1.25'\n    },\n    scrollMargin: /* #__PURE__ */ alias('spacing'),\n    scrollPadding: /* #__PURE__ */ alias('spacing'),\n    sepia: {\n        0: '0',\n        DEFAULT: '100%'\n    },\n    skew: {\n        .../* #__PURE__ */ exponential(2, 'deg'),\n        // 0: '0deg',\n        // 1: '1deg',\n        // 2: '2deg',\n        .../* #__PURE__ */ exponential(12, 'deg', 3)\n    },\n    // 3: '3deg',\n    // 6: '6deg',\n    // 12: '12deg',\n    space: /* #__PURE__ */ alias('spacing'),\n    stroke: ({ theme  })=>({\n            ...theme('colors'),\n            none: 'none'\n        }),\n    strokeWidth: /* #__PURE__ */ linear(2),\n    // 0: '0',\n    // 1: '1',\n    // 2: '2',,\n    textColor: /* #__PURE__ */ alias('colors'),\n    textDecorationColor: /* #__PURE__ */ alias('colors'),\n    textDecorationThickness: {\n        'from-font': 'from-font',\n        auto: 'auto',\n        .../* #__PURE__ */ exponential(8, 'px')\n    },\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n    textUnderlineOffset: {\n        auto: 'auto',\n        .../* #__PURE__ */ exponential(8, 'px')\n    },\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n    textIndent: /* #__PURE__ */ alias('spacing'),\n    textOpacity: /* #__PURE__ */ alias('opacity'),\n    // transformOrigin: {\n    //   // The following are already handled by the plugin:\n    //   // center, right, left, bottom, top\n    //   // 'bottom-10px-right-20px' -> bottom 10px right 20px\n    // },\n    transitionDuration: ({ theme  })=>({\n            ...theme('durations'),\n            DEFAULT: '150ms'\n        }),\n    transitionDelay: /* #__PURE__ */ alias('durations'),\n    transitionProperty: {\n        none: 'none',\n        all: 'all',\n        DEFAULT: 'color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter',\n        colors: 'color,background-color,border-color,text-decoration-color,fill,stroke',\n        opacity: 'opacity',\n        shadow: 'box-shadow',\n        transform: 'transform'\n    },\n    transitionTimingFunction: {\n        DEFAULT: 'cubic-bezier(0.4,0,0.2,1)',\n        linear: 'linear',\n        in: 'cubic-bezier(0.4,0,1,1)',\n        out: 'cubic-bezier(0,0,0.2,1)',\n        'in-out': 'cubic-bezier(0.4,0,0.2,1)'\n    },\n    translate: ({ theme  })=>({\n            ...theme('spacing'),\n            ...ratios(2, 4),\n            // '1/2': '50%',\n            // '1/3': '33.333333%',\n            // '2/3': '66.666667%',\n            // '1/4': '25%',\n            // '2/4': '50%',\n            // '3/4': '75%',\n            full: '100%'\n        }),\n    width: ({ theme  })=>({\n            min: 'min-content',\n            max: 'max-content',\n            fit: 'fit-content',\n            screen: '100vw',\n            ...theme('flexBasis')\n        }),\n    willChange: {\n        scroll: 'scroll-position'\n    },\n    // other options handled by rules\n    // auto: 'auto',\n    // contents: 'contents',\n    // transform: 'transform',\n    zIndex: {\n        .../* #__PURE__ */ linear(50, '', 1, 0, 10),\n        // 0: '0',\n        // 10: '10',\n        // 20: '20',\n        // 30: '30',\n        // 40: '40',\n        // 50: '50',\n        auto: 'auto'\n    }\n};\n// '1/2': '50%',\n// '1/3': '33.333333%',\n// '2/3': '66.666667%',\n// '1/4': '25%',\n// '2/4': '50%',\n// '3/4': '75%',\n// '1/5': '20%',\n// '2/5': '40%',\n// '3/5': '60%',\n// '4/5': '80%',\n// '1/6': '16.666667%',\n// '2/6': '33.333333%',\n// '3/6': '50%',\n// '4/6': '66.666667%',\n// '5/6': '83.333333%',\nfunction ratios(start, end) {\n    let result = {};\n    do // XXX: using var to avoid strange bug when generating cjs where `= 1` is removed\n    // eslint-disable-next-line no-var\n    for(var dividend = 1; dividend < start; dividend++)result[`${dividend}/${start}`] = Number((dividend / start * 100).toFixed(6)) + '%';\n    while (++start <= end)\n    return result;\n}\n// 0: '0px',\n// 2: '2px',\n// 4: '4px',\n// 8: '8px',\nfunction exponential(stop, unit, start = 0) {\n    let result = {};\n    for(; start <= stop; start = 2 * start || 1)result[start] = start + unit;\n    return result;\n}\n// 3: '.75rem',\n// 4: '1rem',\n// 5: '1.25rem',\n// 6: '1.5rem',\n// 7: '1.75rem',\n// 8: '2rem',\n// 9: '2.25rem',\n// 10: '2.5rem',\nfunction linear(stop, unit = '', divideBy = 1, start = 0, step = 1, result = {}) // eslint-disable-next-line max-params\n{\n    for(; start <= stop; start += step)result[start] = start / divideBy + unit;\n    return result;\n}\nfunction alias(section) {\n    return ({ theme  })=>theme(section);\n}\n\n//# sourceMappingURL=baseTheme.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/baseTheme.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/preflight.dev.js":
/*!***************************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/preflight.dev.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ preflight)\n/* harmony export */ });\n/* harmony import */ var _baseTheme_dev_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseTheme.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/baseTheme.js\");\n\nlet preflight = {\n    /*\n    1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n    2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n    */ '*,::before,::after': {\n        boxSizing: 'border-box',\n        /* 1 */ borderWidth: '0',\n        /* 2 */ borderStyle: 'solid',\n        /* 2 */ borderColor: 'theme(borderColor.DEFAULT, currentColor)'\n    },\n    /* 2 */ '::before,::after': {\n        '--tw-content': \"''\"\n    },\n    /*\n    1. Use a consistent sensible line-height in all browsers.\n    2. Prevent adjustments of font size after orientation changes in iOS.\n    3. Use a more readable tab size.\n    4. Use the user's configured `sans` font-family by default.\n    5. Use the user's configured `sans` font-feature-settings by default.\n    */ html: {\n        lineHeight: 1.5,\n        /* 1 */ WebkitTextSizeAdjust: '100%',\n        /* 2 */ MozTabSize: '4',\n        /* 3 */ tabSize: 4,\n        /* 3 */ fontFamily: `theme(fontFamily.sans, ${_baseTheme_dev_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fontFamily.sans})`,\n        /* 4 */ fontFeatureSettings: 'theme(fontFamily.sans[1].fontFeatureSettings, normal)'\n    },\n    /* 5 */ /*\n    1. Remove the margin in all browsers.\n    2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n    */ body: {\n        margin: '0',\n        /* 1 */ lineHeight: 'inherit'\n    },\n    /* 2 */ /*\n    1. Add the correct height in Firefox.\n    2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n    3. Ensure horizontal rules are visible by default.\n    */ hr: {\n        height: '0',\n        /* 1 */ color: 'inherit',\n        /* 2 */ borderTopWidth: '1px'\n    },\n    /* 3 */ /*\n    Add the correct text decoration in Chrome, Edge, and Safari.\n    */ 'abbr:where([title])': {\n        textDecoration: 'underline dotted'\n    },\n    /*\n    Remove the default font size and weight for headings.\n    */ 'h1,h2,h3,h4,h5,h6': {\n        fontSize: 'inherit',\n        fontWeight: 'inherit'\n    },\n    /*\n    Reset links to optimize for opt-in styling instead of opt-out.\n    */ a: {\n        color: 'inherit',\n        textDecoration: 'inherit'\n    },\n    /*\n    Add the correct font weight in Edge and Safari.\n    */ 'b,strong': {\n        fontWeight: 'bolder'\n    },\n    /*\n    1. Use the user's configured `mono` font family by default.\n    2. Use the user's configured `mono` font-feature-settings by default.\n    3. Correct the odd `em` font sizing in all browsers.\n    */ 'code,kbd,samp,pre': {\n        fontFamily: `theme(fontFamily.mono, ${_baseTheme_dev_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fontFamily.mono})`,\n        fontFeatureSettings: 'theme(fontFamily.mono[1].fontFeatureSettings, normal)',\n        fontSize: '1em'\n    },\n    /*\n    Add the correct font size in all browsers.\n    */ small: {\n        fontSize: '80%'\n    },\n    /*\n    Prevent `sub` and `sup` elements from affecting the line height in all browsers.\n    */ 'sub,sup': {\n        fontSize: '75%',\n        lineHeight: 0,\n        position: 'relative',\n        verticalAlign: 'baseline'\n    },\n    sub: {\n        bottom: '-0.25em'\n    },\n    sup: {\n        top: '-0.5em'\n    },\n    /*\n    1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n    2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n    3. Remove gaps between table borders by default.\n    */ table: {\n        textIndent: '0',\n        /* 1 */ borderColor: 'inherit',\n        /* 2 */ borderCollapse: 'collapse'\n    },\n    /* 3 */ /*\n    1. Change the font styles in all browsers.\n    2. Remove the margin in Firefox and Safari.\n    3. Remove default padding in all browsers.\n    */ 'button,input,optgroup,select,textarea': {\n        fontFamily: 'inherit',\n        /* 1 */ fontSize: '100%',\n        /* 1 */ lineHeight: 'inherit',\n        /* 1 */ color: 'inherit',\n        /* 1 */ margin: '0',\n        /* 2 */ padding: '0'\n    },\n    /* 3 */ /*\n    Remove the inheritance of text transform in Edge and Firefox.\n    */ 'button,select': {\n        textTransform: 'none'\n    },\n    /*\n    1. Correct the inability to style clickable types in iOS and Safari.\n    2. Remove default button styles.\n    */ \"button,[type='button'],[type='reset'],[type='submit']\": {\n        WebkitAppearance: 'button',\n        /* 1 */ backgroundColor: 'transparent',\n        /* 2 */ backgroundImage: 'none'\n    },\n    /* 4 */ /*\n    Use the modern Firefox focus style for all focusable elements.\n    */ ':-moz-focusring': {\n        outline: 'auto'\n    },\n    /*\n    Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n    */ ':-moz-ui-invalid': {\n        boxShadow: 'none'\n    },\n    /*\n    Add the correct vertical alignment in Chrome and Firefox.\n    */ progress: {\n        verticalAlign: 'baseline'\n    },\n    /*\n    Correct the cursor style of increment and decrement buttons in Safari.\n    */ '::-webkit-inner-spin-button,::-webkit-outer-spin-button': {\n        height: 'auto'\n    },\n    /*\n    1. Correct the odd appearance in Chrome and Safari.\n    2. Correct the outline style in Safari.\n    */ \"[type='search']\": {\n        WebkitAppearance: 'textfield',\n        /* 1 */ outlineOffset: '-2px'\n    },\n    /* 2 */ /*\n    Remove the inner padding in Chrome and Safari on macOS.\n    */ '::-webkit-search-decoration': {\n        WebkitAppearance: 'none'\n    },\n    /*\n    1. Correct the inability to style clickable types in iOS and Safari.\n    2. Change font properties to `inherit` in Safari.\n    */ '::-webkit-file-upload-button': {\n        WebkitAppearance: 'button',\n        /* 1 */ font: 'inherit'\n    },\n    /* 2 */ /*\n    Add the correct display in Chrome and Safari.\n    */ summary: {\n        display: 'list-item'\n    },\n    /*\n    Removes the default spacing and border for appropriate elements.\n    */ 'blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre': {\n        margin: '0'\n    },\n    fieldset: {\n        margin: '0',\n        padding: '0'\n    },\n    legend: {\n        padding: '0'\n    },\n    'ol,ul,menu': {\n        listStyle: 'none',\n        margin: '0',\n        padding: '0'\n    },\n    /*\n    Prevent resizing textareas horizontally by default.\n    */ textarea: {\n        resize: 'vertical'\n    },\n    /*\n    1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n    2. Set the default placeholder color to the user's configured gray 400 color.\n    */ 'input::placeholder,textarea::placeholder': {\n        opacity: 1,\n        /* 1 */ color: 'theme(colors.gray.400, #9ca3af)'\n    },\n    /* 2 */ /*\n    Set the default cursor for buttons.\n    */ 'button,[role=\"button\"]': {\n        cursor: 'pointer'\n    },\n    /*\n    Make sure disabled buttons don't get the pointer cursor.\n    */ ':disabled': {\n        cursor: 'default'\n    },\n    /*\n    1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n    2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n      This can trigger a poorly considered lint error in some tools but is included by design.\n    */ 'img,svg,video,canvas,audio,iframe,embed,object': {\n        display: 'block',\n        /* 1 */ verticalAlign: 'middle'\n    },\n    /* 2 */ /*\n    Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n    */ 'img,video': {\n        maxWidth: '100%',\n        height: 'auto'\n    },\n    /* Make elements with the HTML hidden attribute stay hidden by default */ '[hidden]': {\n        display: 'none'\n    }\n};\n\n//# sourceMappingURL=preflight.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/preflight.dev.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/preset-tailwind.dev.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/preset-tailwind.dev.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ presetTailwind)\n/* harmony export */ });\n/* harmony import */ var _base_dev_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.dev.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/base.dev.js\");\n/* harmony import */ var _colors_16fd59b8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_/colors-16fd59b8.js */ \"(ssr)/../node_modules/@twind/preset-tailwind/_/colors-16fd59b8.js\");\n\n\n/** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */ function presetTailwind({ disablePreflight  } = {}) {\n    return (0,_base_dev_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        colors: _colors_16fd59b8_js__WEBPACK_IMPORTED_MODULE_1__.colors,\n        disablePreflight\n    });\n}\n\n//# sourceMappingURL=preset-tailwind.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0d2luZC9wcmVzZXQtdGFpbHdpbmQvcHJlc2V0LXRhaWx3aW5kLmRldi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0M7QUFDQztBQUNoRCwrSEFBK0gsb0JBQW9CLElBQUk7QUFDdkosV0FBVyx3REFBa0I7QUFDN0IsY0FBYztBQUNkO0FBQ0EsS0FBSztBQUNMO0FBQ3FDO0FBQ3JDIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHdpbmQvcHJlc2V0LXRhaWx3aW5kL3ByZXNldC10YWlsd2luZC5kZXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByZXNldFRhaWx3aW5kQmFzZSBmcm9tICcuL2Jhc2UuZGV2LmpzJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJy4vXy9jb2xvcnMtMTZmZDU5YjguanMnO1xuLyoqIEFsbG93cyB0byBkaXNhYmxlIHRvIHRhaWx3aW5kIHByZWZsaWdodCAoZGVmYXVsdDogYGZhbHNlYCBlZyBpbmNsdWRlIHRoZSB0YWlsd2luZCBwcmVmbGlnaHQgKSAqLyBmdW5jdGlvbiBwcmVzZXRUYWlsd2luZCh7IGRpc2FibGVQcmVmbGlnaHQgIH0gPSB7fSkge1xuICAgIHJldHVybiBwcmVzZXRUYWlsd2luZEJhc2Uoe1xuICAgICAgICBjb2xvcnMsXG4gICAgICAgIGRpc2FibGVQcmVmbGlnaHRcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHByZXNldFRhaWx3aW5kIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZXNldC10YWlsd2luZC5kZXYuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/preset-tailwind.dev.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/rules.dev.js":
/*!***********************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/rules.dev.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rules)\n/* harmony export */ });\n/* harmony import */ var _twind_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @twind/core */ \"(ssr)/../node_modules/@twind/core/core.dev.js\");\nvar // indirection wrapper to remove autocomplete functions from production bundles\nrule, rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15, rule16, rule17;\n\nlet rules = [\n    /* arbitrary properties: [paint-order:markers] */ (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('\\\\[([-\\\\w]+):(.+)]', ({ 1: $1 , 2: $2  }, context)=>({\n            '@layer overrides': {\n                '&': {\n                    [$1]: (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.arbitrary)(`[${$2}]`, '', context)\n                }\n            }\n        })),\n    (rule = /* Styling based on parent and peer state */ (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(group|peer)([~/][^-[]+)?', ({ input  }, { h  })=>[\n            {\n                c: h(input)\n            }\n        ]), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule, ()=>[\n            'group',\n            'peer'\n        ])),\n    /* LAYOUT */ (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('aspect-', 'aspectRatio'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('container', (_, { theme  })=>{\n        let { screens =theme('screens') , center , padding  } = theme('container'), rules = {\n            width: '100%',\n            marginRight: center && 'auto',\n            marginLeft: center && 'auto',\n            ...paddingFor('xs')\n        };\n        for(let screen in screens){\n            let value = screens[screen];\n            'string' == typeof value && (rules[(0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.mql)(value)] = {\n                '&': {\n                    maxWidth: value,\n                    ...paddingFor(screen)\n                }\n            });\n        }\n        return rules;\n        function paddingFor(screen) {\n            let value = padding && ('string' == typeof padding ? padding : padding[screen] || padding.DEFAULT);\n            if (value) return {\n                paddingRight: value,\n                paddingLeft: value\n            };\n        }\n    }),\n    // Content\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('content-', 'content', ({ _  })=>({\n            '--tw-content': _,\n            content: 'var(--tw-content)'\n        })),\n    // Box Decoration Break\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(?:box-)?decoration-(slice|clone)', 'boxDecorationBreak'),\n    // Box Sizing\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('box-(border|content)', 'boxSizing', ({ 1: $1  })=>$1 + '-box'),\n    // Display\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('hidden', {\n        display: 'none'\n    }),\n    // Table Layout\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('table-(auto|fixed)', 'tableLayout'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)([\n        '(block|flex|table|grid|inline|contents|flow-root|list-item)',\n        '(inline-(block|flex|table|grid))',\n        '(table-(caption|cell|column|row|(column|row|footer|header)-group))'\n    ], 'display'),\n    // Floats\n    '(float)-(left|right|none)',\n    // Clear\n    '(clear)-(left|right|none|both)',\n    // Overflow\n    '(overflow(?:-[xy])?)-(auto|hidden|clip|visible|scroll)',\n    // Isolation\n    '(isolation)-(auto)',\n    // Isolation\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('isolate', 'isolation'),\n    // Object Fit\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('object-(contain|cover|fill|none|scale-down)', 'objectFit'),\n    // Object Position\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('object-', 'objectPosition'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('object-(top|bottom|center|(left|right)(-(top|bottom))?)', 'objectPosition', spacify),\n    // Overscroll Behavior\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('overscroll(-[xy])?-(auto|contain|none)', ({ 1: $1 = '' , 2: $2  })=>({\n            ['overscroll-behavior' + $1]: $2\n        })),\n    // Position\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(static|fixed|absolute|relative|sticky)', 'position'),\n    // Top / Right / Bottom / Left\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?inset(-[xy])?(?:$|-)', 'inset', ({ 1: $1 , _  })=>({\n            top: '-x' != $1 && _,\n            right: '-y' != $1 && _,\n            bottom: '-x' != $1 && _,\n            left: '-y' != $1 && _\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(top|bottom|left|right)(?:$|-)', 'inset'),\n    // Visibility\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(visible|collapse)', 'visibility'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('invisible', {\n        visibility: 'hidden'\n    }),\n    // Z-Index\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?z-', 'zIndex'),\n    /* FLEXBOX */ // Flex Direction\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('flex-((row|col)(-reverse)?)', 'flexDirection', columnify),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('flex-(wrap|wrap-reverse|nowrap)', 'flexWrap'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(flex-(?:grow|shrink))(?:$|-)'),\n    /*, 'flex-grow' | flex-shrink */ (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(flex)-'),\n    /*, 'flex' */ (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('grow(?:$|-)', 'flexGrow'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('shrink(?:$|-)', 'flexShrink'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('basis-', 'flexBasis'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(order)-'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/*, 'order' */ '-?(order)-(\\\\d+)', ()=>range({\n            end: 12\n        })),\n    /* GRID */ // Grid Template Columns\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('grid-cols-', 'gridTemplateColumns'),\n    (rule1 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('grid-cols-(\\\\d+)', 'gridTemplateColumns', gridTemplate), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule1, ()=>range({\n            end: 6\n        }))),\n    // Grid Column Start / End\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('col-', 'gridColumn'),\n    (rule2 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('col-(span)-(\\\\d+)', 'gridColumn', span), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule2, ()=>range({\n            end: 12\n        }))),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('col-start-', 'gridColumnStart'),\n    (rule3 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('col-start-(auto|\\\\d+)', 'gridColumnStart'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule3, ({ 1: $1  })=>'auto' === $1 ? [\n            ''\n        ] : range({\n            end: 13\n        }))),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('col-end-', 'gridColumnEnd'),\n    (rule4 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('col-end-(auto|\\\\d+)', 'gridColumnEnd'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule4, ({ 1: $1  })=>'auto' === $1 ? [\n            ''\n        ] : range({\n            end: 13\n        }))),\n    // Grid Template Rows\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('grid-rows-', 'gridTemplateRows'),\n    (rule5 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('grid-rows-(\\\\d+)', 'gridTemplateRows', gridTemplate), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule5, ()=>range({\n            end: 6\n        }))),\n    // Grid Row Start / End\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('row-', 'gridRow'),\n    (rule6 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('row-(span)-(\\\\d+)', 'gridRow', span), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule6, ()=>range({\n            end: 6\n        }))),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('row-start-', 'gridRowStart'),\n    (rule7 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('row-start-(auto|\\\\d+)', 'gridRowStart'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule7, ({ 1: $1  })=>'auto' === $1 ? [\n            ''\n        ] : range({\n            end: 7\n        }))),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('row-end-', 'gridRowEnd'),\n    (rule8 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('row-end-(auto|\\\\d+)', 'gridRowEnd'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule8, ({ 1: $1  })=>'auto' === $1 ? [\n            ''\n        ] : range({\n            end: 7\n        }))),\n    // Grid Auto Flow\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('grid-flow-((row|col)(-dense)?)', 'gridAutoFlow', (match)=>spacify(columnify(match))),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('grid-flow-(dense)', 'gridAutoFlow'),\n    // Grid Auto Columns\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('auto-cols-', 'gridAutoColumns'),\n    // Grid Auto Rows\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('auto-rows-', 'gridAutoRows'),\n    // Gap\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('gap-x(?:$|-)', 'gap', 'columnGap'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('gap-y(?:$|-)', 'gap', 'rowGap'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('gap(?:$|-)', 'gap'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/* BOX ALIGNMENT */ // Justify Items\n    // Justify Self\n    '(justify-(?:items|self))-', ({ 1: $1  })=>$1.endsWith('-items-') ? [\n            'start',\n            'end',\n            'center',\n            'stretch'\n        ] : /* '-self-' */ [\n            'auto',\n            'start',\n            'end',\n            'center',\n            'stretch'\n        ]),\n    (rule9 = // Justify Content\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('justify-', 'justifyContent', convertContentValue), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule9, ()=>[\n            'start',\n            'end',\n            'center',\n            'between',\n            'around',\n            'evenly'\n        ])),\n    (rule10 = // Align Content\n    // Align Items\n    // Align Self\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(content|items|self)-', (match)=>({\n            ['align-' + match[1]]: convertContentValue(match)\n        })), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule10, ({ 1: $1  })=>'content' == $1 ? [\n            'center',\n            'start',\n            'end',\n            'between',\n            'around',\n            'evenly',\n            'stretch',\n            'baseline'\n        ] : 'items' == $1 ? [\n            'start',\n            'end',\n            'center',\n            'stretch',\n            'baseline'\n        ] : /* $1 == 'self' */ [\n            'auto',\n            'start',\n            'end',\n            'center',\n            'stretch',\n            'baseline'\n        ])),\n    (rule11 = // Place Content\n    // Place Items\n    // Place Self\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(place-(content|items|self))-', ({ 1: $1 , $$  })=>({\n            [$1]: ('wun'.includes($$[3]) ? 'space-' : '') + $$\n        })), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule11, ({ 2: $2  })=>'content' == $2 ? [\n            'center',\n            'start',\n            'end',\n            'between',\n            'around',\n            'evenly',\n            'stretch',\n            'baseline'\n        ] : 'items' == $2 ? [\n            'start',\n            'end',\n            'center',\n            'stretch',\n            'baseline'\n        ] : /* $2 == 'self' */ [\n            'auto',\n            'start',\n            'end',\n            'center',\n            'stretch',\n            'baseline'\n        ])),\n    /* SPACING */ // Padding\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('p([xytrbl])?(?:$|-)', 'padding', edge('padding')),\n    // Margin\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?m([xytrbl])?(?:$|-)', 'margin', edge('margin')),\n    // Space Between\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?space-(x|y)(?:$|-)', 'space', ({ 1: $1 , _  })=>({\n            '&>:not([hidden])~:not([hidden])': {\n                [`--tw-space-${$1}-reverse`]: '0',\n                ['margin-' + ({\n                    y: 'top',\n                    x: 'left'\n                })[$1]]: `calc(${_} * calc(1 - var(--tw-space-${$1}-reverse)))`,\n                ['margin-' + ({\n                    y: 'bottom',\n                    x: 'right'\n                })[$1]]: `calc(${_} * var(--tw-space-${$1}-reverse))`\n            }\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('space-(x|y)-reverse', ({ 1: $1  })=>({\n            '&>:not([hidden])~:not([hidden])': {\n                [`--tw-space-${$1}-reverse`]: '1'\n            }\n        })),\n    /* SIZING */ // Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('w-', 'width'),\n    // Min-Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('min-w-', 'minWidth'),\n    // Max-Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('max-w-', 'maxWidth'),\n    // Height\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('h-', 'height'),\n    // Min-Height\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('min-h-', 'minHeight'),\n    // Max-Height\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('max-h-', 'maxHeight'),\n    /* TYPOGRAPHY */ // Font Weight\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('font-', 'fontWeight'),\n    // Font Family\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('font-', 'fontFamily', ({ _  })=>{\n        return 'string' == typeof (_ = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.asArray)(_))[1] ? {\n            fontFamily: join(_)\n        } : {\n            fontFamily: join(_[0]),\n            ..._[1]\n        };\n    }),\n    // Font Smoothing\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('antialiased', {\n        WebkitFontSmoothing: 'antialiased',\n        MozOsxFontSmoothing: 'grayscale'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('subpixel-antialiased', {\n        WebkitFontSmoothing: 'auto',\n        MozOsxFontSmoothing: 'auto'\n    }),\n    // Font Style\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('italic', 'fontStyle'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('not-italic', {\n        fontStyle: 'normal'\n    }),\n    // Font Variant Numeric\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(ordinal|slashed-zero|(normal|lining|oldstyle|proportional|tabular)-nums|(diagonal|stacked)-fractions)', ({ 1: $1 , 2: $2 = '' , 3: $3  })=>// normal-nums\n        'normal' == $2 ? {\n            fontVariantNumeric: 'normal'\n        } : {\n            ['--tw-' + ($3 ? // diagonal-fractions, stacked-fractions\n            'numeric-fraction' : 'pt'.includes($2[0]) ? // proportional-nums, tabular-nums\n            'numeric-spacing' : $2 ? // lining-nums, oldstyle-nums\n            'numeric-figure' : // ordinal, slashed-zero\n            $1)]: $1,\n            fontVariantNumeric: 'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)',\n            ...asDefaults({\n                '--tw-ordinal': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-slashed-zero': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-numeric-figure': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-numeric-spacing': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-numeric-fraction': 'var(--tw-empty,/*!*/ /*!*/)'\n            })\n        }),\n    // Letter Spacing\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('tracking-', 'letterSpacing'),\n    // Line Height\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('leading-', 'lineHeight'),\n    // List Style Position\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('list-(inside|outside)', 'listStylePosition'),\n    // List Style Type\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('list-', 'listStyleType'),\n    (rule12 = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('list-', 'listStyleType'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule12, ()=>[\n            'none',\n            'disc',\n            'decimal'\n        ])),\n    // Placeholder Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('placeholder-opacity-', 'placeholderOpacity', ({ _  })=>({\n            '&::placeholder': {\n                '--tw-placeholder-opacity': _\n            }\n        })),\n    // Placeholder Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('placeholder-', {\n        property: 'color',\n        selector: '&::placeholder'\n    }),\n    // Text Alignment\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('text-(left|center|right|justify|start|end)', 'textAlign'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('text-(ellipsis|clip)', 'textOverflow'),\n    // Text Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('text-opacity-', 'textOpacity', '--tw-text-opacity'),\n    // Text Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('text-', {\n        property: 'color'\n    }),\n    // Font Size\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('text-', 'fontSize', ({ _  })=>'string' == typeof _ ? {\n            fontSize: _\n        } : {\n            fontSize: _[0],\n            ...'string' == typeof _[1] ? {\n                lineHeight: _[1]\n            } : _[1]\n        }),\n    // Text Indent\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('indent-', 'textIndent'),\n    // Text Decoration\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(overline|underline|line-through)', 'textDecorationLine'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('no-underline', {\n        textDecorationLine: 'none'\n    }),\n    // Text Underline offset\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('underline-offset-', 'textUnderlineOffset'),\n    // Text Decoration Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('decoration-', {\n        section: 'textDecorationColor',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    // Text Decoration Thickness\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('decoration-', 'textDecorationThickness'),\n    (rule13 = // Text Decoration Style\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('decoration-', 'textDecorationStyle'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule13, ()=>[\n            'solid',\n            'double',\n            'dotted',\n            'dashed',\n            'wavy'\n        ])),\n    // Text Transform\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('(uppercase|lowercase|capitalize)', 'textTransform'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('normal-case', {\n        textTransform: 'none'\n    }),\n    // Text Overflow\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('truncate', {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis'\n    }),\n    (rule14 = // Vertical Alignment\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('align-', 'verticalAlign'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule14, ()=>[\n            'baseline',\n            'top',\n            'middle',\n            'bottom',\n            'text-top',\n            'text-bottom',\n            'sub',\n            'super'\n        ])),\n    (rule15 = // Whitespace\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('whitespace-', 'whiteSpace'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule15, ()=>[\n            'normal',\n            'nowrap',\n            'pre',\n            'pre-line',\n            'pre-wrap'\n        ])),\n    // Word Break\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('break-normal', {\n        wordBreak: 'normal',\n        overflowWrap: 'normal'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('break-words', {\n        overflowWrap: 'break-word'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('break-all', {\n        wordBreak: 'break-all'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('break-keep', {\n        wordBreak: 'keep-all'\n    }),\n    // Caret Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('caret-', {\n        // section: 'caretColor',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    // Accent Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('accent-', {\n        // section: 'accentColor',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    // Gradient Color Stops\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-gradient-to-([trbl]|[tb][rl])', 'backgroundImage', ({ 1: $1  })=>`linear-gradient(to ${position($1, ' ')},var(--tw-gradient-stops))`),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('from-', {\n        section: 'gradientColorStops',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }, ({ _  })=>({\n            '--tw-gradient-from': _.value,\n            '--tw-gradient-to': _.color({\n                opacityValue: '0'\n            }),\n            '--tw-gradient-stops': \"var(--tw-gradient-from),var(--tw-gradient-to)\"\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('via-', {\n        section: 'gradientColorStops',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }, ({ _  })=>({\n            '--tw-gradient-to': _.color({\n                opacityValue: '0'\n            }),\n            '--tw-gradient-stops': `var(--tw-gradient-from),${_.value},var(--tw-gradient-to)`\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('to-', {\n        section: 'gradientColorStops',\n        property: '--tw-gradient-to',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    /* BACKGROUNDS */ // Background Attachment\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-(fixed|local|scroll)', 'backgroundAttachment'),\n    // Background Origin\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-origin-(border|padding|content)', 'backgroundOrigin', ({ 1: $1  })=>$1 + '-box'),\n    // Background Repeat\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)([\n        'bg-(no-repeat|repeat(-[xy])?)',\n        'bg-repeat-(round|space)'\n    ], 'backgroundRepeat'),\n    (rule16 = // Background Blend Mode\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-blend-', 'backgroundBlendMode'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule16, ()=>[\n            'normal',\n            'multiply',\n            'screen',\n            'overlay',\n            'darken',\n            'lighten',\n            'color-dodge',\n            'color-burn',\n            'hard-light',\n            'soft-light',\n            'difference',\n            'exclusion',\n            'hue',\n            'saturation',\n            'color',\n            'luminosity'\n        ])),\n    // Background Clip\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-clip-(border|padding|content|text)', 'backgroundClip', ({ 1: $1  })=>$1 + ('text' == $1 ? '' : '-box')),\n    // Background Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('bg-opacity-', 'backgroundOpacity', '--tw-bg-opacity'),\n    // Background Color\n    // bg-${backgroundColor}/${backgroundOpacity}\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('bg-', {\n        section: 'backgroundColor'\n    }),\n    // Background Image\n    // supported arbitrary types are: length, color, angle, list\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('bg-', 'backgroundImage'),\n    // Background Position\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('bg-', 'backgroundPosition'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('bg-(top|bottom|center|(left|right)(-(top|bottom))?)', 'backgroundPosition', spacify),\n    // Background Size\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('bg-', 'backgroundSize'),\n    /* BORDERS */ // Border Radius\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('rounded(?:$|-)', 'borderRadius'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('rounded-([trbl]|[tb][rl])(?:$|-)', 'borderRadius', ({ 1: $1 , _  })=>{\n        let corners = {\n            t: [\n                'tl',\n                'tr'\n            ],\n            r: [\n                'tr',\n                'br'\n            ],\n            b: [\n                'bl',\n                'br'\n            ],\n            l: [\n                'bl',\n                'tl'\n            ]\n        }[$1] || [\n            $1,\n            $1\n        ];\n        return {\n            [`border-${position(corners[0])}-radius`]: _,\n            [`border-${position(corners[1])}-radius`]: _\n        };\n    }),\n    // Border Collapse\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('border-(collapse|separate)', 'borderCollapse'),\n    // Border Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('border-opacity(?:$|-)', 'borderOpacity', '--tw-border-opacity'),\n    // Border Style\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('border-(solid|dashed|dotted|double|none)', 'borderStyle'),\n    // Border Spacing\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('border-spacing(-[xy])?(?:$|-)', 'borderSpacing', ({ 1: $1 , _  })=>({\n            ...asDefaults({\n                '--tw-border-spacing-x': '0',\n                '--tw-border-spacing-y': '0'\n            }),\n            ['--tw-border-spacing' + ($1 || '-x')]: _,\n            ['--tw-border-spacing' + ($1 || '-y')]: _,\n            'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'\n        })),\n    // Border Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('border-([xytrbl])-', {\n        section: 'borderColor'\n    }, edge('border', 'Color')),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('border-'),\n    // Border Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('border-([xytrbl])(?:$|-)', 'borderWidth', edge('border', 'Width')),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('border(?:$|-)', 'borderWidth'),\n    // Divide Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('divide-opacity(?:$|-)', 'divideOpacity', ({ _  })=>({\n            '&>:not([hidden])~:not([hidden])': {\n                '--tw-divide-opacity': _\n            }\n        })),\n    // Divide Style\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('divide-(solid|dashed|dotted|double|none)', ({ 1: $1  })=>({\n            '&>:not([hidden])~:not([hidden])': {\n                borderStyle: $1\n            }\n        })),\n    // Divide Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('divide-([xy]-reverse)', ({ 1: $1  })=>({\n            '&>:not([hidden])~:not([hidden])': {\n                ['--tw-divide-' + $1]: '1'\n            }\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('divide-([xy])(?:$|-)', 'divideWidth', ({ 1: $1 , _  })=>{\n        let edges = {\n            x: 'lr',\n            y: 'tb'\n        }[$1];\n        return {\n            '&>:not([hidden])~:not([hidden])': {\n                [`--tw-divide-${$1}-reverse`]: '0',\n                [`border-${position(edges[0])}Width`]: `calc(${_} * calc(1 - var(--tw-divide-${$1}-reverse)))`,\n                [`border-${position(edges[1])}Width`]: `calc(${_} * var(--tw-divide-${$1}-reverse))`\n            }\n        };\n    }),\n    // Divide Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('divide-', {\n        // section: $0.replace('-', 'Color') -> 'divideColor'\n        property: 'borderColor',\n        // opacityVariable: '--tw-border-opacity',\n        // opacitySection: section.replace('Color', 'Opacity') -> 'divideOpacity'\n        selector: '&>:not([hidden])~:not([hidden])'\n    }),\n    // Ring Offset Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('ring-opacity(?:$|-)', 'ringOpacity', '--tw-ring-opacity'),\n    // Ring Offset Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('ring-offset-', {\n        // section: 'ringOffsetColor',\n        property: '--tw-ring-offset-color',\n        opacityVariable: false\n    }),\n    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOffsetOpacity'\n    // Ring Offset Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('ring-offset(?:$|-)', 'ringOffsetWidth', '--tw-ring-offset-width'),\n    // Ring Inset\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('ring-inset', {\n        '--tw-ring-inset': 'inset'\n    }),\n    // Ring Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('ring-', {\n        // section: 'ringColor',\n        property: '--tw-ring-color'\n    }),\n    // opacityVariable: '--tw-ring-opacity',\n    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOpacity'\n    // Ring Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('ring(?:$|-)', 'ringWidth', ({ _  }, { theme  })=>({\n            ...asDefaults({\n                '--tw-ring-offset-shadow': '0 0 #0000',\n                '--tw-ring-shadow': '0 0 #0000',\n                '--tw-shadow': '0 0 #0000',\n                '--tw-shadow-colored': '0 0 #0000',\n                // Within own declaration to have the defaults above to be merged with defaults from shadow\n                '&': {\n                    '--tw-ring-inset': 'var(--tw-empty,/*!*/ /*!*/)',\n                    '--tw-ring-offset-width': theme('ringOffsetWidth', '', '0px'),\n                    '--tw-ring-offset-color': (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.toColorValue)(theme('ringOffsetColor', '', '#fff')),\n                    '--tw-ring-color': (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.toColorValue)(theme('ringColor', '', '#93c5fd'), {\n                        opacityVariable: '--tw-ring-opacity'\n                    }),\n                    '--tw-ring-opacity': theme('ringOpacity', '', '0.5')\n                }\n            }),\n            '--tw-ring-offset-shadow': \"var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)\",\n            '--tw-ring-shadow': `var(--tw-ring-inset) 0 0 0 calc(${_} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,\n            boxShadow: \"var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)\"\n        })),\n    /* EFFECTS */ // Box Shadow Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('shadow-', {\n        section: 'boxShadowColor',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }, ({ _  })=>({\n            '--tw-shadow-color': _.value,\n            '--tw-shadow': 'var(--tw-shadow-colored)'\n        })),\n    // Box Shadow\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('shadow(?:$|-)', 'boxShadow', ({ _  })=>({\n            ...asDefaults({\n                '--tw-ring-offset-shadow': '0 0 #0000',\n                '--tw-ring-shadow': '0 0 #0000',\n                '--tw-shadow': '0 0 #0000',\n                '--tw-shadow-colored': '0 0 #0000'\n            }),\n            '--tw-shadow': join(_),\n            // replace all colors with reference to --tw-shadow-colored\n            // this matches colors after non-comma char (keyword, offset) before comma or the end\n            '--tw-shadow-colored': join(_).replace(/([^,]\\s+)(?:#[a-f\\d]+|(?:(?:hsl|rgb)a?|hwb|lab|lch|color|var)\\(.+?\\)|[a-z]+)(,|$)/g, '$1var(--tw-shadow-color)$2'),\n            boxShadow: \"var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)\"\n        })),\n    // Opacity\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(opacity)-'),\n    (rule17 = /*, 'opacity' */ // Mix Blend Mode\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('mix-blend-', 'mixBlendMode'), (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(rule17, ()=>[\n            'normal',\n            'multiply',\n            'screen',\n            'overlay',\n            'darken',\n            'lighten',\n            'color-dodge',\n            'color-burn',\n            'hard-light',\n            'soft-light',\n            'difference',\n            'exclusion',\n            'hue',\n            'saturation',\n            'color',\n            'luminosity'\n        ])),\n    /* FILTERS */ ...filter(),\n    ...filter('backdrop-'),\n    /* TRANSITIONS AND ANIMATION */ // Transition Property\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('transition(?:$|-)', 'transitionProperty', (match, { theme  })=>({\n            transitionProperty: join(match),\n            transitionTimingFunction: 'none' == match._ ? void 0 : join(theme('transitionTimingFunction', '')),\n            transitionDuration: 'none' == match._ ? void 0 : join(theme('transitionDuration', ''))\n        })),\n    // Transition Duration\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('duration(?:$|-)', 'transitionDuration', 'transitionDuration', join),\n    // Transition Timing Function\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('ease(?:$|-)', 'transitionTimingFunction', 'transitionTimingFunction', join),\n    // Transition Delay\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('delay(?:$|-)', 'transitionDelay', 'transitionDelay', join),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('animate(?:$|-)', 'animation', (match, { theme , h , e  })=>{\n        let animation = join(match), // Try to auto inject keyframes\n        parts = animation.split(' '), keyframeValues = theme('keyframes', parts[0]);\n        return keyframeValues ? {\n            ['@keyframes ' + (parts[0] = e(h(parts[0])))]: keyframeValues,\n            animation: parts.join(' ')\n        } : {\n            animation\n        };\n    }),\n    /* TRANSFORMS */ // Transform\n    '(transform)-(none)',\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('transform', tranformDefaults),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('transform-(cpu|gpu)', ({ 1: $1  })=>({\n            '--tw-transform': transformValue('gpu' == $1)\n        })),\n    // Scale\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('scale(-[xy])?-', 'scale', ({ 1: $1 , _  })=>({\n            ['--tw-scale' + ($1 || '-x')]: _,\n            ['--tw-scale' + ($1 || '-y')]: _,\n            ...tranformDefaults()\n        })),\n    // Rotate\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(rotate)-', 'rotate', transform),\n    // Translate\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(translate-[xy])-', 'translate', transform),\n    // Skew\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(skew-[xy])-', 'skew', transform),\n    // Transform Origin\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('origin-(center|((top|bottom)(-(left|right))?)|left|right)', 'transformOrigin', spacify),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/* INTERACTIVITY */ // Appearance\n    '(appearance)-', ()=>[\n            'auto',\n            'none'\n        ]),\n    // Columns\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(columns)-'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/*, 'columns' */ '(columns)-(\\\\d+)', ()=>range({\n            end: 12\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(// Break Before, After and Inside\n    '(break-(?:before|after|inside))-', ({ 1: $1  })=>$1.endsWith('-inside-') ? [\n            'auto',\n            'avoid',\n            'avoid-page',\n            'avoid-column'\n        ] : /* before || after */ [\n            'auto',\n            'avoid',\n            'all',\n            'avoid-page',\n            'page',\n            'left',\n            'right',\n            'column'\n        ]),\n    // Cursor\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(cursor)-'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/*, 'cursor' */ '(cursor)-', ()=>[\n            'alias',\n            'all-scroll',\n            'auto',\n            'cell',\n            'col-resize',\n            'context-menu',\n            'copy',\n            'crosshair',\n            'default',\n            'e-resize',\n            'ew-resize',\n            'grab',\n            'grabbing',\n            'help',\n            'move',\n            'n-resize',\n            'ne-resize',\n            'nesw-resize',\n            'no-drop',\n            'none',\n            'not-allowed',\n            'ns-resize',\n            'nw-resize',\n            'nwse-resize',\n            'pointer',\n            'progress',\n            'row-resize',\n            's-resize',\n            'se-resize',\n            'sw-resize',\n            'text',\n            'vertical-text',\n            'w-resize',\n            'wait',\n            'zoom-in',\n            'zoom-out'\n        ]),\n    // Scroll Snap Type\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('snap-(none)', 'scroll-snap-type'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('snap-(x|y|both)', ({ 1: $1  })=>({\n            ...asDefaults({\n                '--tw-scroll-snap-strictness': 'proximity'\n            }),\n            'scroll-snap-type': $1 + ' var(--tw-scroll-snap-strictness)'\n        })),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('snap-(mandatory|proximity)', '--tw-scroll-snap-strictness'),\n    // Scroll Snap Align\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('snap-(?:(start|end|center)|align-(none))', 'scroll-snap-align'),\n    // Scroll Snap Stop\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('snap-(normal|always)', 'scroll-snap-stop'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('scroll-(auto|smooth)', 'scroll-behavior'),\n    // Scroll Margin\n    // Padding\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('scroll-p([xytrbl])?(?:$|-)', 'padding', edge('scroll-padding')),\n    // Margin\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?scroll-m([xytrbl])?(?:$|-)', 'scroll-margin', edge('scroll-margin')),\n    // Touch Action\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('touch-(auto|none|manipulation)', 'touch-action'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('touch-(pinch-zoom|pan-(?:(x|left|right)|(y|up|down)))', ({ 1: $1 , 2: $2 , 3: $3  })=>({\n            ...asDefaults({\n                '--tw-pan-x': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-pan-y': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-pinch-zoom': 'var(--tw-empty,/*!*/ /*!*/)',\n                '--tw-touch-action': 'var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)'\n            }),\n            // x, left, right -> pan-x\n            // y, up, down -> pan-y\n            // -> pinch-zoom\n            [`--tw-${$2 ? 'pan-x' : $3 ? 'pan-y' : $1}`]: $1,\n            'touch-action': 'var(--tw-touch-action)'\n        })),\n    // Outline Style\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('outline-none', {\n        outline: '2px solid transparent',\n        'outline-offset': '2px'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('outline', {\n        outlineStyle: 'solid'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('outline-(dashed|dotted|double)', 'outlineStyle'),\n    // Outline Offset\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('-?(outline-offset)-'),\n    /*, 'outlineOffset'*/ // Outline Color\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('outline-', {\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    // Outline Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('outline-', 'outlineWidth'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(// Pointer Events\n    '(pointer-events)-', ()=>[\n            'auto',\n            'none'\n        ]),\n    // Will Change\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('(will-change)-'),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(/*, 'willChange' */ '(will-change)-', ()=>[\n            'auto',\n            'contents',\n            'transform'\n        ]),\n    // Resize\n    [\n        'resize(?:-(none|x|y))?',\n        'resize',\n        ({ 1: $1  })=>({\n                x: 'horizontal',\n                y: 'vertical'\n            })[$1] || $1 || 'both'\n    ],\n    // User Select\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('select-(none|text|all|auto)', 'userSelect'),\n    /* SVG */ // Fill, Stroke\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('fill-', {\n        section: 'fill',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchColor)('stroke-', {\n        section: 'stroke',\n        opacityVariable: false,\n        opacitySection: 'opacity'\n    }),\n    // Stroke Width\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)('stroke-', 'strokeWidth'),\n    /* ACCESSIBILITY */ // Screen Readers\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('sr-only', {\n        position: 'absolute',\n        width: '1px',\n        height: '1px',\n        padding: '0',\n        margin: '-1px',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        clip: 'rect(0,0,0,0)',\n        borderWidth: '0'\n    }),\n    (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)('not-sr-only', {\n        position: 'static',\n        width: 'auto',\n        height: 'auto',\n        padding: '0',\n        margin: '0',\n        overflow: 'visible',\n        whiteSpace: 'normal',\n        clip: 'auto'\n    })\n];\nfunction spacify(value) {\n    return ('string' == typeof value ? value : value[1]).replace(/-/g, ' ').trim();\n}\nfunction columnify(value) {\n    return ('string' == typeof value ? value : value[1]).replace('col', 'column');\n}\nfunction position(shorthand, separator = '-') {\n    let longhand = [];\n    for (let short of shorthand)longhand.push({\n        t: 'top',\n        r: 'right',\n        b: 'bottom',\n        l: 'left'\n    }[short]);\n    return longhand.join(separator);\n}\nfunction join(value) {\n    return value && '' + (value._ || value);\n}\nfunction convertContentValue({ $$  }) {\n    return (({\n        // /* aut*/ o: '',\n        /* sta*/ r: /*t*/ 'flex-',\n        /* end*/ '': 'flex-',\n        // /* cen*/ t /*er*/: '',\n        /* bet*/ w: /*een*/ 'space-',\n        /* aro*/ u: /*nd*/ 'space-',\n        /* eve*/ n: /*ly*/ 'space-'\n    })[$$[3] || ''] || '') + $$;\n}\nfunction edge(propertyPrefix, propertySuffix = '') {\n    return ({ 1: $1 , _  })=>{\n        let edges = {\n            x: 'lr',\n            y: 'tb'\n        }[$1] || $1 + $1;\n        return edges ? {\n            ...(0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.toCSS)(propertyPrefix + '-' + position(edges[0]) + propertySuffix, _),\n            ...(0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.toCSS)(propertyPrefix + '-' + position(edges[1]) + propertySuffix, _)\n        } : (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.toCSS)(propertyPrefix + propertySuffix, _);\n    };\n}\nfunction filter(prefix = '') {\n    let filters = [\n        'blur',\n        'brightness',\n        'contrast',\n        'grayscale',\n        'hue-rotate',\n        'invert',\n        prefix && 'opacity',\n        'saturate',\n        'sepia',\n        !prefix && 'drop-shadow'\n    ].filter(Boolean), defaults = {};\n    // first create properties defaults\n    for (let key of filters)defaults[`--tw-${prefix}${key}`] = 'var(--tw-empty,/*!*/ /*!*/)';\n    return defaults = {\n        // move defaults\n        ...asDefaults(defaults),\n        // add default filter which allows standalone usage\n        [`${prefix}filter`]: filters.map((key)=>`var(--tw-${prefix}${key})`).join(' ')\n    }, [\n        `(${prefix}filter)-(none)`,\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.match)(`${prefix}filter`, defaults),\n        ...filters.map((key)=>(0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.matchTheme)(// hue-rotate can be negated\n            `${'h' == key[0] ? '-?' : ''}(${prefix}${key})(?:$|-)`, key, ({ 1: $1 , _  })=>({\n                    [`--tw-${$1}`]: (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.asArray)(_).map((value)=>`${key}(${value})`).join(' '),\n                    ...defaults\n                })))\n    ];\n}\nfunction transform({ 1: $1 , _  }) {\n    return {\n        ['--tw-' + $1]: _,\n        ...tranformDefaults()\n    };\n}\nfunction tranformDefaults() {\n    return {\n        ...asDefaults({\n            '--tw-translate-x': '0',\n            '--tw-translate-y': '0',\n            '--tw-rotate': '0',\n            '--tw-skew-x': '0',\n            '--tw-skew-y': '0',\n            '--tw-scale-x': '1',\n            '--tw-scale-y': '1',\n            '--tw-transform': transformValue()\n        }),\n        transform: 'var(--tw-transform)'\n    };\n}\nfunction transformValue(gpu) {\n    return [\n        gpu ? // -gpu\n        'translate3d(var(--tw-translate-x),var(--tw-translate-y),0)' : 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y))',\n        'rotate(var(--tw-rotate))',\n        'skewX(var(--tw-skew-x))',\n        'skewY(var(--tw-skew-y))',\n        'scaleX(var(--tw-scale-x))',\n        'scaleY(var(--tw-scale-y))'\n    ].join(' ');\n}\nfunction span({ 1: $1 , 2: $2  }) {\n    return `${$1} ${$2} / ${$1} ${$2}`;\n}\nfunction gridTemplate({ 1: $1  }) {\n    return `repeat(${$1},minmax(0,1fr))`;\n}\nfunction range({ start =1 , end , step =1  }) {\n    let result = [];\n    for(let index = start; index <= end; index += step)result.push(`${index}`);\n    return result;\n}\nfunction asDefaults(props) {\n    return {\n        '@layer defaults': {\n            '*,::before,::after': props,\n            '::backdrop': props\n        }\n    };\n}\n\n//# sourceMappingURL=rules.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/rules.dev.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@twind/preset-tailwind/variants.dev.js":
/*!**************************************************************!*\
  !*** ../node_modules/@twind/preset-tailwind/variants.dev.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ variants)\n/* harmony export */ });\n/* harmony import */ var _twind_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @twind/core */ \"(ssr)/../node_modules/@twind/core/core.dev.js\");\n\nlet variants = [\n    [\n        'sticky',\n        '@supports ((position: -webkit-sticky) or (position:sticky))'\n    ],\n    [\n        'motion-reduce',\n        '@media (prefers-reduced-motion:reduce)'\n    ],\n    [\n        'motion-safe',\n        '@media (prefers-reduced-motion:no-preference)'\n    ],\n    [\n        'print',\n        '@media print'\n    ],\n    [\n        '(portrait|landscape)',\n        ({ 1: $1  })=>`@media (orientation:${$1})`\n    ],\n    [\n        'contrast-(more|less)',\n        ({ 1: $1  })=>`@media (prefers-contrast:${$1})`\n    ],\n    [\n        '(first-(letter|line)|placeholder|backdrop|before|after)',\n        ({ 1: $1  })=>`&::${$1}`\n    ],\n    [\n        '(marker|selection)',\n        ({ 1: $1  })=>`& *::${$1},&::${$1}`\n    ],\n    [\n        'file',\n        '&::file-selector-button'\n    ],\n    [\n        '(first|last|only)',\n        ({ 1: $1  })=>`&:${$1}-child`\n    ],\n    [\n        'even',\n        '&:nth-child(2n)'\n    ],\n    [\n        'odd',\n        '&:nth-child(odd)'\n    ],\n    [\n        'open',\n        '&[open]'\n    ],\n    // All other pseudo classes are already supported by twind\n    [\n        '(aria|data)-',\n        // indirection wrapper to remove autocomplete functions from production bundles\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ 1: $1 , /* aria or data */ $$  }, /* everything after the dash */ context)=>$$ && `&[${$1}-${// aria-asc or data-checked -> from theme\n            context.theme($1, $$) || // aria-[...] or data-[...]\n            (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.arbitrary)($$, '', context) || // default handling\n            `${$$}=\"true\"`}]`, ({ 1: $1  }, { theme  })=>[\n                ...new Set([\n                    ...'aria' == $1 ? [\n                        'checked',\n                        'disabled',\n                        'expanded',\n                        'hidden',\n                        'pressed',\n                        'readonly',\n                        'required',\n                        'selected'\n                    ] : [],\n                    ...Object.keys(theme($1) || {})\n                ])\n            ].map((key)=>({\n                    suffix: key,\n                    label: `&[${$1}-${theme($1, key) || `${key}=\"true\"`}]`,\n                    theme: {\n                        section: $1,\n                        key\n                    }\n                })).concat([\n                {\n                    suffix: '[',\n                    label: `&[${$1}-…]`\n                }\n            ]))\n    ],\n    /* Styling based on parent and peer state */ // Groups classes like: group-focus and group-hover\n    // these need to add a marker selector with the pseudo class\n    // => '.group:focus .group-focus:selector'\n    [\n        '((group|peer)(~[^-[]+)?)(-\\\\[(.+)]|[-[].+?)(\\\\/.+)?',\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ 2: type , 3: name = '' , 4: $4 , 5: $5 = '' , 6: label = name  }, { e , h , v  })=>{\n            let selector = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.normalize)($5) || ('[' == $4[0] ? $4 : v($4.slice(1)));\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return `${(selector.includes('&') ? selector : '&' + selector).replace(/&/g, `:merge(.${e(h(type + label))})`)}${'p' == type[0] ? '~' : ' '}&`;\n        }, (_, { variants  })=>Object.entries(variants).filter(([, selector])=>/^&(\\[|:[^:])/.test(selector)).flatMap(([variant, selector])=>[\n                    {\n                        prefix: 'group-',\n                        suffix: variant,\n                        label: `${selector.replace('&', '.group')} &`,\n                        modifiers: []\n                    },\n                    {\n                        prefix: 'peer-',\n                        suffix: variant,\n                        label: `${selector.replace('&', '.peer')} &`,\n                        modifiers: []\n                    }\n                ]))\n    ],\n    // direction variants\n    [\n        '(ltr|rtl)',\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ 1: $1  })=>`[dir=\"${$1}\"] &`, ({ 1: $1  })=>[\n                {\n                    prefix: $1,\n                    suffix: '',\n                    label: `[dir=\"${$1}\"] &`\n                }\n            ])\n    ],\n    [\n        'supports-',\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ $$  }, /* everything after the dash */ context)=>{\n            $$ && ($$ = context.theme('supports', $$) || (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.arbitrary)($$, '', context));\n            if ($$) return $$.includes(':') || ($$ += ':var(--tw)'), /^\\w*\\s*\\(/.test($$) || ($$ = `(${$$})`), // Chrome has a bug where `(condtion1)or(condition2)` is not valid\n            // But `(condition1) or (condition2)` is supported.\n            `@supports ${$$.replace(/\\b(and|or|not)\\b/g, ' $1 ').trim()}`;\n        }, (_, { theme  })=>Object.keys(theme('supports') || {}).map((key)=>({\n                    suffix: key,\n                    theme: {\n                        section: 'supports',\n                        key\n                    }\n                })).concat([\n                {\n                    suffix: '[',\n                    label: `@supports …`\n                }\n            ]))\n    ],\n    [\n        'max-',\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ $$  }, context)=>{\n            $$ && ($$ = context.theme('screens', $$) || (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.arbitrary)($$, '', context));\n            if ('string' == typeof $$) return `@media not all and (min-width:${$$})`;\n        }, (_, { theme  })=>Object.entries(theme('screens') || {}).filter(([, value])=>'string' == typeof value).map(([key, value])=>({\n                    suffix: key,\n                    label: `@media not all and (min-width:${value})`,\n                    theme: {\n                        section: 'screens',\n                        key\n                    }\n                })).concat([\n                {\n                    suffix: '[',\n                    label: `@media not all and (min-width: …)`\n                }\n            ]))\n    ],\n    [\n        'min-',\n        (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.withAutocomplete)(({ $$  }, context)=>{\n            return $$ && ($$ = (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.arbitrary)($$, '', context)), $$ && `@media (min-width:${$$})`;\n        }, ()=>[\n                {\n                    suffix: '[',\n                    label: `@media (min-width: …)`\n                }\n            ])\n    ],\n    // Arbitrary variants\n    [\n        /^\\[(.+)]$/,\n        ({ 1: $1  })=>/[&@]/.test($1) && (0,_twind_core__WEBPACK_IMPORTED_MODULE_0__.normalize)($1).replace(/[}]+$/, '').split('{')\n    ]\n];\n\n//# sourceMappingURL=variants.dev.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@twind/preset-tailwind/variants.dev.js\n");

/***/ })

};
;