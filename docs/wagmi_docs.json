[
    {
        "url": "https://wagmi.sh/react/getting-started",
        "title": "Getting Started ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi is a React Hooks library for Ethereum. You can learn more about the rationale behind the project in the Why Wagmi section.",
            "For new projects, it is recommended to set up your Wagmi app using the create-wagmi command line interface (CLI). This will create a new Wagmi project using TypeScript and install the required dependencies.",
            "Once the command runs, you'll see some prompts to complete.",
            "After the prompts, create-wagmi will create a directory with your project name and install the required dependencies. Check out the README.md for further instructions (if required).",
            "To manually add Wagmi to your project, install the required packages.",
            "Create and export a new Wagmi config using createConfig.",
            "In this example, Wagmi is configured to use the Mainnet and Sepolia chains, and injected connector. Check out the createConfig docs for more configuration options.",
            "If you are using TypeScript, you can \"register\" the Wagmi config or use the hook config property to get strong type-safety across React Context in places that wouldn't normally have type info.",
            "By registering or using the hook config property, useBlockNumber's chainId is strongly typed to only allow Mainnet and Sepolia IDs. Learn more by reading the TypeScript docs.",
            "Wrap your app in the WagmiProvider React Context Provider and pass the config you created earlier to the value property.",
            "Check out the WagmiProvider docs to learn more about React Context in Wagmi.",
            "Inside the WagmiProvider, wrap your app in a TanStack Query React Context Provider, e.g. QueryClientProvider, and pass a new QueryClient instance to the client property.",
            "Check out the TanStack Query docs to learn about the library, APIs, and more.",
            "Now that everything is set up, every component inside the Wagmi and TanStack Query Providers can use Wagmi React Hooks.",
            "For more information on what to do next, check out the following topics.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/why",
        "title": "Why Wagmi ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Building Ethereum applications is hard. Apps need to support connecting wallets, multiple chains, signing messages and data, sending transactions, listening for events and state changes, refreshing stale blockchain data, and much more. This is all on top of solving for app-specific use-cases and providing polished user experiences.",
            "The ecosystem is also continuously evolving, meaning you need to adapt to new improvements or get left behind. App developers should not need to worry about connecting tens of different wallets, the intricacies of multi-chain support, typos accidentally sending an order of magnitude more ETH or calling a misspelled contract function, or accidentally spamming their RPC provider, costing thousands in compute units.",
            "Wagmi solves all these problems and more — allowing app developers to focus on building high-quality and performant experiences for Ethereum — by focusing on developer experience, performance, feature coverage, and stability.",
            "Wagmi delivers a great developer experience through modular and composable APIs, automatic type safety and inference, and comprehensive documentation.",
            "It provides developers with intuitive building blocks to build their Ethereum apps. While Wagmi's APIs might seem more verbose at first, it makes Wagmi's modular building blocks extremely flexible. Easy to move around, change, and remove. It also allows developers to better understand Ethereum concepts as well as understand what and why certain properties are being passed through. Learning how to use Wagmi is a great way to learn how to interact with Ethereum in general.",
            "Wagmi also provides strongly typed APIs, allowing consumers to get the best possible experience through autocomplete, type inference, as well as static validation. You often just need to provide an ABI and Wagmi can help you autocomplete your way to success, identify type errors before your users do, drill into blockchain errors at compile and runtimes with surgical precision, and much more.",
            "The API documentation is comprehensive and contains usage info for every module in Wagmi. The core team uses a documentation and test driven development approach to building modules, which leads to predictable and stable APIs.",
            "Performance is critical for applications on all sizes. Slow page load and interactions can cause users to stop using applications. Wagmi uses and is built by the same team behind Viem, the most performant production-ready Ethereum library.",
            "End users should not be required to download a module of over 100kB in order to interact with Ethereum. Wagmi is optimized for tree-shaking and dead-code elimination, allowing apps to minimize bundle size for fast page load times.",
            "Data layer performance is also critical. Slow, unnecessary, and manual data fetching can make apps unusable and cost thousands in RPC compute units. Wagmi supports caching, deduplication, persistence, and much more through TanStack Query.",
            "Wagmi supports the most popular and commonly-used Ethereum features out of the box with 40+ React Hooks for accounts, wallets, contracts, transactions, signing, ENS, and more. Wagmi also supports just about any wallet out there through it's official connectors, EIP-6963 support, and extensible API.",
            "If you need lower-level control, you can always drop down to Wagmi Core or Viem, which Wagmi uses internally to perform blockchain operations. Wagmi also manages multi-chain support automatically so developers can focus on their applications instead of adding custom code.",
            "Finally, Wagmi has a CLI to manage ABIs as well as a robust ecosystem of third-party libraries, like ConnectKit, RainbowKit, AppKit, Dynamic, Privy, and many more, so you can get started quickly without needing to build everything from scratch.",
            "Stability is a fundamental principle for Wagmi. Many organizations, large and small, rely heavily on Wagmi and expect it to be entirely stable for their users and applications.",
            "Wagmi's test suite runs against forked Ethereum nodes to make sure functions work across chains. The test suite also runs type tests against many different versions of peer dependencies, like TypeScript, to ensure compatibility with the latest releases of other popular software.",
            "Wagmi follows semver so developers can upgrade between versions with confidence. Starting with Wagmi v2, new functionality will be opt-in with old functionality being deprecated alongside the new features. This means upgrading to the latest major versions will not require immediate changes.",
            "Lastly, the core team works full-time on Wagmi and related projects, and is constantly improving Wagmi and keeping it up-to-date with industry trends and changes.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/installation",
        "title": "Installation ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Install Wagmi via your package manager, a <script> tag, or build from source.",
            "Install the required packages.",
            "If you're not using a package manager, you can also use Wagmi via an ESM-compatible CDN such as esm.sh. Simply add a <script type=\"module\"> tag to the bottom of your HTML file with the following content.",
            "Check out the React docs for info on how to use React without JSX.",
            "Wagmi is optimized for modern browsers. It is compatible with the latest versions of the following browsers.",
            "TIP",
            "Depending on your environment, you might need to add polyfills. See Viem Platform Compatibility for more info.",
            "If you can't wait for a new release to test the latest features, you can either install from the canary tag (tracks the main branch).",
            "Or clone the Wagmi repo to your local machine, build, and link it yourself.",
            "Then go to the project where you are using Wagmi and run pnpm link --global wagmi (or the package manager that you used to link Wagmi globally). Make sure you installed any required peer dependencies and their versions are correct.",
            "Ethereum-related projects are often targeted in attacks to steal users' assets. Make sure you follow security best-practices for your project. Some quick things to get started.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/getting-started",
        "title": "Getting Started ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi is a React Hooks library for Ethereum. You can learn more about the rationale behind the project in the Why Wagmi section.",
            "For new projects, it is recommended to set up your Wagmi app using the create-wagmi command line interface (CLI). This will create a new Wagmi project using TypeScript and install the required dependencies.",
            "Once the command runs, you'll see some prompts to complete.",
            "After the prompts, create-wagmi will create a directory with your project name and install the required dependencies. Check out the README.md for further instructions (if required).",
            "To manually add Wagmi to your project, install the required packages.",
            "Create and export a new Wagmi config using createConfig.",
            "In this example, Wagmi is configured to use the Mainnet and Sepolia chains, and injected connector. Check out the createConfig docs for more configuration options.",
            "If you are using TypeScript, you can \"register\" the Wagmi config or use the hook config property to get strong type-safety across React Context in places that wouldn't normally have type info.",
            "By registering or using the hook config property, useBlockNumber's chainId is strongly typed to only allow Mainnet and Sepolia IDs. Learn more by reading the TypeScript docs.",
            "Wrap your app in the WagmiProvider React Context Provider and pass the config you created earlier to the value property.",
            "Check out the WagmiProvider docs to learn more about React Context in Wagmi.",
            "Inside the WagmiProvider, wrap your app in a TanStack Query React Context Provider, e.g. QueryClientProvider, and pass a new QueryClient instance to the client property.",
            "Check out the TanStack Query docs to learn about the library, APIs, and more.",
            "Now that everything is set up, every component inside the Wagmi and TanStack Query Providers can use Wagmi React Hooks.",
            "For more information on what to do next, check out the following topics.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/typescript",
        "title": "TypeScript ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi is designed to be as type-safe as possible! Things to keep in mind:",
            "To ensure everything works correctly, make sure your tsconfig.json has strict mode set to true.",
            "By default React Context does not work well with type inference. To support strong type-safety across the React Context boundary, there are two options available:",
            "Declaration merging allows you to \"register\" your config globally with TypeScript. The Register type enables Wagmi to infer types in places that wouldn't normally have access to type info via React Context alone.",
            "To set this up, add the following declaration to your project. Below, we co-locate the declaration merging and the config set up.",
            "Since the Register type is global, you only need to add it once in your project. Once set up, you will get strong type-safety across your entire project. For example, query hooks will type chainId based on your config's chains.",
            "You just saved yourself a runtime error and you didn't even need to pass your config. 🎉",
            "For cases where you have more than one Wagmi config or don't want to use the declaration merging approach, you can pass a specific config directly to hooks via the config property.",
            "As you expect, chainId is inferred correctly for each config.",
            "This approach is more explicit, but works well for advanced use-cases, if you don't want to use React Context or declaration merging, etc.",
            "Wagmi can infer types based on ABIs and EIP-712 Typed Data definitions, powered by Viem and ABIType. This achieves full end-to-end type-safety from your contracts to your frontend and enlightened developer experience by autocompleting ABI item names, catching misspellings, inferring argument and return types (including overloads), and more.",
            "For this to work, you must either const-assert ABIs and Typed Data (more info below) or define them inline. For example, useReadContract's abi configuration parameter:",
            "If type inference isn't working, it's likely you forgot to add a const assertion or define the configuration parameter inline. Also, make sure your ABIs, Typed Data definitions, and TypeScript configuration are valid and set up correctly.",
            "TIP",
            "Unfortunately TypeScript doesn't support importing JSON as const yet. Check out the Wagmi CLI to help with this! It can automatically fetch ABIs from Etherscan and other block explorers, resolve ABIs from your Foundry/Hardhat projects, generate React Hooks, and more.",
            "Anywhere you see the abi or types configuration property, you can likely use const-asserted or inline ABIs and Typed Data to get type-safety and inference. These properties are also called out in the docs.",
            "Here's what useReadContract looks like with and without a const-asserted abi property.",
            "You can prevent runtime errors and be more productive by making sure your ABIs and Typed Data definitions are set up appropriately. 🎉",
            "For advanced use-cases, you may want to configure Wagmi's internal types. Most of Wagmi's types relating to ABIs and EIP-712 Typed Data are powered by ABIType. See the ABIType docs for more info on how to configure types.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/comparisons",
        "title": "Comparison ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "There are multiple options when it comes to React libraries for Ethereum that help manage wallet connections, provide utility methods/hooks, etc.",
            "TIP",
            "Comparisons strive to be as accurate and as unbiased as possible. If you use any of these libraries and feel the information could be improved, feel free to suggest changes.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/tanstack-query",
        "title": "TanStack Query ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi Hooks are not only a wrapper around the core Wagmi Actions, but they also utilize TanStack Query to enable trivial and intuitive fetching, caching, synchronizing, and updating of asynchronous data in your React applications.",
            "Without an asynchronous data fetching abstraction, you would need to handle all the negative side-effects that comes as a result, such as: representing finite states (loading, error, success), handling race conditions, caching against a deterministic identifier, etc.",
            "Wagmi Hooks represent either a Query or a Mutation.",
            "Queries are used for fetching data (e.g. fetching a block number, reading from a contract, etc), and are typically invoked on mount by default. All queries are coupled to a unique Query Key, and can be used for further operations such as refetching, prefetching, or modifying the cached data.",
            "Mutations are used for mutating data (e.g. connecting/disconnecting accounts, writing to a contract, switching chains, etc), and are typically invoked in response to a user interaction. Unlike Queries, they are not coupled with a query key.",
            "By default, TanStack Query persists all query data in-memory. This means that if you refresh the page, all in-memory query data will be lost.",
            "If you want to persist query data to an external storage, you can utilize TanStack Query's createSyncStoragePersister or createAsyncStoragePersister to plug external storage like localStorage, sessionStorage, IndexedDB or AsyncStorage (React Native).",
            "Below is an example of how to set up Wagmi + TanStack Query with sync external storage like localStorage or sessionStorage.",
            "Read more about Sync Storage Persistence.",
            "Below is an example of how to set up Wagmi + TanStack Query with async external storage like IndexedDB or AsyncStorage.",
            "Read more about Async Storage Persistence.",
            "Query Keys are typically used to perform advanced operations on the query such as: invalidation, refetching, prefetching, etc.",
            "Wagmi exports Query Keys for every Hook, and they can be retrieved via the Hook (React) or via an Import (Vanilla JS).",
            "Read more about Query Keys on the TanStack Query docs.",
            "Each Hook returns a queryKey value. You would use this approach when you want to utilize the query key in a React component as it handles reactivity for you, unlike the Import method below.",
            "Each Hook has a corresponding get<X>QueryOptions function that returns a query key. You would use this method when you want to utilize the query key outside of a React component in a Vanilla JS context, like in a utility function.",
            "WARNING",
            "The caveat of this method is that it does not handle reactivity for you (e.g. active account/chain changes, argument changes, etc). You would need to handle this yourself by explicitly passing through the arguments to get<X>QueryOptions.",
            "Invalidating a query is the process of marking the query data as stale (e.g. inactive/unused), and refetching the queries that are already rendered.",
            "Read more about Invalidating Queries on the TanStack Query docs.",
            "You may want to \"watch\" a users' balance, and invalidate the balance after each incoming block. We can invoke invalidateQueries inside a useEffect with the block number as it's only dependency – this will refetch all rendered balance queries when the blockNumber changes.",
            "Maybe you want to invalidate a users' balance after some interaction. This would mark the balance as stale, and consequently refetch all rendered balance queries.",
            "Fetching a query is the process of invoking the query function to retrieve data. If the query exists and the data is not invalidated or older than a given staleTime, then the data from the cache will be returned. Otherwise, the query will fetch for the latest data.",
            "You can retrieve and update query data imperatively with getQueryData and setQueryData. This is useful for scenarios where you want to retrieve or update a query outside of a React component.",
            "Note that these functions do not invalidate or refetch queries.",
            "Prefetching a query is the process of fetching the data ahead of time and seeding the cache with the returned data. This is useful for scenarios where you want to fetch data before the user navigates to a page, or fetching data on the server to be reused on client hydration.",
            "Read more about Prefetching Queries on the TanStack Query docs.",
            "It is possible to utilize TanStack Query's SSR strategies with Wagmi Hooks & Query Keys. Check out the Server Rendering & Hydration & Advanced Server Rendering guides.",
            "TanStack Query includes dedicated Devtools that assist in visualizing and debugging your queries, their cache states, and much more. You will have to pass a custom queryKeyFn to your QueryClient for Devtools to correctly serialize BigInt values for display. Alternatively, You can use the hashFn from @wagmi/core/query, which already handles this serialization.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/viem",
        "title": "Viem ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Viem is a low-level TypeScript Interface for Ethereum that enables developers to interact with the Ethereum blockchain, including: JSON-RPC API abstractions, Smart Contract interaction, wallet & signing implementations, coding/parsing utilities and more.",
            "Wagmi Core is essentially a wrapper over Viem that provides multi-chain functionality via Wagmi Config and automatic account management via Connectors.",
            "All of the core Wagmi Hooks are friendly wrappers around Viem Actions that inject a multi-chain and connector aware Wagmi Config.",
            "There may be cases where you might want to dig deeper and utilize Viem Actions directly (maybe a Hook doesn't exist in Wagmi yet). In these cases, you can create your own custom Wagmi Hook by importing Viem Actions directly via viem/actions and plugging in a Viem Client returned by the useClient Hook.",
            "The example below demonstrates two different ways to utilize Viem Actions:",
            "TIP",
            "It is highly recommended to use the tree-shakable method to ensure that you are only pulling modules you use, and keep your bundle size low.",
            "It is possible to utilize Viem's Private Key & Mnemonic Accounts with Wagmi by explicitly passing through the account via the account argument on Wagmi Actions.",
            "INFO",
            "Wagmi currently does not support hoisting Private Key & Mnemonic Accounts to the top-level Wagmi Config – meaning you have to explicitly pass through the account to every Action. If you feel like this is a feature that should be added, please open an discussion.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/error-handling",
        "title": "Error Handling ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The error property in Wagmi Hooks is strongly typed with it's corresponding error type. This enables you to have granular precision with handling errors in your application.",
            "You can discriminate the error type by using the name property on the error object.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/ethers",
        "title": "Ethers.js Adapters ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "It is recommended for projects to migrate to Viem when using Wagmi, but there are some cases where you might still need to use Ethers.js in your project:",
            "We have provided reference implementations for Viem → Ethers.js adapters that you can copy + paste in your project.",
            "Copy the following reference implementation into a file of your choice:",
            "Now you can use the useEthersProvider function in your components:",
            "Copy the following reference implementation into a file of your choice:",
            "Now you can use the useEthersSigner function in your components:",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/chain-properties",
        "title": "Chain Properties ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Some chains support additional properties related to blocks and transactions. This is powered by Viem's formatters and serializers. For example, Celo, ZkSync, OP Stack chains all support additional properties. In order to use these properties in a type-safe way, there are a few things you should be aware of.",
            "TIP",
            "Make sure you follow the TypeScript guide's Config Types section before moving on. The easiest way to do this is to use Declaration Merging to \"register\" your config globally with TypeScript.",
            "Once your Config is registered with TypeScript, you are ready to access chain-specific properties! For example, Celo's feeCurrency is available.",
            "This is great, but if you have multiple chains that support additional properties, your autocomplete could be overwhelmed with all of them. By setting the chainId property to a specific value (e.g. celo.id), you can narrow parameters to a single chain.",
            "Return types can also have chain-specific properties attached to them. There are a couple approaches for extracting these properties.",
            "Not only can you use the chainId parameter to narrow parameters, you can also use it to narrow the return type.",
            "Wagmi internally will set a chainId property on return types that you can use to narrow results. The chainId is determined from the chainId parameter or global state (e.g. connector). You can use this property to help TypeScript narrow the type.",
            "If chain properties aren't working, make sure TypeScript is configured correctly. Not all chains have additional properties, to check which ones do, see the Viem repo (chains that have a top-level directory under src/chains support additional properties).",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/ssr",
        "title": "SSR ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi uses client-only external stores (such as localStorage and mipd) to show the user the most relevant data as quickly as possible on first render.",
            "However, the caveat of using these external client stores is that frameworks which incorporate SSR (such as Next.js) will throw hydration warnings on the client when it identifies mismatches between the server-rendered HTML and the client-rendered HTML.",
            "To stop this from happening, you can toggle on the ssr property in the Wagmi Config.",
            "Turning on the ssr property means that content from the external stores will be hydrated on the client after the initial mount.",
            "As a result of turning on the ssr property, external persistent stores like localStorage will be hydrated on the client after the initial mount.",
            "This means that you will still see a flash of \"empty\" data on the client (e.g. a \"disconnected\" account instead of a \"reconnecting\" account, or an empty address instead of the last connected address) until after the first mount, when the store hydrates.",
            "In order to persist data between the server and the client, you can use cookies.",
            "First, we will set up cookie storage in the Wagmi Config.",
            "Next, we will need to add some mechanisms to hydrate the stored cookie in Wagmi.",
            "In our app/layout.tsx file (a Server Component), we will need to extract the cookie from the headers function and pass it to cookieToInitialState.",
            "We will need to pass this result to the initialState property of the WagmiProvider. The WagmiProvider must be in a Client Component tagged with \"use client\" (see app/providers.tsx tab).",
            "Would you like to contribute this content? Feel free to open a Pull Request!",
            "Would you like to contribute this content? Feel free to open a Pull Request!",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/connect-wallet",
        "title": "Connect Wallet ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The ability for a user to connect their wallet is a core function for any Dapp. It allows users to perform tasks such as: writing to contracts, signing messages, or sending transactions.",
            "Wagmi contains everything you need to get started with building a Connect Wallet module. To get started, you can either use a third-party library or build your own.",
            "You can use a pre-built Connect Wallet module from a third-party library such as:",
            "The above libraries are all built on top of Wagmi, handle all the edge cases around wallet connection, and provide a seamless Connect Wallet UX that you can use in your Dapp.",
            "Wagmi provides you with the Hooks to get started building your own Connect Wallet module.",
            "It takes less than five minutes to get up and running with Browser Wallets, WalletConnect, and Coinbase Wallet.",
            "Before we get started with building the functionality of the Connect Wallet module, we will need to set up the Wagmi configuration.",
            "Let's create a config.ts file and export a config object.",
            "In the above configuration, we want to set up connectors for Injected (browser), WalletConnect (browser + mobile), MetaMask, and Safe wallets. This configuration uses the Mainnet and Base chains, but you can use whatever you want.",
            "WARNING",
            "Make sure to replace the projectId with your own WalletConnect Project ID, if you wish to use WalletConnect!",
            "Get your Project ID",
            "Next, we will need to wrap our React App with Context so that our application is aware of Wagmi & React Query's reactive state and in-memory caching.",
            "After that, we will create a WalletOptions component that will display our connectors. This will allow users to select a wallet and connect.",
            "Below, we are rendering a list of connectors retrieved from useConnect. When the user clicks on a connector, the connect function will connect the users' wallet.",
            "Lastly, if an account is connected, we want to show some basic information, like the connected address and ENS name and avatar.",
            "Below, we are using hooks like useAccount, useEnsAvatar and useEnsName to extract this information.",
            "We are also utilizing useDisconnect to show a \"Disconnect\" button so a user can disconnect their wallet.",
            "Finally, we can wire up our Wallet Options and Account components to our application's entrypoint.",
            "Want to see the above steps all wired up together in an end-to-end example? Check out the below StackBlitz playground.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/send-transaction",
        "title": "Send Transaction ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The following guide teaches you how to send transactions in Wagmi. The example below builds on the Connect Wallet guide and uses the useSendTransaction & useWaitForTransaction hooks.",
            "Feel free to check out the example before moving on:",
            "Follow the Connect Wallet guide guide to get this set up.",
            "Create your SendTransaction component that will contain the send transaction logic.",
            "Next, we will need to add a handler to the form that will send the transaction when the user hits \"Send\". This will be a basic handler in this step.",
            "Now that we have the form handler, we can hook up the useSendTransaction Hook to send the transaction.",
            "We can optionally add a loading state to the \"Send\" button while we are waiting confirmation from the user's wallet.",
            "We can also display the transaction confirmation status to the user by using the useWaitForTransactionReceipt Hook.",
            "If the user rejects the transaction, or the user does not have enough funds to cover the transaction, we can display an error message to the user.",
            "Finally, we can wire up our Send Transaction component to our application's entrypoint.",
            "See the Example.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/read-from-contract",
        "title": "Read from Contract ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The useReadContract Hook allows you to read data on a smart contract, from a view or pure (read-only) function. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.",
            "The component below shows how to retrieve the token balance of an address from the Wagmi Example contract",
            "If useReadContract depends on another value (address in the example below), you can use the query.enabled option to prevent the query from running until the dependency is ready.",
            "The useReadContract Hook also returns loading & error states, which can be used to display a loading indicator while the data is being fetched, or an error message if contract execution reverts.",
            "The useBlockNumber Hook can be utilized to refetch or invalidate the contract data on a specific block interval.",
            "We can use the useReadContract Hook multiple times in a single component to call multiple functions on the same contract, but this ends up being hard to manage as the number of functions increases, especially when we also want to deal with loading & error states.",
            "Luckily, to make this easier, we can use the useReadContracts Hook to call multiple functions in a single call.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/write-to-contract",
        "title": "Write to Contract ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The useWriteContract Hook allows you to mutate data on a smart contract, from a payable or nonpayable (write) function. These types of functions require gas to be executed, hence a transaction is broadcasted in order to change the state.",
            "In the guide below, we will teach you how to implement a \"Mint NFT\" form that takes in a dynamic argument (token ID) using Wagmi. The example below builds on the Connect Wallet guide and uses the useWriteContract & useWaitForTransaction hooks.",
            "If you have already completed the Sending Transactions guide, this guide will look very similar! That's because writing to a contract internally broadcasts & sends a transaction.",
            "Feel free to check out the example before moving on:",
            "Follow the Connect Wallet guide guide to get this set up.",
            "Create your MintNFT component that will contain the Mint NFT logic.",
            "Next, we will need to add a handler to the form that will send the transaction when the user hits \"Mint\". This will be a basic handler in this step.",
            "Now that we have the form handler, we can hook up the useWriteContract Hook to send the transaction.",
            "We can optionally add a loading state to the \"Mint\" button while we are waiting confirmation from the user's wallet.",
            "We can also display the transaction confirmation status to the user by using the useWaitForTransactionReceipt Hook.",
            "If the user rejects the transaction, or the contract reverts, we can display an error message to the user.",
            "Finally, we can wire up our Mint NFT component to our application's entrypoint.",
            "See the Example.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/faq",
        "title": "FAQ / Troubleshooting ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Collection of frequently asked questions with ideas on how to troubleshoot and resolve them.",
            "If you run into issues with a specific wallet, try another before opening up an issue. There are many different wallets and it's likely that the issue is with the wallet itself, not Wagmi. For example, if you are using Wallet X and sending a transaction doesn't work, try Wallet Y and see if it works.",
            "Using native BigInt with JSON.stringify will raise a TypeError as BigInt values are not serializable. There are two techniques to mitigate this:",
            "Lossless serialization means that BigInt will be converted to a format that can be deserialized later (e.g. 69420n → \"#bigint.69420\"). The trade-off is that these values are not human-readable and are not intended to be displayed to the user.",
            "Lossless serialization can be achieved with wagmi's serialize and deserialize utilities.",
            "Lossy serialization means that the BigInt will be converted to a normal display string (e.g. 69420n → '69420'). The trade-off is that you will not be able to deserialize the BigInt with JSON.parse as it can not distinguish between a normal string and a BigInt.",
            "This method can be achieved by modifying JSON.stringify to include a BigInt replacer:",
            "Wagmi is an open source software project and free to use. If you enjoy using Wagmi or would like to support Wagmi development, you can:",
            "If you use Wagmi at work, consider asking your company to sponsor Wagmi. This may not be easy, but business sponsorships typically make a much larger impact on the sustainability of OSS projects than individual donations, so you will help us much more if you succeed.",
            "Yes. Wagmi is very stable and is used in production by thousands of organizations, like Stripe, Shopify, Coinbase, Uniswap, ENS, Optimism.",
            "Yes, Wagmi is very strict with semantic versioning and we will never introduce breaking changes to the runtime API in a minor version bump.",
            "For exported types, we try our best to not introduce breaking changes in non-major versions, however, TypeScript doesn't follow semver and often introduces breaking changes in minor releases that can cause Wagmi type issues. See the TypeScript docs for more information.",
            "The Wagmi team accepts all sorts of contributions. Check out the Contributing guide to get started. If you are interested in adding a new connector to Wagmi, check out the Creating Connectors guide.",
            "Please create a new GitHub Discussion thread. You're also free to suggest changes to this or any other page on the site using the \"Suggest changes to this page\" button at the bottom of the page.",
            "Until there's a more in-depth write-up about Wagmi internals, here is the gist:",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/guides/migrate-from-v1-to-v2",
        "title": "Migrate from v1 to v2 ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi v2 redesigns the core APIs to mesh better with Viem and TanStack Query. This major version transforms Wagmi into a light wrapper around these libraries, sprinkling in multichain support and account management. As such, there are some breaking changes and deprecations to be aware of outlined in this guide.",
            "To get started, install the latest version of Wagmi and it's required peer dependencies.",
            "Wagmi v2 should be the last major version that will have this many actionable breaking changes.",
            "Moving forward after Wagmi v2, new functionality will be opt-in with old functionality being deprecated alongside the new features. This means upgrading to the latest major versions will not require immediate changes.",
            "Not ready to migrate yet?",
            "The Wagmi v1 docs are still available at 1.x.wagmi.sh/react.",
            "Wagmi uses TanStack Query to manage async state, handling requests, caching, and more. With Wagmi v1, TanStack Query was an internal implementation detail. With Wagmi v2, TanStack Query is a peer dependency. A lot of Wagmi users also use TanStack Query in their apps so making it a peer dependency gives them more control and removes some custom Wagmi code internally.",
            "If you don't normally use TanStack Query, all you need to do is set it up and mostly forget about it (we'll provide guidance around version updates).",
            "For more information on setting up TanStack Query for Wagmi, follow the Getting Started docs. If you want to set up persistence for your query cache (default behavior before Wagmi v2), check out the TanStack Query docs.",
            "Wagmi v2 no longer publishes a separate cjs tag since very few people use this tag and ESM is the future. See Sindre Sorhus' guide for more info about switching to ESM.",
            "Mutation hooks are hooks that change network or application state, sign data, or perform write operations through mutation functions. With Wagmi v1, you could pass arguments directly to these hooks instead of using them with their mutation functions. For example:",
            "With Wagmi v2, you must pass arguments to the mutation function instead. This follows the same behavior as TanStack Query mutations and improves type-safety.",
            "Previously, you could pass TanStack Query parameters, like enabled and staleTime, directly to hooks. In Wagmi v2, TanStack Query parameters are now moved to the query property. This allows Wagmi to better support TanStack Query type inference, control for future breaking changes since TanStack Query is now a peer dependency, and expose Wagmi-related hook property at the top-level of editor features, like autocomplete.",
            "The watch property was removed from all hooks besides useBlock and useBlockNumber. This property allowed hooks to internally listen for block changes and automatically refresh their data. In Wagmi v2, you can compose useBlock or useBlockNumber along with React.useEffect to achieve the same behavior. Two different approaches are outlined for useBalance below.",
            "This is a bit more code, but removes a lot of internal code from hooks that can slow down your app when not used and gives you more control. For example, you can easily refresh data every five blocks instead of every block.",
            "Wagmi used to support an experimental suspense property via TanStack Query. Since TanStack Query removed suspense from its useQuery hook, it is no longer supported by Wagmi Hooks.",
            "Instead, you can use useSuspenseQuery along with TanStack Query-related exports from the 'wagmi/query' entrypoint.",
            "usePrepareContractWrite and usePrepareSendTransaction were removed and replaced with idiomatic Viem alternatives. For usePrepareContractWrite, use useSimulateContract. Similar to usePrepareContractWrite, useSimulateContract composes well with useWriteContract",
            "Instead of usePrepareSendTransaction, use useEstimateGas. You can pass useEstimateGas data to useSendTransaction to compose the two hooks.",
            "This might seem like more work, but it gives you more control and is more accurate representation of what is happening under the hood.",
            "The useNetwork hook was removed since the connected chain is typically based on the connected account. Use useAccount to get the connected chain.",
            "Use useConfig for the list of chains set up with the Wagmi Config.",
            "The onConnect and onDisconnect callbacks were removed from the useAccount hook since it is frequently used without these callbacks so it made sense to extract these into a new API, useAccountEffect, rather than clutter the useAccount hook.",
            "The Wagmi Config does not separate transport types anymore. Simply use Viem's webSocket transport instead when setting up your Wagmi Config. You can get Viem Client instance with this transport attached by using useClient or usePublicClient.",
            "In the spirit of removing unnecessary abstractions, paginatedIndexesConfig was removed. Use useInfiniteReadContracts's initialPageParam and getNextPageParam parameters along with fetchNextPage/fetchPreviousPage from the result instead or copy paginatedIndexesConfig's implementation to your codebase.",
            "See the TanStack Query docs for more information on infinite queries.",
            "Updated useSendTransaction and useWriteContract return type from { hash: `0x${string}` } to `0x${string}`.",
            "Updated useConnect return type from { account: Address; chain: { id: number; unsupported?: boolean }; connector: Connector } to { accounts: readonly Address[]; chainId: number }. This better reflects the ability to have multiple accounts per connector.",
            "All hook parameters and return types follow the naming pattern of [PascalCaseHookName]Parameters and [PascalCaseHookName]ReturnType. For example, UseAccountParameters and UseAccountReturnType.",
            "In order to maximize type-safety and ease of creating connectors, the connector API changed. Follow the Creating Connectors guide for more info on creating new connectors and converting Wagmi v1 connectors.",
            "Previously, each connector had it's own entrypoint to optimize tree-shaking. Since all connectors now have package.json#sideEffects enabled, this is no longer necessary and the entrypoint is unified. Use the 'wagmi/connectors' entrypoint instead.",
            "The MetaMaskConnector was removed since it was nearly the same thing as the InjectedConnector. Use the injected connector instead, along with the target parameter set to 'metaMask', for the same behavior.",
            "In Wagmi v1, connectors were classes you needed to instantiate. In Wagmi v2, connectors are functions. As a result, the API has changed. Connectors have the following new names:",
            "To create a connector, you now call the connector function with parameters.",
            "WalletConnect v1 was sunset June 28, 2023. Use the walletConnect connector instead.",
            "Chains now live in the Viem repository. As a result, the 'wagmi/chains' entrypoint now proxies all chains from 'viem/chains' directly.",
            "Since the 'wagmi/chains' entrypoint now proxies 'viem/chains', mainnet and sepolia were removed from the main entrypoint. Use the 'wagmi/chains' entrypoint instead.",
            "A number of errors were renamed to better reflect their functionality or replaced by Viem errors.",
            "Before v2, Wagmi handled ENS name normalization internally for useEnsAddress, useEnsAvatar, and useEnsResolver, using Viem's normalize function. This added extra bundle size as full normalization is quite heavy. For v2, you must normalize ENS names yourself before passing them to these hooks. You can use Viem's normalize function or any other function that performs UTS-46 normalization.",
            "By inverting control, Wagmi let's you choose how much normalization to do. For example, maybe your project only allows ENS names that are numeric so no normalization is not needed. Check out the ENS documentation for more information on normalizing names.",
            "The Wagmi v2 Config now has native multichain support using the chains parameter so the configureChains function is no longer required.",
            "Import from Viem instead.",
            "It never made sense that we would have provider URLs hardcoded in the Wagmi codebase. Use Viem transports along with RPC provider URLs instead.",
            "WagmiConfig was renamed to WagmiProvider to reduce confusion with the Wagmi Config type. React Context Providers usually follow the naming schema *Provider so this is a more idiomatic name. Now that Wagmi no longer uses Ethers.js (since Wagmi v1), the term \"Provider\" is less overloaded.",
            "Moving forward, useBalance will only work for native currencies, thus the token parameter is no longer supported. Use useReadContracts instead.",
            "Moving forward, useBalance will not accept the unit parameter or return a formatted value. Instead you can call formatUnits from Viem directly or use another number formatting library, like dnum instead.",
            "Moving forward, useToken is no longer supported. Use useReadContracts instead.",
            "The formatUnits parameter and related return values (e.g. result.formatted) are deprecated for the following hooks:",
            "Instead you can call formatUnits from Viem directly or use another number formatting library, like dnum instead.",
            "This allows us to invert control to users so they can handle number formatting however they want, taking into account precision, localization, and more.",
            "The following hooks were renamed to better reflect their functionality and underlying Viem actions:",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/createConfig",
        "title": "createConfig ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Creates new Config object.",
            "Integrating a Viem Client",
            "Instead of using transports, it's possible to provide a function that returns a Viem Client via the client property for more fine-grained control over Wagmi's internal Client creation.",
            "readonly [Chain, ...Chain[]]",
            "CreateConnectorFn[] | undefined",
            "Connectors used by the Config.",
            "boolean | undefined",
            "boolean | undefined",
            "Flag to indicate if the config is being used in a server-side rendering environment. Defaults to false.",
            "Storage | null | undefined",
            "boolean | undefined",
            "{ multicall?: boolean | { batchSize?: number | undefined; wait?: number | undefined } | undefined } | { [_ in chains[number][\"id\"]]?: { multicall?: boolean | { batchSize?: number | undefined; wait?: number | undefined } | undefined } | undefined } | undefined",
            "number | { [_ in chains[number]['id']]?: number | undefined } | undefined",
            "number | { [_ in chains[number]['id']]?: number | undefined } | undefined",
            "Record<chains[number]['id'], Transport>",
            "Mapping of chain IDs to Transports. This mapping is used internally when creating chain-aware Viem Client objects. See the Transport docs for more info.",
            "(parameters: { chain: chains[number] }) => Client<Transport, chains[number]>",
            "Function for creating new Viem Client to be used internally. Exposes more control over the internal Client creation logic versus using the transports property.",
            "WARNING",
            "When using this option, you likely want to pass parameters.chain straight through to createClient to ensure the Viem Client is in sync with any active connections.",
            "Object responsible for managing Wagmi state and internals.",
            "readonly [Chain, ...Chain[]]",
            "chains passed to createConfig.",
            "readonly Connector[]",
            "Connectors set up from passing connectors and multiInjectedProviderDiscovery to createConfig.",
            "State<chains>",
            "The Config object's internal state. See State for more info.",
            "Storage | null",
            "storage passed to createConfig.",
            "(parameters?: { chainId?: chainId | chains[number]['id'] | undefined }): Client<transports[chainId], Extract<chains[number], { id: chainId }>>",
            "Creates new Viem Client object.",
            "(value: State<chains> | ((state: State<chains>) => State<chains>)) => void",
            "Updates the Config object's internal state. See State for more info.",
            "WARNING",
            "Exercise caution when using this method. It is intended for internal and advanced use-cases only. Manually setting state can cause unexpected behavior.",
            "(selector: (state: State<chains>) => state, listener: (selectedState: state, previousSelectedState: state) => void, options?: { emitImmediately?: boolean | undefined; equalityFn?: ((a: state, b: state) => boolean) | undefined } | undefined) => (() => void)",
            "Listens for state changes matching the selector function. Returns a function that can be called to unsubscribe the listener.",
            "chains[number]['id']",
            "Current chain ID. When syncConnectedChain is true, chainId is kept in sync with the current connection. Defaults to first chain in chains.",
            "Map<string, Connection>",
            "Mapping of unique connector identifier to Connection object.",
            "string | undefined",
            "Unique identifier of the current connection.",
            "'connected' | 'connecting' | 'disconnected' | 'reconnecting'",
            "Current connection status.",
            "readonly [Address, ...Address[]]",
            "Array of addresses associated with the connection.",
            "number",
            "Chain ID associated with the connection.",
            "Connector",
            "Connector associated with the connection.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/createStorage",
        "title": "createStorage ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Creates new Storage object.",
            "(<T>(value: string) => T) | undefined",
            "WARNING",
            "If you use a custom deserialize function, make sure it can handle bigint and Map values.",
            "string | undefined",
            "(<T>(value: T) => string) | undefined",
            "WARNING",
            "If you use a custom serialize function, make sure it can handle bigint and Map values.",
            "{ getItem(key: string): string | null | undefined | Promise<string | null | undefined>; setItem(key: string, value: string): void | Promise<void>; removeItem(key: string): void | Promise<void>; }",
            "Object responsible for persisting Wagmi State and other data.",
            "getItem(key: string, defaultValue?: value | null | undefined): value | null | Promise<value | null>",
            "setItem(key: string, value: any): void | Promise<void>",
            "removeItem(key: string): void | Promise<void>",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/chains",
        "title": "Chains ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Viem Chain objects. More info at the Viem docs.",
            "Import via the 'wagmi/chains' entrypoint (proxies all chains from 'viem/chains').",
            "Chain definitions as of viem@2.21.28. For viem@latest, visit the Viem repo.",
            "Import the Chain type from Viem and create a new object that is asserted as const and satisfies the type. You can also use the defineChain function from Viem.",
            "Now, add the missing required properties to the object until the error goes away.",
            "The more properties you add, the better the chain will be to use with Wagmi. Most of these attributes exist within the ethereum-lists/chains repository.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors",
        "title": "Connectors ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connectors for popular wallet providers and protocols.",
            "Import via the 'wagmi/connectors' entrypoint.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/coinbaseWallet",
        "title": "coinbaseWallet ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for the Coinbase Wallet SDK.",
            "WARNING",
            "Before going to production, it is highly recommended to set an appName and appLogoUrl for your application that can be displayed upon connection to the wallet.",
            "Check out the Coinbase Wallet SDK docs for more info.",
            "string",
            "Application name.",
            "string | null | undefined",
            "Application logo image URL; favicon is used if unspecified.",
            "boolean | undefined",
            "\"all\" | \"eoaOnly\" | \"smartWalletOnly\"",
            "Preference for the type of wallet to display.",
            "WARNING",
            "Passing preference as a string is deprecated and will be removed in the next major version. Instead you should use preference#options.",
            "{ auto?: boolean | undefined; dataSuffix?: `0x${string}` | undefined }",
            "This option only applies to Coinbase Smart Wallet. When a valid data suffix is supplied, it is appended to the initCode and executeBatch calldata. Coinbase Smart Wallet expects a 16 byte hex string. If the data suffix is not a 16 byte hex string, the Smart Wallet will ignore the property. If auto is true, the Smart Wallet will generate a 16 byte hex string from the apps origin.",
            "string",
            "\"all\" | \"eoaOnly\" | \"smartWalletOnly\"",
            "Preference for the type of wallet to display.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/injected",
        "title": "injected ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for EIP-1193 Ethereum Providers.",
            "boolean | undefined",
            "TargetId | (TargetMap[TargetId] & { id: string }) | (() => (TargetMap[TargetId] & { id: string }) | undefined) | undefined",
            "boolean | number | undefined",
            "Watches for async provider injection via the ethereum#initialized event. When true, defaults to 1_000 milliseconds. Otherwise, uses a provided value of milliseconds.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/metaMask",
        "title": "metaMask ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for MetaMask SDK.",
            "Check out the MetaMask SDK docs for more info. A few options are omitted that Wagmi manages internally.",
            "DappMetadata | undefined",
            "Metadata is used to fill details for the UX on confirmation screens in MetaMask, including the following fields:",
            "SDKLoggingOptions | undefined",
            "Enables SDK-side logging to provide visibility into:",
            "In this context, this is especially useful to observe what calls are made through Wagmi hooks.",
            "Relevant options:",
            "boolean | undefined",
            "This is particularly relevant for web-only setups using Wagmi, where developers want complete control over the UI.",
            "To get the deeplink to display in the QR code, listen to the display_uri event.",
            "The default is false.",
            "By default, if the EIP-6963 MetaMask injected provider is detected, this connector will replace it.",
            "EIP-6963 defines a standard way for dapps to interact with multiple wallets simultaneously by injecting providers into the browser. Wallets that implement this standard can make their presence known to dapps in a consistent and predictable manner.",
            "When MetaMask SDK detects an EIP-6963-compliant provider (such as MetaMask itself), the connector will automatically replace the default injected provider (like window.ethereum) with the one provided by MetaMask SDK.",
            "See the rdns property for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/mock",
        "title": "mock ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for mocking Wagmi functionality.",
            "readonly [Address, ...Address[]]",
            "Accounts to use with the connector.",
            "{ connectError?: boolean | Error | undefined; reconnect?: boolean | undefined; signMessageError?: boolean | Error | undefined; signTypedDataError?: boolean | Error | undefined; switchChainError?: boolean | Error | undefined; } | undefined",
            "Feature flags that change behavior of Wagmi internals.",
            "boolean | undefined",
            "Whether the connector is connected by default.",
            "boolean | Error | undefined",
            "Whether to throw an error when connector.connect is called.",
            "boolean | undefined",
            "Enables reconnecting to connector.",
            "boolean | Error | undefined",
            "Whether to throw an error when 'personal_sign' is called.",
            "boolean | Error | undefined",
            "Whether to throw an error when 'eth_signTypedData_v4' is called.",
            "boolean | Error | undefined",
            "Whether to throw an error when connector.switchChain is called.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/safe",
        "title": "safe ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for Safe Apps SDK.",
            "Check out the Safe docs for more info.",
            "RegExp[] | undefined",
            "boolean | undefined",
            "boolean | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/connectors/walletConnect",
        "title": "walletConnect ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Connector for WalletConnect.",
            "Check out the WalletConnect docs for more info. A few options are omitted that Wagmi manages internally.",
            "string | undefined",
            "Custom storage prefix for persisting provider state.",
            "boolean | undefined",
            "boolean | undefined",
            "Preface: Whereas WalletConnect v1 supported dynamic chain switching, WalletConnect v2 requires the user to pre-approve a set of chains up-front. This comes with consequent UX nuances (see below) when a user tries to switch to a chain that they have not approved.",
            "This flag mainly affects the behavior when a wallet does not support dynamic chain authorization with WalletConnect v2.",
            "If true (default), the new chain will be treated as a stale chain. If the user has yet to establish a relationship (approved/rejected) with this chain in their WalletConnect session, the connector will disconnect upon the dapp auto-connecting, and the user will have to reconnect to the dapp (revalidate the chain) in order to approve the newly added chain. This is the default behavior to avoid an unexpected error upon switching chains which may be a confusing user experience (e.g. the user will not know they have to reconnect unless the dapp handles these types of errors).",
            "If false, the new chain will be treated as a validated chain. This means that if the user has yet to establish a relationship with the chain in their WalletConnect session, wagmi will successfully auto-connect the user. This comes with the trade-off that the connector will throw an error when attempting to switch to the unapproved chain. This may be useful in cases where a dapp constantly modifies their configured chains, and they do not want to disconnect the user upon auto-connecting. If the user decides to switch to the unapproved chain, it is important that the dapp handles this error and prompts the user to reconnect to the dapp in order to approve the newly added chain.",
            "CoreTypes.Metadata | undefined",
            "Metadata related to the app requesting the connection.",
            "string",
            "WalletConnect Cloud project identifier. You can find your projectId on your WalletConnect dashboard.",
            "QrModalOptions | undefined",
            "Options for rendering QR modal.",
            "string | undefined",
            "KeyValueStorageOptions | undefined",
            "boolean | undefined",
            "TIP",
            "This can be disabled and you can listen for a 'message' event with payload { type: 'display_uri'; data: string } if you want to render your own QR code.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports",
        "title": "Transports ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "createConfig can be instantiated with a set of Transports for each chain. A Transport is the intermediary layer that is responsible for executing outgoing JSON-RPC requests to the RPC Provider (e.g. Alchemy, Infura, etc).",
            "Available via the 'wagmi' entrypoint.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports/custom",
        "title": "custom ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The custom Transport connects to a JSON-RPC API via custom. Wraps Viem's custom Transport.",
            "{ request({ method: string, params: unknown[] }): Promise<unknown> }",
            "An EIP-1193 request function function.",
            "string",
            "A key for the Transport. Defaults to \"custom\".",
            "string",
            "A name for the Transport. Defaults to \"Ethereum Provider\".",
            "number",
            "The max number of times to retry when a request fails. Defaults to 3.",
            "number",
            "The base delay (in ms) between retries. By default, the Transport will use exponential backoff (~~(1 << count) * retryDelay), which means the time between retries is not constant.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports/fallback",
        "title": "fallback ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The fallback Transport consumes multiple Transports. If a Transport request fails, it will fall back to the next one in the list. Wraps Viem's fallback Transport.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports/http",
        "title": "http ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The http Transport connects to a JSON-RPC API via HTTP. Wraps Viem's http Transport.",
            "WARNING",
            "If no URL is provided, then the transport will fall back to a public RPC URL on the chain. It is highly recommended to provide an authenticated RPC URL to prevent rate-limiting.",
            "The http Transport supports Batch JSON-RPC. This means that multiple JSON-RPC requests can be sent in a single HTTP request.",
            "The Transport will batch up Actions over a given period and execute them in a single Batch JSON-RPC HTTP request. By default, this period is a zero delay meaning that the batch request will be executed at the end of the current JavaScript message queue. Consumers can specify a custom time period wait (in ms).",
            "You can enable Batch JSON-RPC by setting the batch flag to true:",
            "string",
            "URL of the JSON-RPC API. Defaults to chain.rpcUrls.default.http[0].",
            "boolean | BatchOptions",
            "Toggle to enable Batch JSON-RPC. Defaults to false",
            "number",
            "The maximum number of JSON-RPC requests to send in a batch. Defaults to 1_000.",
            "number",
            "The maximum number of milliseconds to wait before sending a batch. Defaults to 0 (zero delay).",
            "RequestInit",
            "Fetch options to pass to the internal fetch function. Useful for passing auth headers or cache options.",
            "string",
            "A key for the Transport. Defaults to \"http\".",
            "string",
            "A name for the Transport. Defaults to \"HTTP JSON-RPC\".",
            "number",
            "The max number of times to retry when a request fails. Defaults to 3.",
            "number",
            "The base delay (in ms) between retries. By default, the Transport will use exponential backoff (~~(1 << count) * retryDelay), which means the time between retries is not constant.",
            "number",
            "The timeout for requests. Defaults to 10_000.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports/unstable_connector",
        "title": "unstable_connector ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The unstable_connector Transport connects to a JSON-RPC API via the provided Connector.",
            "For example, if the provided Connector is injected and the end-user uses MetaMask, then outgoing JSON-RPC requests will be sent via the MetaMask EIP-1193 Provider (window.ethereum).",
            "WARNING",
            "It is highly recommended to use the unstable_connector Transport inside of a fallback Transport. This ensures that if the Connector request fails, the Transport will fall back to a different Transport in the fallback set.",
            "Some common cases for a Connector request to fail are:",
            "Connector",
            "The Connector to use for the Transport.",
            "string",
            "A key for the Transport. Defaults to \"connector\".",
            "string",
            "A name for the Transport. Defaults to \"Connector\".",
            "number",
            "The max number of times to retry when a request fails. Defaults to 3.",
            "number",
            "The base delay (in ms) between retries. By default, the Transport will use exponential backoff (~~(1 << count) * retryDelay), which means the time between retries is not constant.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/transports/webSocket",
        "title": "webSocket ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "The webSocket Transport connects to a JSON-RPC API via a WebSocket. Wraps Viem's webSocket Transport.",
            "WARNING",
            "If no URL is provided, then the transport will fall back to a public RPC URL on the chain. It is highly recommended to provide an authenticated RPC URL to prevent rate-limiting.",
            "string",
            "URL of the JSON-RPC API.",
            "string",
            "A key for the Transport. Defaults to \"webSocket\".",
            "string",
            "A name for the Transport. Defaults to \"WebSocket JSON-RPC\".",
            "number",
            "The max number of times to retry when a request fails. Defaults to 3.",
            "number",
            "The base delay (in ms) between retries. By default, the Transport will use exponential backoff (~~(1 << count) * retryDelay), which means the time between retries is not constant.",
            "number",
            "The timeout for async WebSocket requests. Defaults to 10_000.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/WagmiProvider",
        "title": "WagmiProvider ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "React Context Provider for Wagmi.",
            "Config object to inject with context.",
            "State | undefined",
            "boolean | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks",
        "title": "Hooks ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "React Hooks for accounts, wallets, contracts, transactions, signing, ENS, and more.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useAccount",
        "title": "useAccount ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting current account.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Address | undefined",
            "readonly Address[] | undefined",
            "Connected addresses from connector.",
            "Chain | undefined",
            "Connected chain from connector. If chain is not configured by config, it will be undefined.",
            "number | undefined",
            "Connected chain id from connector.",
            "Connector | undefined",
            "Connected connector.",
            "boolean",
            "Boolean variables derived from status.",
            "'connecting' | 'reconnecting' | 'connected' | 'disconnected'",
            "You can use status to narrow the return type.",
            "For example, when status is 'connected' properties like address are guaranteed to be defined.",
            "Or when status is 'disconnected' properties like address are guaranteed to be undefined:",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useAccountEffect",
        "title": "useAccountEffect ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for listening to account lifecycle events.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "((data: { address: `0x${string}`; addresses: readonly [`0x${string}`, ...`0x${string}`[]]; chain: Chain | undefined chainId: number; connector: Connector; isReconnected: boolean }) => void) | undefined",
            "Callback that is called when accounts are connected.",
            "(() => void) | undefined",
            "Callback that is called when no more accounts are connected.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useBalance",
        "title": "useBalance ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching native currency or token balance.",
            "Address | undefined",
            "Address to get balance for. enabled set to false if address is undefined.",
            "bigint | undefined",
            "Block number to get balance at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get balance at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "ERC-20 token address to get balance for.",
            "'ether' | 'gwei' | 'wei' | number | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "{ decimals: number; formatted: string; symbol: string; value: bigint; } | (() => { decimals: number; formatted: string; symbol: string; value: bigint; }) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "{ decimals: number; formatted: string; symbol: string; value: bigint; } | ((previousValue: { decimals: number; formatted: string; symbol: string; value: bigint; } | undefined; previousQuery: Query | undefined) => { decimals: number; formatted: string; symbol: string; value: bigint; }) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: { decimals: number; formatted: string; symbol: string; value: bigint; } | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetBalanceErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetBalanceErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: { decimals: number; formatted: string; symbol: string; value: bigint; }) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: { decimals: number; formatted: string; symbol: string; value: bigint; } | undefined, newData: { decimals: number; formatted: string; symbol: string; value: bigint; }) => { decimals: number; formatted: string; symbol: string; value: bigint; })) | undefined",
            "TanStack Query query docs",
            "{ decimals: number; formatted: string; symbol: string; value: bigint; }",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetBalanceErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetBalanceErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<{ decimals: number; formatted: string; symbol: string; value: bigint; }, GetBalanceErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useBlockNumber",
        "title": "useBlockNumber ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching the number of the most recent block seen.",
            "number | undefined",
            "Time in milliseconds that cached block number will remain in memory.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "boolean | UseWatchBlockNumberParameters | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetBlockNumberErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetBlockNumberErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetBlockNumberErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetBlockNumberErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, GetBlockNumberErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useBlock",
        "title": "useBlock ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching information about a block at a block number, hash or tag.",
            "`0x${string}`",
            "Information at a given block hash.",
            "bigint",
            "Information at a given block number.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized'",
            "Information at a given block tag. Defaults to 'latest'.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "boolean",
            "Whether or not to include transactions as objects.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "boolean | UseWatchBlockParameters | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetBlockData | (() => GetBlockData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetBlockData | ((previousValue: GetBlockData | undefined; previousQuery: Query | undefined) => GetBlockData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetBlockData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetBlockErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetBlockErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetBlockData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetBlockData | undefined, newData: GetBlockData) => GetBlockData)) | undefined",
            "TanStack Query query docs",
            "GetBlockData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetBlockErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetBlockErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetBlockData, GetBlockErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useBlockTransactionCount",
        "title": "useBlockTransactionCount ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching the number of Transactions at a block number, hash or tag.",
            "`0x${string}`",
            "Transaction count at a given block hash.",
            "bigint",
            "Transaction count at a given block number.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized'",
            "Transaction count at a given block tag. Defaults to 'latest'.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetBlockTransactionCountErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetBlockTransactionCountErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetBlockTransactionCountErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetBlockTransactionCountErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, GetBlockTransactionCountErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useBytecode",
        "title": "useBytecode ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for retrieving the bytecode at an address.",
            "Address | undefined",
            "The contract address.",
            "bigint | undefined",
            "The block number to check the bytecode at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "The block tag to check the bytecode at.",
            "config['chains'][number]['id'] | undefined",
            "The chain ID to check the bytecode at.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetBytecodeData | (() => GetBytecodeData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetBytecodeData | ((previousValue: GetBytecodeData | undefined; previousQuery: Query | undefined) => GetBytecodeData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetBytecodeData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetBytecodeErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetBytecodeErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetBytecodeData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetBytecodeData | undefined, newData: GetBytecodeData) => GetBytecodeData)) | undefined",
            "TanStack Query query docs",
            "GetBytecodeData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetBytecodeErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetBytecodeErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetBytecodeData, GetBytecodeErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useCall",
        "title": "useCall ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for executing a new message call immediately without submitting a transaction to the network.",
            "Account | Address | undefined",
            "The Account to call from.",
            "0x${string} | undefined",
            "A contract hashed method call with encoded args.",
            "Address | undefined",
            "The contract address or recipient.",
            "AccessList | undefined",
            "The access list.",
            "bigint | undefined",
            "The gas provided for transaction execution.",
            "bigint | undefined",
            "The price (in wei) to pay per gas. Only applies to Legacy Transactions.",
            "bigint | undefined",
            "Total fee per gas (in wei), inclusive of maxPriorityFeePerGas. Only applies to EIP-1559 Transactions.",
            "bigint | undefined",
            "Max priority fee per gas (in wei). Only applies to EIP-1559 Transactions.",
            "number | undefined",
            "Unique number identifying this transaction.",
            "bigint | undefined",
            "Value (in wei) sent with this transaction.",
            "number | undefined",
            "The block number to perform the call against.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "The block tag to perform the call against.",
            "config['chains'][number]['id'] | undefined",
            "The block tag to perform the call against.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "CallData | (() => CallData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "CallData | ((previousValue: CallData | undefined; previousQuery: Query | undefined) => CallData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: CallData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: CallErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: CallErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: CallData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: CallData | undefined, newData: CallData) => CallData)) | undefined",
            "TanStack Query query docs",
            "CallData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | CallErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | CallErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<CallData, CallErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useChainId",
        "title": "useChainId ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting current chain ID.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "number",
            "Current chain ID from config.state.chainId.",
            "INFO",
            "Only returns chain IDs for chains configured via createConfig's chains parameter.",
            "If the active connection chainId is not from a chain included in your Wagmi Config, useChainId will return the last configured chain ID.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useChains",
        "title": "useChains ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting configured chains",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "readonly [Chain, ...Chain[]]",
            "Chains from config.chains.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useClient",
        "title": "useClient ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting Viem Client instance.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when getting Viem Client.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Client | undefined",
            "Viem Client instance.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useConfig",
        "title": "useConfig ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting Config from nearest WagmiProvider.",
            "If you use TypeScript and register your Config, the return type will be inferred.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useConnect",
        "title": "useConnect ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for connecting accounts with connectors.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever connect is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: ConnectErrorType, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }) => Promise<context | void> | context | void) | undefined",
            "((data: { accounts: readonly [Address, ...Address[]]; chainId: number; }, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: { accounts: readonly [Address, ...Address[]]; chainId: number; }, error: ConnectErrorType, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: ConnectErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ConnectErrorType) => number) | undefined",
            "readonly Connector[]",
            "Globally configured connectors via createConfig. Useful for rendering a list of available connectors.",
            "TanStack Query mutation docs",
            "(variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "{ chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }",
            "The variables object to pass to the connect action.",
            "(data: { accounts: readonly [Address, ...Address[]]; chainId: number; }, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: ConnectErrorType, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: { accounts: readonly [Address, ...Address[]]; chainId: number; } | undefined, error: ConnectErrorType | null, variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, context: TContext | undefined) => void",
            "(variables: { chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; }, { onSuccess, onSettled, onError }) => Promise<{ accounts: readonly [Address, ...Address[]]; chainId: number; }>",
            "Similar to connect but returns a promise which can be awaited.",
            "{ accounts: readonly [Address, ...Address[]]; chainId: number; } | undefined",
            "ConnectErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "ConnectErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "{ chainId?: number | undefined; connector?: CreateConnectorFn | Connector | undefined; } | undefined",
            "TIP",
            "Not all connectors support connecting directly to a chainId (e.g. they don't support programmatic chain switching). In those cases, the connector will connect to whatever chain the connector's provider (e.g. wallet) is connected to.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useConnections",
        "title": "useConnections ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting active connections.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useConnectorClient",
        "title": "useConnectorClient ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting a Viem Client object for the current or provided connector.",
            "Address | Account | undefined",
            "Account to use with client. Throws if account is not found on connector.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use with client.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Connector | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "Client | (() => Client) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "Client | ((previousValue: Client | undefined; previousQuery: Query | undefined) => Client) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: Client | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetConnectorClientErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetConnectorClientErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: Client) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "boolean | (((oldData: Client | undefined, newData: Client) => Client)) | undefined",
            "TanStack Query query docs",
            "Client",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetConnectorClientErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetConnectorClientErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<Client, GetConnectorClientErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useConnectors",
        "title": "useConnectors ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting configured connectors.",
            "readonly Connector[]",
            "Connectors from config.connectors.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useDeployContract",
        "title": "useDeployContract viem@>=2.8.18 ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for deploying a contract to the network, given bytecode, and constructor arguments.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever deployContract is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: DeployContractErrorType, variables: DeployContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: DeployContractVariables) => Promise<context | void> | context | void) | undefined",
            "((data: DeployContractData, variables: DeployContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: DeployContractData, error: DeployContractErrorType, variables: DeployContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: DeployContractErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: DeployContractErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: DeployContractVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "DeployContractVariables",
            "The variables object to pass to the deployContract action.",
            "(data: DeployContractData, variables: DeployContractVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: DeployContractErrorType, variables: DeployContractVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: DeployContractData | undefined, error: DeployContractErrorType | null, variables: DeployContractVariables, context: TContext | undefined) => void",
            "(variables: DeployContractVariables, { onSuccess, onSettled, onError }) => Promise<DeployContractData>",
            "Similar to deployContract but returns a promise which can be awaited.",
            "DeployContractData | undefined",
            "DeployContractErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "DeployContractErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "DeployContractVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useDisconnect",
        "title": "useDisconnect ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for disconnecting connections.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever disconnect is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: DisconnectErrorType, variables: { connector?: Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: { connector?: Connector | undefined; }) => Promise<context | void> | context | void) | undefined",
            "((data: void, variables: { connector?: Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: void, error: DisconnectErrorType, variables: { connector?: Connector | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: DisconnectErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: DisconnectErrorType) => number) | undefined",
            "readonly Connector[]",
            "Connectors that are currently connected. Useful for rendering a list of connectors to disconnect.",
            "TanStack Query mutation docs",
            "(variables: { connector?: Connector | undefined; }, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "{ connector?: Connector | undefined; }",
            "The variables object to pass to the disconnect action.",
            "(data: void, variables: { connector?: Connector | undefined; }, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: DisconnectErrorType, variables: { connector?: Connector | undefined; }, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: void | undefined, error: DisconnectErrorType | null, variables: { connector?: Connector | undefined; }, context: TContext | undefined) => void",
            "(variables: { connector?: Connector | undefined; }, { onSuccess, onSettled, onError }) => Promise<void>",
            "Similar to disconnect but returns a promise which can be awaited.",
            "void | undefined",
            "DisconnectErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "DisconnectErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "{ connector?: Connector | undefined; } | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEnsAddress",
        "title": "useEnsAddress ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching ENS address for name.",
            "WARNING",
            "Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to normalize ENS names with UTS-46 normalization before passing them to useEnsAddress. You can use Viem's built-in normalize function for this.",
            "bigint | undefined",
            "Block number to get ENS address at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get ENS address at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "number | undefined",
            "The ENSIP-9 coin type to fetch the address for.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Name to get the address for. enabled set to false if name is undefined.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "string | (() => string) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "string | ((previousValue: string | undefined; previousQuery: Query | undefined) => string) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: string | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetEnsAddressErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetEnsAddressErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: string) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: string | undefined, newData: string) => string)) | undefined",
            "TanStack Query query docs",
            "string",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetEnsAddressErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetEnsAddressErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<string, GetEnsAddressErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEnsAvatar",
        "title": "useEnsAvatar ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching ENS avatar for name.",
            "WARNING",
            "Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to normalize ENS names with UTS-46 normalization before passing them to useEnsAvatar. You can use Viem's built-in normalize function for this.",
            "{ ipfs?: string | undefined; arweave?: string | undefined } | undefined",
            "Gateway urls to resolve IPFS and/or Arweave assets.",
            "bigint | undefined",
            "Block number to get ENS avatar at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get ENS avatar at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string[] | undefined",
            "A set of Universal Resolver gateways, used for resolving CCIP-Read requests made through the ENS Universal Resolver Contract.",
            "string | undefined",
            "Name to get the avatar for. enabled set to false if name is undefined.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "string | null | (() => string | null) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "string | null | ((previousValue: string | null | undefined; previousQuery: Query | undefined) => string | null) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: string | null | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetEnsAvatarErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetEnsAvatarErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: string | null) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: string | null | undefined, newData: string | null) => string | null)) | undefined",
            "TanStack Query query docs",
            "string | null",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetEnsAvatarErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetEnsAvatarErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<string | null, GetEnsAvatarErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEnsName",
        "title": "useEnsName ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching primary ENS name for address.",
            "Address | undefined",
            "Name to get the resolver for. enabled set to false if address is undefined.",
            "bigint | undefined",
            "Block number to get ENS name at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get ENS name at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "string | null | (() => string | null) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "string | null | ((previousValue: string | null | undefined; previousQuery: Query | undefined) => string | null) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: string | null | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetEnsNameErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetEnsNameErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: string | null) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: string | null | undefined, newData: string | null) => string | null)) | undefined",
            "TanStack Query query docs",
            "string | null",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetEnsNameErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetEnsNameErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<string | null, GetEnsNameErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEnsResolver",
        "title": "useEnsResolver ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching ENS resolver for name.",
            "WARNING",
            "Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to normalize ENS names with UTS-46 normalization before passing them to useEnsResolver. You can use Viem's built-in normalize function for this.",
            "bigint | undefined",
            "Block number to get ENS resolver at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get ENS resolver at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Name to get the resolver for. enabled set to false if name is undefined.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "string | null | (() => string | null) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "string | null | ((previousValue: string | null | undefined; previousQuery: Query | undefined) => string | null) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: string | null | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetEnsResolverErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetEnsResolverErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: string | null) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: string | null | undefined, newData: string | null) => string | null)) | undefined",
            "TanStack Query query docs",
            "string | null",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetEnsResolverErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetEnsResolverErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<string | null, GetEnsResolverErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEnsText",
        "title": "useEnsText ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching a text record for a specified ENS name and key.",
            "WARNING",
            "Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to normalize ENS names with UTS-46 normalization before passing them to useEnsText. You can use Viem's built-in normalize function for this.",
            "bigint | undefined",
            "Block number to get the text at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get the text at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "string | undefined",
            "ENS key to get Text for.",
            "string | undefined",
            "Name to get the text for. enabled set to false if name is undefined.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "string | null | (() => string | null) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "string | null | ((previousValue: string | null | undefined; previousQuery: Query | undefined) => string | null) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: string | null | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetEnsTextErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetEnsTextErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: string | null) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: string | null | undefined, newData: string | null) => string | null)) | undefined",
            "TanStack Query query docs",
            "string | null",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetEnsTextErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetEnsTextErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<string | null, GetEnsTextErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useFeeHistory",
        "title": "useFeeHistory ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching a collection of historical gas information.",
            "number | undefined",
            "Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.",
            "number[] | undefined",
            "A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.",
            "bigint | undefined",
            "Highest number block of the requested range.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag of the highest number block of the requested range.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetFeeHistoryErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetFeeHistoryErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetFeeHistoryErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetFeeHistoryErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, GetFeeHistoryErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useProof",
        "title": "useProof ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for return the account and storage values of the specified account including the Merkle-proof.",
            "Address | undefined",
            "The account address to get the proof for.",
            "`0x${string}`[] | undefined",
            "Array of storage-keys that should be proofed and included.",
            "bigint | undefined",
            "Proof at a given block number.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Proof at a given block tag.",
            "config['chains'][number]['id'] | undefined",
            "The ID of chain to get the proof for.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetProofData | (() => GetProofData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetProofData | ((previousValue: GetProofData | undefined; previousQuery: Query | undefined) => GetProofData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetProofData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetProofErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetProofErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetProofData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetProofData | undefined, newData: GetProofData) => GetProofData)) | undefined",
            "TanStack Query query docs",
            "GetProofData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetProofErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetProofErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetProofData, GetProofErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/usePublicClient",
        "title": "usePublicClient ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting Viem PublicClient instance.",
            "WARNING",
            "If you want to optimize bundle size, you should use useClient along with Viem's tree-shakable actions instead. Since Public Client has all public actions attached directly to it.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when getting Viem Public Client.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "PublicClient | undefined",
            "Viem PublicClient instance.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEstimateFeesPerGas",
        "title": "useEstimateFeesPerGas ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching an estimate for the fees per gas (in wei) for a transaction to be likely included in the next block.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "'ether' | 'gwei' | 'wei' | number | undefined",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "'legacy' | 'eip1559'",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "{ formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; } | (() => { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "{ formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; } | ((previousValue: { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; } | undefined; previousQuery: Query | undefined) => { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; } | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: EstimateFeesPerGasErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: EstimateFeesPerGasErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; } | undefined, newData: { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }) => { formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; })) | undefined",
            "TanStack Query query docs",
            "{ formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | EstimateFeesPerGasErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | EstimateFeesPerGasErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<{ formatted: { gasPrice: string | undefined; maxFeePerGas: string | undefined; maxPriorityFeePerGas: string | undefined; }; gasPrice: bigint | undefined; maxFeePerGas: bigint | undefined; maxPriorityFeePerGas: bigint | undefined; }, EstimateFeesPerGasErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEstimateGas",
        "title": "useEstimateGas ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for estimating the gas necessary to complete a transaction without submitting it to the network.",
            "AccessList | undefined",
            "The access list.",
            "Address | Account | undefined",
            "Account to use when estimating gas.",
            "config['chains'][number]['id'] | undefined",
            "Chain ID to target when estimating gas.",
            "Connector | undefined",
            "Connector to estimate with. If no account is provided, will use default account from connector.",
            "`0x${string}` | undefined",
            "A contract hashed method call with encoded function data.",
            "bigint | undefined",
            "Gas provided for transaction execution.",
            "bigint | undefined",
            "The price in wei to pay per gas. Only applies to Legacy Transactions.",
            "bigint | undefined",
            "Total fee per gas in wei, inclusive of maxPriorityFeePerGas. Only applies to EIP-1559 Transactions.",
            "bigint | undefined",
            "Max priority fee per gas in wei. Only applies to EIP-1559 Transactions.",
            "number",
            "Unique number identifying this transaction.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "Address | undefined",
            "The transaction recipient or contract address.",
            "'legacy' | 'eip1559' | 'eip2930' | undefined",
            "Optional transaction request type to narrow parameters.",
            "bigint | undefined",
            "Value in wei sent with this transaction.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: EstimateGasErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: EstimateGasErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | EstimateGasErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | EstimateGasErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, EstimateGasErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useEstimateMaxPriorityFeePerGas",
        "title": "useEstimateMaxPriorityFeePerGas ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching an estimate for the fees per gas (in wei) for a transaction to be likely included in the next block.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: EstimateMaxPriorityFeePerGasErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: EstimateMaxPriorityFeePerGasErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | EstimateMaxPriorityFeePerGasErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | EstimateMaxPriorityFeePerGasErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, EstimateMaxPriorityFeePerGasErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useGasPrice",
        "title": "useGasPrice ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching the current price of gas (in wei).",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "bigint | (() => bigint) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "bigint | ((previousValue: bigint | undefined; previousQuery: Query | undefined) => bigint) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: bigint | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetGasPriceErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetGasPriceErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: bigint) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: bigint | undefined, newData: bigint) => bigint)) | undefined",
            "TanStack Query query docs",
            "bigint",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetGasPriceErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetGasPriceErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<bigint, GetGasPriceErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useInfiniteReadContracts",
        "title": "useInfiniteReadContracts ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for calling multiple contract read-only methods with \"infinite scrolling\"/\"fetch more\" support.",
            "The example below shows how to demonstrate how to fetch a set of mloot attributes (chestwear, footwear, and handwear) with \"fetch more\" support.",
            "In the above example, we are setting a few things:",
            "We can also leverage properties like getNextPageParam with a custom limit variable to achieve \"pagination\" of parameters. For example, we can fetch the first 10 contract functions, then fetch the next 10 contract functions, and so on.",
            "string",
            "A unique key to store the data in the cache.",
            "(pageParam: number) => Contract[]",
            "A function that provides pageParam (derived from the above) as an argument and expects to return an array of contracts.",
            "Abi | undefined",
            "The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.",
            "Address | undefined",
            "The contract's address.",
            "string | undefined",
            "readonly unknown[] | undefined",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "InfiniteReadContractsData | (() => InfiniteReadContractsData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "number",
            "The initial page parameter to be passed to the query function.",
            "This function can be set to automatically get the previous cursor for infinite queries. The result will also be used to determine the value of hasPreviousPage.",
            "(firstPage: InfiniteReadContractsData, allPages: InfiniteReadContractsData[], firstPageParam: number, allPageParams: number[]) => number | undefined | null",
            "This function can be set to automatically get the previous cursor for infinite queries. The result will also be used to determine the value of hasPreviousPage.",
            "(lastPage: InfiniteReadContractsData, allPages: InfiniteReadContractsData[], lastPageParam: number, allPageParams: number[]) => number | undefined | null",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "InfiniteReadContractsData | ((previousValue: InfiniteReadContractsData | undefined; previousQuery: Query | undefined) => InfiniteReadContractsData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: InfiniteReadContractsData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: ReadContractsErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ReadContractsErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: InfiniteReadContractsData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: InfiniteReadContractsData | undefined, newData: InfiniteReadContractsData) => InfiniteReadContractsData)) | undefined",
            "TanStack Query query docs",
            "InfiniteReadContractsData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | ReadContractsErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | ReadContractsErrorType",
            "(options?: FetchNextPageOptions) => Promise<InfiniteQueryObserverResult<InfiniteReadContractsData, ReadContractsErrorType>>",
            "This function allows you to fetch the next \"page\" of results.",
            "(options?: FetchPreviousPageOptions) => Promise<InfiniteQueryObserverResult<TData, TError>>",
            "This function allows you to fetch the previous \"page\" of results.",
            "boolean",
            "This will be true if there is a next page to be fetched (known via the getNextPageParam option).",
            "boolean",
            "This will be true if there is a previous page to be fetched (known via the getPreviousPageParam option).",
            "boolean",
            "Will be true while fetching the next page with fetchNextPage.",
            "boolean",
            "Will be true while fetching the previous page with fetchPreviousPage.",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<InfiniteReadContractsData, ReadContractsErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/usePrepareTransactionRequest",
        "title": "usePrepareTransactionRequest ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for preparing a transaction request for signing by populating a nonce, gas limit, fee values, and a transaction type.",
            "Account | Address | undefined",
            "The Account to send the transaction from.",
            "`0x${string}` | undefined",
            "The transaction recipient or contract address.",
            "AccessList | undefined",
            "The access list.",
            "config['chains'][number]['id'] | undefined",
            "Chain ID to prepare the transaction request for.",
            "`0x${string}` | undefined",
            "A contract hashed method call with encoded args.",
            "bigint | undefined",
            "The price (in wei) to pay per gas. Only applies to Legacy Transactions.",
            "bigint | undefined",
            "Total fee per gas (in wei), inclusive of maxPriorityFeePerGas. Only applies to EIP-1559 Transactions.",
            "bigint | undefined",
            "Max priority fee per gas (in wei). Only applies to EIP-1559 Transactions.",
            "number | undefined",
            "Unique number identifying this transaction.",
            "(\"fees\" | \"gas\" | \"nonce\" | \"type\")[] | undefined",
            "Parameters to prepare.",
            "For instance, if [\"gas\", \"nonce\"] is provided, then only the gas and nonce parameters will be prepared.",
            "bigint | undefined",
            "Value in wei sent with this transaction.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "PrepareTransactionRequestData | (() => PrepareTransactionRequestData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "PrepareTransactionRequestData | ((previousValue: PrepareTransactionRequestData | undefined; previousQuery: Query | undefined) => PrepareTransactionRequestData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: PrepareTransactionRequestData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: PrepareTransactionRequestErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: PrepareTransactionRequestErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: PrepareTransactionRequestData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: PrepareTransactionRequestData | undefined, newData: PrepareTransactionRequestData) => PrepareTransactionRequestData)) | undefined",
            "TanStack Query query docs",
            "PrepareTransactionRequestData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | PrepareTransactionRequestErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | PrepareTransactionRequestErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<PrepareTransactionRequestData, PrepareTransactionRequestErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useReadContract",
        "title": "useReadContract ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for calling a read-only function on a contract, and returning the response.",
            "A read-only function (constant function) on a Solidity contract is denoted by a pure or view keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.",
            "Abi | undefined",
            "The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.",
            "Account | undefined",
            "Account to use when calling the contract (msg.sender).",
            "Address | undefined",
            "The contract's address.",
            "readonly unknown[] | undefined",
            "bigint | undefined",
            "Block number to call contract at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to call contract at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "ReadContractReturnType | (() => ReadContractReturnType) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "ReadContractReturnType | ((previousValue: ReadContractReturnType | undefined; previousQuery: Query | undefined) => ReadContractReturnType) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: ReadContractReturnType | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: ReadContractErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ReadContractErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: ReadContractReturnType) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: ReadContractReturnType | undefined, newData: ReadContractReturnType) => ReadContractReturnType)) | undefined",
            "The return type's data property is inferrable via the combination of abi, functionName, and args. Check out the TypeScript docs for more info.",
            "TanStack Query query docs",
            "ReadContractReturnType",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | ReadContractErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | ReadContractErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<ReadContractReturnType, ReadContractErrorType>>",
            "'error' | 'pending' | 'success'",
            "With abi setup correctly, TypeScript will infer the correct types for functionName, args, and the return type. See the Wagmi TypeScript docs for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useReadContracts",
        "title": "useReadContracts ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for calling multiple read methods on a contract.",
            "readonly Contract[]",
            "Set of contracts to call.",
            "Abi | undefined",
            "The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.",
            "Address | undefined",
            "The contract's address.",
            "string | undefined",
            "readonly unknown[] | undefined",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "boolean",
            "Whether or not the Hook should throw if a call reverts. If set to true (default), and a call reverts, then useReadContracts will fail silently and its error will be logged in the results array. Defaults to true.",
            "number",
            "The maximum size (in bytes) for each calldata chunk. Set to 0 to disable the size limit. Defaults to 1024.",
            "Note: Some RPC Providers limit the amount of calldata (data) that can be sent in a single eth_call request. It is best to check with your RPC Provider to see if there are any calldata size limits to eth_call requests.",
            "number",
            "The block number to perform the read against.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to read against.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Address",
            "Address of multicall contract.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            " | (() => ) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            " | ((previousValue:  | undefined; previousQuery: Query | undefined) => ) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data:  | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: ) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: ) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData:  | undefined, newData: ) => )) | undefined",
            "TanStack Query query docs",
            "",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | ",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | ",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<, >>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useReconnect",
        "title": "useReconnect ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for reconnecting connectors.",
            "TIP",
            "When WagmiProvider['reconnectOnMount'] is true, reconnect is called automatically on mount.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever reconnect is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: ReconnectErrorType, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }) => Promise<context | void> | context | void) | undefined",
            "((data: { accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector }, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: { accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector }, error: ReconnectErrorType, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: ReconnectErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ReconnectErrorType) => number) | undefined",
            "readonly Connector[]",
            "Globally configured connectors via createConfig.",
            "TanStack Query mutation docs",
            "(variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "{ connectors?: (CreateConnectorFn | Connector)[] | undefined; }",
            "The variables object to pass to the reconnect action.",
            "(data: { accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector }, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: ReconnectErrorType, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: { accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector } | undefined, error: ReconnectErrorType | null, variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, context: TContext | undefined) => void",
            "(variables: { connectors?: (CreateConnectorFn | Connector)[] | undefined; }, { onSuccess, onSettled, onError }) => Promise<{ accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector }>",
            "Similar to reconnect but returns a promise which can be awaited.",
            "{ accounts: readonly [Address, ...Address[]]; chainId: number; connector: Connector } | undefined",
            "ReconnectErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "ReconnectErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "{ connectors?: (CreateConnectorFn | Connector)[] | undefined; } | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSendTransaction",
        "title": "useSendTransaction ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for creating, signing, and sending transactions to networks.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever sendTransaction is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SendTransactionErrorType, variables: SendTransactionVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SendTransactionVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SendTransactionData, variables: SendTransactionVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SendTransactionData, error: SendTransactionErrorType, variables: SendTransactionVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SendTransactionErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SendTransactionErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: SendTransactionVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SendTransactionVariables",
            "The variables object to pass to the sendTransaction action.",
            "(data: SendTransactionData, variables: SendTransactionVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SendTransactionErrorType, variables: SendTransactionVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SendTransactionData | undefined, error: SendTransactionErrorType | null, variables: SendTransactionVariables, context: TContext | undefined) => void",
            "(variables: SendTransactionVariables, { onSuccess, onSettled, onError }) => Promise<SendTransactionData>",
            "Similar to sendTransaction but returns a promise which can be awaited.",
            "SendTransactionData | undefined",
            "SendTransactionErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SendTransactionErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SendTransactionVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSignMessage",
        "title": "useSignMessage ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for signing messages.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever signMessage is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SignMessageErrorType, variables: SignMessageVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SignMessageVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SignMessageData, variables: SignMessageVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SignMessageData, error: SignMessageErrorType, variables: SignMessageVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SignMessageErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SignMessageErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: SignMessageVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SignMessageVariables",
            "The variables object to pass to the signMessage action.",
            "(data: SignMessageData, variables: SignMessageVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SignMessageErrorType, variables: SignMessageVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SignMessageData | undefined, error: SignMessageErrorType | null, variables: SignMessageVariables, context: TContext | undefined) => void",
            "(variables: SignMessageVariables, { onSuccess, onSettled, onError }) => Promise<SignMessageData>",
            "Similar to signMessage but returns a promise which can be awaited.",
            "SignMessageData | undefined",
            "SignMessageErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SignMessageErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SignMessageVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSignTypedData",
        "title": "useSignTypedData ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for signing typed data and calculating an Ethereum-specific EIP-712 signature.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever signTypedData is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SignTypedDataErrorType, variables: SignTypedDataVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SignTypedDataVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SignTypedDataData, variables: SignTypedDataVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SignTypedDataData, error: SignTypedDataErrorType, variables: SignTypedDataVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SignTypedDataErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SignTypedDataErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: SignTypedDataVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SignTypedDataVariables",
            "The variables object to pass to the signTypedData action.",
            "(data: SignTypedDataData, variables: SignTypedDataVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SignTypedDataErrorType, variables: SignTypedDataVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SignTypedDataData | undefined, error: SignTypedDataErrorType | null, variables: SignTypedDataVariables, context: TContext | undefined) => void",
            "(variables: SignTypedDataVariables, { onSuccess, onSettled, onError }) => Promise<SignTypedDataData>",
            "Similar to signTypedData but returns a promise which can be awaited.",
            "SignTypedDataData | undefined",
            "SignTypedDataErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SignTypedDataErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SignTypedDataVariables | undefined",
            "With types setup correctly, TypeScript will infer the correct types for domain, message, and primaryType. See the Wagmi TypeScript docs for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSimulateContract",
        "title": "useSimulateContract ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for simulating/validating a contract interaction.",
            "Abi | undefined",
            "The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.",
            "AccessList | undefined",
            "The access list.",
            "Account | undefined",
            "Account to use when calling the contract (msg.sender). Throws if account is not found on connector.",
            "Address | undefined",
            "The contract's address.",
            "readonly unknown[] | undefined",
            "bigint | undefined",
            "Block number to call contract at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to call contract at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Connector | undefined",
            "Connector to simulate transaction with.",
            "`0x${string}` | undefined",
            "Data to append to the end of the calldata. Useful for adding a \"domain\" tag.",
            "string | undefined",
            "bigint | undefined",
            "Gas provided for transaction execution.",
            "bigint | undefined",
            "The price in wei to pay per gas. Only applies to Legacy Transactions.",
            "bigint | undefined",
            "Total fee per gas in wei, inclusive of maxPriorityFeePerGas. Only applies to EIP-1559 Transactions.",
            "bigint | undefined",
            "Max priority fee per gas in wei. Only applies to EIP-1559 Transactions.",
            "number",
            "Unique number identifying this transaction.",
            "'legacy' | 'eip1559' | 'eip2930' | undefined",
            "Optional transaction request type to narrow parameters.",
            "bigint | undefined",
            "Value in wei sent with this transaction.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "SimulateContractReturnType | (() => SimulateContractReturnType) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "SimulateContractReturnType | ((previousValue: SimulateContractReturnType | undefined; previousQuery: Query | undefined) => SimulateContractReturnType) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: SimulateContractReturnType | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: SimulateContractErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SimulateContractErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: SimulateContractReturnType) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: SimulateContractReturnType | undefined, newData: SimulateContractReturnType) => SimulateContractReturnType)) | undefined",
            "The return type's data property is inferrable via the combination of abi, functionName, and args. Check out the TypeScript docs for more info.",
            "TanStack Query query docs",
            "SimulateContractReturnType",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | SimulateContractErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | SimulateContractErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<SimulateContractReturnType, SimulateContractErrorType>>",
            "'error' | 'pending' | 'success'",
            "With abi setup correctly, TypeScript will infer the correct types for functionName, args, and value. See the Wagmi TypeScript docs for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useStorageAt",
        "title": "useStorageAt ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for for returning the value from a storage slot at a given address.",
            "Address | undefined",
            "The contract address.",
            "Hex | undefined",
            "The storage position (as a hex encoded value).",
            "bigint | undefined",
            "The block number to check the storage at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "The block tag to check the storage at.",
            "config['chains'][number]['id'] | undefined",
            "The chain ID to check the storage at.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetStorageAtData | (() => GetStorageAtData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetStorageAtData | ((previousValue: GetStorageAtData | undefined; previousQuery: Query | undefined) => GetStorageAtData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetStorageAtData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetStorageAtErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetStorageAtErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetStorageAtData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetStorageAtData | undefined, newData: GetStorageAtData) => GetStorageAtData)) | undefined",
            "TanStack Query query docs",
            "GetStorageAtData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetStorageAtErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetStorageAtErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetStorageAtData, GetStorageAtErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSwitchAccount",
        "title": "useSwitchAccount ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for switching the current account.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever switchAccount is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SwitchAccountErrorType, variables: SwitchAccountVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SwitchAccountVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SwitchAccountData, variables: SwitchAccountVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SwitchAccountData, error: SwitchAccountErrorType, variables: SwitchAccountVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SwitchAccountErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SwitchAccountErrorType) => number) | undefined",
            "readonly Connector[]",
            "Globally configured and actively connected connectors. Useful for rendering a list of available connectors to switch to.",
            "TanStack Query mutation docs",
            "(variables: SwitchAccountVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SwitchAccountVariables",
            "The variables object to pass to the switchAccount action.",
            "(data: SwitchAccountData, variables: SwitchAccountVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SwitchAccountErrorType, variables: SwitchAccountVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SwitchAccountData | undefined, error: SwitchAccountErrorType | null, variables: SwitchAccountVariables, context: TContext | undefined) => void",
            "(variables: SwitchAccountVariables, { onSuccess, onSettled, onError }) => Promise<SwitchAccountData>",
            "Similar to switchAccount but returns a promise which can be awaited.",
            "SwitchAccountData | undefined",
            "SwitchAccountErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SwitchAccountErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SwitchAccountVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSwitchChain",
        "title": "useSwitchChain ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for switching the target chain for a connector or the Wagmi Config.",
            "TIP",
            "When connected, switchChain will switch the target chain for the connector. When not connected, switchChain will switch the target chain for the Wagmi Config.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever switchChain is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SwitchChainErrorType, variables: SwitchChainVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SwitchChainVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SwitchChainData, variables: SwitchChainVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SwitchChainData, error: SwitchChainErrorType, variables: SwitchChainVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SwitchChainErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SwitchChainErrorType) => number) | undefined",
            "readonly [Chain, ...Chain[]]",
            "Globally configured chains. Useful for rendering a list of available chains to switch to.",
            "TanStack Query mutation docs",
            "(variables: SwitchChainVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SwitchChainVariables",
            "The variables object to pass to the switchChain action.",
            "(data: SwitchChainData, variables: SwitchChainVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SwitchChainErrorType, variables: SwitchChainVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SwitchChainData | undefined, error: SwitchChainErrorType | null, variables: SwitchChainVariables, context: TContext | undefined) => void",
            "(variables: SwitchChainVariables, { onSuccess, onSettled, onError }) => Promise<SwitchChainData>",
            "Similar to switchChain but returns a promise which can be awaited.",
            "SwitchChainData | undefined",
            "SwitchChainErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SwitchChainErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SwitchChainVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useTransaction",
        "title": "useTransaction ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching transactions given hashes or block identifiers.",
            "bigint | undefined",
            "Block hash to get transaction at (with index).",
            "bigint | undefined",
            "Block number to get transaction at (with index).",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get transaction at (with index).",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "`0x${string}` | undefined",
            "Hash to get transaction. enabled set to false if hash and index are undefined.",
            "number | undefined",
            "An index to be used with a block identifier (hash, number, or tag). enabled set to false if index and hash are undefined.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetTransactionData | (() => GetTransactionData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetTransactionData | ((previousValue: GetTransactionData | undefined; previousQuery: Query | undefined) => GetTransactionData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetTransactionData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetTransactionErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetTransactionErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetTransactionData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetTransactionData | undefined, newData: GetTransactionData) => GetTransactionData)) | undefined",
            "TanStack Query query docs",
            "GetTransactionData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetTransactionErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetTransactionErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetTransactionData, GetTransactionErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useTransactionConfirmations",
        "title": "useTransactionConfirmations ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching the number of blocks passed (confirmations) since the transaction was processed on a block. If confirmations is 0, then the Transaction has not been confirmed & processed yet.",
            "`0x${string}` | undefined",
            "The hash of the transaction.",
            "TransactionReceipt | undefined",
            "The transaction receipt.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetTransactionConfirmationsData | (() => GetTransactionConfirmationsData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetTransactionConfirmationsData | ((previousValue: GetTransactionConfirmationsData | undefined; previousQuery: Query | undefined) => GetTransactionConfirmationsData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetTransactionConfirmationsData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetTransactionConfirmationsErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetTransactionConfirmationsErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetTransactionConfirmationsData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetTransactionConfirmationsData | undefined, newData: GetTransactionConfirmationsData) => GetTransactionConfirmationsData)) | undefined",
            "TanStack Query query docs",
            "GetTransactionConfirmationsData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetTransactionConfirmationsErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetTransactionConfirmationsErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetTransactionConfirmationsData, GetTransactionConfirmationsErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useTransactionCount",
        "title": "useTransactionCount ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching the number of transactions an Account has sent.",
            "Address | undefined",
            "Address to get the transaction count for. enabled set to false if address is undefined.",
            "bigint | undefined",
            "Block number to get the transaction count at.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to get the transaction count at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "number | (() => number) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "number | ((previousValue: number | undefined; previousQuery: Query | undefined) => number) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: number | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetTransactionCountErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetTransactionCountErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: number) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: number | undefined, newData: number) => number)) | undefined",
            "TanStack Query query docs",
            "number",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetTransactionCountErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetTransactionCountErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<number, GetTransactionCountErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useTransactionReceipt",
        "title": "useTransactionReceipt ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for return the Transaction Receipt given a Transaction hash.",
            "`0x${string}` | undefined",
            "A transaction hash.",
            "config['chains'][number]['id'] | undefined",
            "The ID of chain to return the transaction receipt from.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetTransactionReceiptData | (() => GetTransactionReceiptData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetTransactionReceiptData | ((previousValue: GetTransactionReceiptData | undefined; previousQuery: Query | undefined) => GetTransactionReceiptData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetTransactionReceiptData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetTransactionReceiptErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetTransactionReceiptErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetTransactionReceiptData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetTransactionReceiptData | undefined, newData: GetTransactionReceiptData) => GetTransactionReceiptData)) | undefined",
            "TanStack Query query docs",
            "GetTransactionReceiptData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetTransactionReceiptErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetTransactionReceiptErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetTransactionReceiptData, GetTransactionReceiptErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useToken",
        "title": "useToken deprecated ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for fetching token info.",
            "Address | undefined",
            "Address to get token for. enabled set to false if address is undefined.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "'ether' | 'gwei' | 'wei' | number | undefined",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "{ address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; } | (() => { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "{ address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; } | ((previousValue: { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; } | undefined; previousQuery: Query | undefined) => { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; } | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetTokenErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetTokenErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; } | undefined, newData: { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }) => { address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; })) | undefined",
            "TanStack Query query docs",
            "{ address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetTokenErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetTokenErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<{ address: Address; decimals: number; name: string | undefined; symbol: string | undefined; totalSupply: { formatted: string; value: bigint; }; }, GetTokenErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt",
        "title": "useWaitForTransactionReceipt ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that waits for the transaction to be included on a block, and then returns the transaction receipt. If the transaction reverts, then the action will throw an error. Replacement detection (e.g. sped up transactions) is also supported.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "number | undefined",
            "The number of confirmations (blocks that have passed) to wait before resolving.",
            "(({ reason: 'replaced' | 'repriced' | 'cancelled'; replacedTransaction: Transaction; transaction: Transaction; transactionReceipt: TransactionReceipt }) => void) | undefined",
            "Optional callback to emit if the transaction has been replaced.",
            "number | undefined",
            "`0x${string}` | undefined",
            "The transaction hash to wait for. enabled set to false if hash is undefined.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "WaitForTransactionReceiptData | (() => WaitForTransactionReceiptData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "WaitForTransactionReceiptData | ((previousValue: WaitForTransactionReceiptData | undefined; previousQuery: Query | undefined) => WaitForTransactionReceiptData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: WaitForTransactionReceiptData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: WaitForTransactionReceiptErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: WaitForTransactionReceiptErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: WaitForTransactionReceiptData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: WaitForTransactionReceiptData | undefined, newData: WaitForTransactionReceiptData) => WaitForTransactionReceiptData)) | undefined",
            "TanStack Query query docs",
            "WaitForTransactionReceiptData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | WaitForTransactionReceiptErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | WaitForTransactionReceiptErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<WaitForTransactionReceiptData, WaitForTransactionReceiptErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useVerifyMessage",
        "title": "useVerifyMessage ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for verify that a message was signed by the provided address. It supports verifying messages that were signed by either a Smart Contract Account or Externally Owned Account.",
            "Address | undefined",
            "The Ethereum address that signed the original message.",
            "string | { raw: Hex | ByteArray } | undefined",
            "The message to be verified.",
            "By default, wagmi verifies the UTF-8 representation of the message.",
            "TIP",
            "By default, viem signs the UTF-8 representation of the message. To sign the data representation of the message, you can use the raw attribute.",
            "Hex | ByteArray | undefined",
            "The signature that was generated by signing the message with the address's signer.",
            "config['chains'][number]['id'] | undefined",
            "Only used when verifying a message that was signed by a Smart Contract Account. The ID of chain to check if the contract was already deployed.",
            "bigint | undefined",
            "Only used when verifying a message that was signed by a Smart Contract Account. The block number to check if the contract was already deployed.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Only used when verifying a message that was signed by a Smart Contract Account. The block tag to check if the contract was already deployed.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "VerifyMessageData | (() => VerifyMessageData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "VerifyMessageData | ((previousValue: VerifyMessageData | undefined; previousQuery: Query | undefined) => VerifyMessageData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: VerifyMessageData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: VerifyMessageErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: VerifyMessageErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: VerifyMessageData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: VerifyMessageData | undefined, newData: VerifyMessageData) => VerifyMessageData)) | undefined",
            "TanStack Query query docs",
            "VerifyMessageData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | VerifyMessageErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | VerifyMessageErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<VerifyMessageData, VerifyMessageErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useVerifyTypedData",
        "title": "useVerifyTypedData ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for verify that a typed data was signed by the provided address. It supports verifying typed data that were signed by either a Smart Contract Account or Externally Owned Account.",
            "Address | undefined",
            "The Ethereum address that signed the original typed data.",
            "TypedDataDomain | undefined",
            "The typed data domain.",
            "The type definitions for the typed data.",
            "string | undefined",
            "The primary type to extract from types and use in value.",
            "Type inferred from types & primaryType.",
            "The message to be verified.",
            "Hex | ByteArray | undefined",
            "The signature that was generated by signing the typed data with the address's signer.",
            "config['chains'][number]['id'] | undefined",
            "Only used when verifying a typed data that was signed by a Smart Contract Account. The ID of chain to check if the contract was already deployed.",
            "bigint | undefined",
            "Only used when verifying a typed data that was signed by a Smart Contract Account. The block number to check if the contract was already deployed.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Only used when verifying a typed data that was signed by a Smart Contract Account. The block tag to check if the contract was already deployed.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "VerifyTypedDataData | (() => VerifyTypedDataData) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "VerifyTypedDataData | ((previousValue: VerifyTypedDataData | undefined; previousQuery: Query | undefined) => VerifyTypedDataData) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: VerifyTypedDataData | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: VerifyTypedDataErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: VerifyTypedDataErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: VerifyTypedDataData) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: VerifyTypedDataData | undefined, newData: VerifyTypedDataData) => VerifyTypedDataData)) | undefined",
            "TanStack Query query docs",
            "VerifyTypedDataData",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | VerifyTypedDataErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | VerifyTypedDataErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<VerifyTypedDataData, VerifyTypedDataErrorType>>",
            "'error' | 'pending' | 'success'",
            "With types setup correctly, TypeScript will infer the correct types for domain, message, and primaryType. See the Wagmi TypeScript docs for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWalletClient",
        "title": "useWalletClient ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for getting a Viem WalletClient object for the current or provided connector.",
            "WARNING",
            "If you want to optimize bundle size, you should use useConnectorClient along with Viem's tree-shakable actions instead. Since Wallet Client has all wallet actions attached directly to it.",
            "Address | Account | undefined",
            "Account to use with client. Throws if account is not found on connector.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use with client.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Connector | undefined",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "WalletClient | (() => WalletClient) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "WalletClient | ((previousValue: WalletClient | undefined; previousQuery: Query | undefined) => WalletClient) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: WalletClient | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetWalletClientErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetWalletClientErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: WalletClient) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "boolean | (((oldData: WalletClient | undefined, newData: WalletClient) => WalletClient)) | undefined",
            "TanStack Query query docs",
            "WalletClient",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetWalletClientErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetWalletClientErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<WalletClient, GetWalletClientErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWatchAsset",
        "title": "useWatchAsset ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook for requesting user tracks the token in their wallet. Returns a boolean indicating if the token was successfully added.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever watchAsset is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: WatchAssetErrorType, variables: WatchAssetVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: WatchAssetVariables) => Promise<context | void> | context | void) | undefined",
            "((data: WatchAssetData, variables: WatchAssetVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: WatchAssetData, error: WatchAssetErrorType, variables: WatchAssetVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: WatchAssetErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: WatchAssetErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: WatchAssetVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "WatchAssetVariables",
            "The variables object to pass to the watchAsset action.",
            "(data: WatchAssetData, variables: WatchAssetVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: WatchAssetErrorType, variables: WatchAssetVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: WatchAssetData | undefined, error: WatchAssetErrorType | null, variables: WatchAssetVariables, context: TContext | undefined) => void",
            "(variables: WatchAssetVariables, { onSuccess, onSettled, onError }) => Promise<WatchAssetData>",
            "Similar to watchAsset but returns a promise which can be awaited.",
            "WatchAssetData | undefined",
            "WatchAssetErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "WatchAssetErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "WatchAssetVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWatchBlocks",
        "title": "useWatchBlocks ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that watches for block changes.",
            "'latest' | 'earliest' | 'pending' | 'safe' | 'finalized' | undefined",
            "Block tag to watch blocks at.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to watch blocks at.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "boolean",
            "Whether or not to emit missed blocks to the callback. Defaults to false.",
            "Missed blocks may occur in instances where internet connection is lost, or the block time is lesser than the polling interval of the client.",
            "boolean",
            "Whether or not to emit the block to the callback when the subscription opens. Defaults to false.",
            "boolean",
            "Whether or not to watch for blocks. Defaults to true.",
            "boolean",
            "Whether or not to unwrap transactions as objects (instead of hashes) in blocks. Defaults to false.",
            "(block: Block, prevblock: Block | undefined) => void",
            "Callback for when block changes.",
            "((error: Error) => void) | undefined",
            "Error thrown from getting the block.",
            "boolean | undefined",
            "number | undefined",
            "boolean | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWatchBlockNumber",
        "title": "useWatchBlockNumber ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that watches for block number changes.",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to watch blocks at.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "boolean",
            "Whether or not to emit missed blocks to the callback. Defaults to false.",
            "Missed blocks may occur in instances where internet connection is lost, or the block time is lesser than the polling interval of the client.",
            "boolean",
            "Whether or not to emit the block to the callback when the subscription opens. Defaults to false.",
            "boolean",
            "Whether or not to watch for blocks. Defaults to true.",
            "(block: Block, prevblock: Block | undefined) => void",
            "Callback for when block changes.",
            "((error: Error) => void) | undefined",
            "Error thrown from getting the block.",
            "boolean | undefined",
            "number | undefined",
            "boolean | undefined",
            "Function for cleaning up watcher.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWatchContractEvent",
        "title": "useWatchContractEvent ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that watches and returns emitted contract event logs.",
            "Abi",
            "The contract's ABI. Check out the TypeScript docs for how to set up ABIs for maximum type inference and safety.",
            "Address | undefined",
            "The contract's address.",
            "object | readonly unknown[] | undefined",
            "boolean | undefined",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "string",
            "((error: Error) => void) | undefined",
            "Error thrown from getting the block number.",
            "(logs: Log[], prevLogs: Log[] | undefined) => void",
            "Callback for when logs changes.",
            "boolean | undefined",
            "number | undefined",
            "boolean | undefined",
            "boolean | undefined",
            "Hook returns void",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWatchPendingTransactions",
        "title": "useWatchPendingTransactions ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that watches and returns pending transaction hashes.",
            "boolean | undefined",
            "config['chains'][number]['id'] | undefined",
            "ID of chain to use when fetching data.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "((error: Error) => void) | undefined",
            "Error thrown from watching pending transactions.",
            "(transactions: Hash[], prevTransactions: Hash[] | undefined) => void",
            "Callback when new incoming pending transactions are detected.",
            "boolean | undefined",
            "number | undefined",
            "boolean | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWriteContract",
        "title": "useWriteContract ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Action for executing a write function on a contract.",
            "A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, hence a transaction is broadcasted in order to change the state.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever writeContract is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: WriteContractErrorType, variables: WriteContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: WriteContractVariables) => Promise<context | void> | context | void) | undefined",
            "((data: WriteContractReturnType, variables: WriteContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: WriteContractReturnType, error: WriteContractErrorType, variables: WriteContractVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: WriteContractErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: WriteContractErrorType) => number) | undefined",
            "The return type's data property is inferrable via the combination of abi, functionName, and args. Check out the TypeScript docs for more info.",
            "TanStack Query mutation docs",
            "(variables: WriteContractVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "WriteContractVariables",
            "The variables object to pass to the writeContract action.",
            "(data: WriteContractReturnType, variables: WriteContractVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: WriteContractErrorType, variables: WriteContractVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: WriteContractReturnType | undefined, error: WriteContractErrorType | null, variables: WriteContractVariables, context: TContext | undefined) => void",
            "(variables: WriteContractVariables, { onSuccess, onSettled, onError }) => Promise<WriteContractReturnType>",
            "Similar to writeContract but returns a promise which can be awaited.",
            "WriteContractReturnType | undefined",
            "WriteContractErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "WriteContractErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "WriteContractVariables | undefined",
            "With abi setup correctly, TypeScript will infer the correct types for functionName, args, and the value. See the Wagmi TypeScript docs for more information.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/actions",
        "title": "Actions ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Sometimes the declarative nature of React Hooks doesn't work for parts of your app. For those cases, you can use Wagmi Core Actions directly!",
            "All the Wagmi Core Actions are importable using the wagmi/actions entrypoint. For example, you can use the watchBlockNumber action to watch for block number changes.",
            "See the Wagmi Core docs for more info on what actions are available.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/errors",
        "title": "Errors ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Error classes used by Wagmi.",
            "Error class extended by all errors.",
            "When an account does not exist on the connector or is unable to be used.",
            "When a connector is already connected.",
            "When the Wagmi Config is out-of-sync with the connector's active chain ID. This is rare and likely an upstream wallet issue.",
            "When a chain is not configured. You likely need to add the chain to Config['chains'].",
            "When a connector is not connected.",
            "When a connector is not found or able to be used.",
            "During the reconnection step, the only connector methods guaranteed to be available are: id, name, type, uuid. All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored. This error commonly occurs for connectors that asynchronously inject after reconnection has already started.",
            "When a connector's provider is not found or able to be used.",
            "When switching chains is not supported by connectors.",
            "When a Wagmi hook is used outside of a WagmiProvider.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/utilities/cookieToInitialState",
        "title": "cookieToInitialState ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Helper to convert a cookie string into initial state.",
            "Config",
            "Wagmi Config",
            "string | null | undefined",
            "The cookie string.",
            "State",
            "Initial state.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/utilities/deserialize",
        "title": "deserialize ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Deserialize function that supports bigint and Map.",
            "string",
            "The string to deserialize.",
            "(key: string, value: any) => any",
            "A custom reviver function for handling standard values.",
            "unknown",
            "Parsed value.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/utilities/normalizeChainId",
        "title": "normalizeChainId ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Normalizes a chain ID to a number.",
            "Deprecated",
            "Use Number instead.",
            "bigint | number | string",
            "The chain ID to normalize.",
            "number",
            "The normalized chain ID.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/utilities/serialize",
        "title": "serialize ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Serialize function that supports bigint and Map.",
            "any",
            "The value to stringify.",
            "(key: string, value: any) => any",
            "A custom replacer function for handling standard values.",
            "number | null | undefined",
            "The number of spaces to indent the output by.",
            "A custom replacer function for handling circular values.",
            "string",
            "Stringified value.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useCallsStatus",
        "title": "useCallsStatus ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook to fetch the status and receipts of a call batch that was sent via useSendCalls.",
            "WARNING",
            "This is an experimental action that is not supported in most wallets. It is recommended to have a fallback mechanism if using this in production.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Connector | undefined",
            "Connector to get call statuses with.",
            "string",
            "Identifier of the call batch.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetCallsStatusReturnType | (() => GetCallsStatusReturnType) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetCallsStatusReturnType | ((previousValue: GetCallsStatusReturnType | undefined; previousQuery: Query | undefined) => GetCallsStatusReturnType) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetCallsStatusReturnType | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetCallsStatusErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetCallsStatusErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetCallsStatusReturnType) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetCallsStatusReturnType | undefined, newData: GetCallsStatusReturnType) => GetCallsStatusReturnType)) | undefined",
            "TanStack Query query docs",
            "GetCallsStatusReturnType",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetCallsStatusErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetCallsStatusErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetCallsStatusReturnType, GetCallsStatusErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useCapabilities",
        "title": "useCapabilities ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook to extract capabilities (grouped by chain ID) that a connected wallet supports (e.g. paymasters, session keys, etc).",
            "Read more.",
            "WARNING",
            "This is an experimental Hook that is not supported in most wallets. It is recommended to have a fallback mechanism if using this in production.",
            "Account | Address | undefined",
            "Fetch capabilities for the provided account.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "Connector | undefined",
            "Connector to get call statuses with.",
            "string | undefined",
            "Scopes the cache to a given context. Hooks that have identical context will share the same cache.",
            "TanStack Query parameters. See the TanStack Query query docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like queryFn and queryKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "boolean | undefined",
            "number | Infinity | undefined",
            "GetCapabilitiesReturnType | (() => GetCapabilitiesReturnType) | undefined",
            "number | ((() => number | undefined)) | undefined",
            "If set, this value will be used as the time (in milliseconds) of when the initialData itself was last updated.",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the query cache entry that can be used as needed. It will be accessible wherever the query is available, and is also part of the QueryFunctionContext provided to the queryFn.",
            "online' | 'always' | 'offlineFirst' | undefined",
            "string[] | 'all' | (() => string[] | 'all') | undefined",
            "GetCapabilitiesReturnType | ((previousValue: GetCapabilitiesReturnType | undefined; previousQuery: Query | undefined) => GetCapabilitiesReturnType) | undefined",
            "QueryClient | undefined",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "number | false | ((data: GetCapabilitiesReturnType | undefined, query: Query) => number | false | undefined) | undefined",
            "boolean | undefined",
            "If set to true, queries that are set to continuously refetch with a refetchInterval will continue to refetch while their tab/window is in the background",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | 'always' | ((query: Query) => boolean | 'always') | undefined",
            "boolean | number | ((failureCount: number, error: GetCapabilitiesErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: GetCapabilitiesErrorType) => number) | undefined",
            "boolean | undefined",
            "If set to false, the query will not be retried on mount if it contains an error. Defaults to true.",
            "((data: GetCapabilitiesReturnType) => unknown) | undefined",
            "This option can be used to transform or select a part of the data returned by the query function. It affects the returned data value, but does not affect what gets stored in the query cache.",
            "number | Infinity | undefined",
            "boolean | (((oldData: GetCapabilitiesReturnType | undefined, newData: GetCapabilitiesReturnType) => GetCapabilitiesReturnType)) | undefined",
            "TanStack Query query docs",
            "GetCapabilitiesReturnType",
            "number",
            "The timestamp for when the query most recently returned the status as 'success'.",
            "null | GetCapabilitiesErrorType",
            "number",
            "The timestamp for when the query most recently returned the status as 'error'.",
            "number",
            "The sum of all errors.",
            "number",
            "null | GetCapabilitiesErrorType",
            "'fetching' | 'idle' | 'paused'",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "Will be true if the query has been fetched.",
            "boolean",
            "boolean",
            "Boolean variables derived from fetchStatus.",
            "boolean",
            "boolean",
            "Will be true if the query failed while fetching for the first time.",
            "boolean",
            "Will be true if the data shown is the placeholder data.",
            "boolean",
            "Will be true if the query failed while refetching.",
            "boolean",
            "boolean",
            "Will be true if the data in the cache is invalidated or if the data is older than the given staleTime.",
            "(options: { cancelRefetch?: boolean | undefined; throwOnError?: boolean | undefined }) => Promise<UseQueryResult<GetCapabilitiesReturnType, GetCapabilitiesErrorType>>",
            "'error' | 'pending' | 'success'",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useSendCalls",
        "title": "useSendCalls ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that requests for the wallet to sign and broadcast a batch of calls (transactions) to the network.",
            "Read more.",
            "WARNING",
            "This is an experimental Hook that is not supported in most wallets. It is recommended to have a fallback mechanism if using this in production.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever sendCalls is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: SendCallsErrorType, variables: SendCallsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: SendCallsVariables) => Promise<context | void> | context | void) | undefined",
            "((data: SendCallsData, variables: SendCallsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: SendCallsData, error: SendCallsErrorType, variables: SendCallsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: SendCallsErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: SendCallsErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: SendCallsVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "SendCallsVariables",
            "The variables object to pass to the sendCalls action.",
            "(data: SendCallsData, variables: SendCallsVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: SendCallsErrorType, variables: SendCallsVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: SendCallsData | undefined, error: SendCallsErrorType | null, variables: SendCallsVariables, context: TContext | undefined) => void",
            "(variables: SendCallsVariables, { onSuccess, onSettled, onError }) => Promise<SendCallsData>",
            "Similar to sendCalls but returns a promise which can be awaited.",
            "SendCallsData | undefined",
            "SendCallsErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "SendCallsErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "SendCallsVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useShowCallsStatus",
        "title": "useShowCallsStatus ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Action to request for the wallet to show information about a call batch that was sent via useShowCalls.",
            "Read more.",
            "WARNING",
            "This is an experimental action that is not supported in most wallets. It is recommended to have a fallback mechanism if using this in production.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever showCallsStatus is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: ShowCallsStatusErrorType, variables: ShowCallsStatusVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: ShowCallsStatusVariables) => Promise<context | void> | context | void) | undefined",
            "((data: ShowCallsStatusData, variables: ShowCallsStatusVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: ShowCallsStatusData, error: ShowCallsStatusErrorType, variables: ShowCallsStatusVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: ShowCallsStatusErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: ShowCallsStatusErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: ShowCallsStatusVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "ShowCallsStatusVariables",
            "The variables object to pass to the showCallsStatus action.",
            "(data: ShowCallsStatusData, variables: ShowCallsStatusVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: ShowCallsStatusErrorType, variables: ShowCallsStatusVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: ShowCallsStatusData | undefined, error: ShowCallsStatusErrorType | null, variables: ShowCallsStatusVariables, context: TContext | undefined) => void",
            "(variables: ShowCallsStatusVariables, { onSuccess, onSettled, onError }) => Promise<ShowCallsStatusData>",
            "Similar to showCallsStatus but returns a promise which can be awaited.",
            "ShowCallsStatusData | undefined",
            "ShowCallsStatusErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "ShowCallsStatusErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "ShowCallsStatusVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/api/hooks/useWriteContracts",
        "title": "useWriteContracts ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Hook that requests for the wallet to sign and broadcast a batch of write contract calls (transactions) to the network.",
            "Read more.",
            "WARNING",
            "This is an experimental Hook that is not supported in most wallets. It is recommended to have a fallback mechanism if using this in production.",
            "Config | undefined",
            "Config to use instead of retrieving from the nearest WagmiProvider.",
            "TanStack Query parameters. See the TanStack Query mutation docs for more info.",
            "Wagmi does not support passing all TanStack Query parameters",
            "TanStack Query parameters, like mutationFn and mutationKey, are used internally to make Wagmi work and you cannot override them. Check out the source to see what parameters are not supported. All parameters listed below are supported.",
            "number | Infinity | undefined",
            "Record<string, unknown> | undefined",
            "If set, stores additional information on the mutation cache entry that can be used as needed. It will be accessible wherever writeContracts is available (e.g. onError, onSuccess functions).",
            "'online' | 'always' | 'offlineFirst' | undefined",
            "((error: WriteContractsErrorType, variables: WriteContractsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "((variables: WriteContractsVariables) => Promise<context | void> | context | void) | undefined",
            "((data: WriteContractsData, variables: WriteContractsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "((data: WriteContractsData, error: WriteContractsErrorType, variables: WriteContractsVariables, context?: context | undefined) => Promise<unknown> | unknown) | undefined",
            "This function will fire when the mutation is either successfully fetched or encounters an error and be passed either the data or error",
            "QueryClient",
            "Use this to use a custom QueryClient. Otherwise, the one from the nearest context will be used.",
            "boolean | number | ((failureCount: number, error: WriteContractsErrorType) => boolean) | undefined",
            "number | ((retryAttempt: number, error: WriteContractsErrorType) => number) | undefined",
            "TanStack Query mutation docs",
            "(variables: WriteContractsVariables, { onSuccess, onSettled, onError }) => void",
            "The mutation function you can call with variables to trigger the mutation and optionally hooks on additional callback options.",
            "WriteContractsVariables",
            "The variables object to pass to the writeContracts action.",
            "(data: WriteContractsData, variables: WriteContractsVariables, context: TContext) => void",
            "This function will fire when the mutation is successful and will be passed the mutation's result.",
            "(error: WriteContractsErrorType, variables: WriteContractsVariables, context: TContext | undefined) => void",
            "This function will fire if the mutation encounters an error and will be passed the error.",
            "(data: WriteContractsData | undefined, error: WriteContractsErrorType | null, variables: WriteContractsVariables, context: TContext | undefined) => void",
            "(variables: WriteContractsVariables, { onSuccess, onSettled, onError }) => Promise<WriteContractsData>",
            "Similar to writeContracts but returns a promise which can be awaited.",
            "WriteContractsData | undefined",
            "WriteContractsErrorType | null",
            "The error object for the mutation, if an error was encountered.",
            "number",
            "WriteContractsErrorType | null",
            "boolean",
            "Boolean variables derived from status.",
            "boolean",
            "() => void",
            "A function to clean the mutation internal state (e.g. it resets the mutation to its initial state).",
            "'idle' | 'pending' | 'error' | 'success'",
            "number",
            "WriteContractsVariables | undefined",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/installation",
        "title": "Installation ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Install Wagmi via your package manager, a <script> tag, or build from source.",
            "Install the required packages.",
            "If you're not using a package manager, you can also use Wagmi via an ESM-compatible CDN such as esm.sh. Simply add a <script type=\"module\"> tag to the bottom of your HTML file with the following content.",
            "Check out the React docs for info on how to use React without JSX.",
            "Wagmi is optimized for modern browsers. It is compatible with the latest versions of the following browsers.",
            "TIP",
            "Depending on your environment, you might need to add polyfills. See Viem Platform Compatibility for more info.",
            "If you can't wait for a new release to test the latest features, you can either install from the canary tag (tracks the main branch).",
            "Or clone the Wagmi repo to your local machine, build, and link it yourself.",
            "Then go to the project where you are using Wagmi and run pnpm link --global wagmi (or the package manager that you used to link Wagmi globally). Make sure you installed any required peer dependencies and their versions are correct.",
            "Ethereum-related projects are often targeted in attacks to steal users' assets. Make sure you follow security best-practices for your project. Some quick things to get started.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    },
    {
        "url": "https://wagmi.sh/react/typescript",
        "title": "TypeScript ​",
        "content": [
            "Appearance",
            "Why Wagmi",
            "Installation",
            "Getting Started",
            "TypeScript",
            "Comparisons",
            "TanStack Query",
            "Viem",
            "Error Handling",
            "Ethers.js Adapters",
            "Chain Properties",
            "SSR",
            "Connect Wallet",
            "Send Transaction",
            "Read from Contract",
            "Write to Contract",
            "FAQ / Troubleshooting",
            "Migrate from v1 to v2",
            "createConfig",
            "createStorage",
            "Chains",
            "coinbaseWallet",
            "injected",
            "metaMask",
            "mock",
            "safe",
            "walletConnect",
            "custom (EIP-1193)",
            "fallback",
            "http",
            "unstable_connector",
            "webSocket",
            "WagmiProvider",
            "useAccount",
            "useAccountEffect",
            "useBalance",
            "useBlockNumber",
            "useBlock",
            "useBlockTransactionCount",
            "useBytecode",
            "useCall",
            "useChainId",
            "useChains",
            "useClient",
            "useConfig",
            "useConnect",
            "useConnections",
            "useConnectorClient",
            "useConnectors",
            "useDeployContract",
            "useDisconnect",
            "useEnsAddress",
            "useEnsAvatar",
            "useEnsName",
            "useEnsResolver",
            "useEnsText",
            "useFeeHistory",
            "useProof",
            "usePublicClient",
            "useEstimateFeesPerGas",
            "useEstimateGas",
            "useEstimateMaxPriorityFeePerGas",
            "useGasPrice",
            "useInfiniteReadContracts",
            "usePrepareTransactionRequest",
            "useReadContract",
            "useReadContracts",
            "useReconnect",
            "useSendTransaction",
            "useSignMessage",
            "useSignTypedData",
            "useSimulateContract",
            "useStorageAt",
            "useSwitchAccount",
            "useSwitchChain",
            "useTransaction",
            "useTransactionConfirmations",
            "useTransactionCount",
            "useTransactionReceipt",
            "useToken",
            "useWaitForTransactionReceipt",
            "useVerifyMessage",
            "useVerifyTypedData",
            "useWalletClient",
            "useWatchAsset",
            "useWatchBlocks",
            "useWatchBlockNumber",
            "useWatchContractEvent",
            "useWatchPendingTransactions",
            "useWriteContract",
            "Actions",
            "Errors",
            "cookieToInitialState",
            "deserialize",
            "normalizeChainId",
            "serialize",
            "useCallsStatus",
            "useCapabilities",
            "useSendCalls",
            "useShowCallsStatus",
            "useWriteContracts",
            "Wagmi is designed to be as type-safe as possible! Things to keep in mind:",
            "To ensure everything works correctly, make sure your tsconfig.json has strict mode set to true.",
            "By default React Context does not work well with type inference. To support strong type-safety across the React Context boundary, there are two options available:",
            "Declaration merging allows you to \"register\" your config globally with TypeScript. The Register type enables Wagmi to infer types in places that wouldn't normally have access to type info via React Context alone.",
            "To set this up, add the following declaration to your project. Below, we co-locate the declaration merging and the config set up.",
            "Since the Register type is global, you only need to add it once in your project. Once set up, you will get strong type-safety across your entire project. For example, query hooks will type chainId based on your config's chains.",
            "You just saved yourself a runtime error and you didn't even need to pass your config. 🎉",
            "For cases where you have more than one Wagmi config or don't want to use the declaration merging approach, you can pass a specific config directly to hooks via the config property.",
            "As you expect, chainId is inferred correctly for each config.",
            "This approach is more explicit, but works well for advanced use-cases, if you don't want to use React Context or declaration merging, etc.",
            "Wagmi can infer types based on ABIs and EIP-712 Typed Data definitions, powered by Viem and ABIType. This achieves full end-to-end type-safety from your contracts to your frontend and enlightened developer experience by autocompleting ABI item names, catching misspellings, inferring argument and return types (including overloads), and more.",
            "For this to work, you must either const-assert ABIs and Typed Data (more info below) or define them inline. For example, useReadContract's abi configuration parameter:",
            "If type inference isn't working, it's likely you forgot to add a const assertion or define the configuration parameter inline. Also, make sure your ABIs, Typed Data definitions, and TypeScript configuration are valid and set up correctly.",
            "TIP",
            "Unfortunately TypeScript doesn't support importing JSON as const yet. Check out the Wagmi CLI to help with this! It can automatically fetch ABIs from Etherscan and other block explorers, resolve ABIs from your Foundry/Hardhat projects, generate React Hooks, and more.",
            "Anywhere you see the abi or types configuration property, you can likely use const-asserted or inline ABIs and Typed Data to get type-safety and inference. These properties are also called out in the docs.",
            "Here's what useReadContract looks like with and without a const-asserted abi property.",
            "You can prevent runtime errors and be more productive by making sure your ABIs and Typed Data definitions are set up appropriately. 🎉",
            "For advanced use-cases, you may want to configure Wagmi's internal types. Most of Wagmi's types relating to ABIs and EIP-712 Typed Data are powered by ABIType. See the ABIType docs for more info on how to configure types.",
            "Last updated: ",
            "Released under the MIT License.",
            "Copyright © 2022-present Weth, LLC"
        ]
    }
]