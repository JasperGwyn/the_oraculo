/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turnkey";
exports.ids = ["vendor-chunks/@turnkey"];
exports.modules = {

/***/ "(ssr)/../node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.esm.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AddressLookupTableAccount: () => (/* binding */ AddressLookupTableAccount),\n/* harmony export */   AddressLookupTableInstruction: () => (/* binding */ AddressLookupTableInstruction),\n/* harmony export */   AddressLookupTableProgram: () => (/* binding */ AddressLookupTableProgram),\n/* harmony export */   Authorized: () => (/* binding */ Authorized),\n/* harmony export */   BLOCKHASH_CACHE_TIMEOUT_MS: () => (/* binding */ BLOCKHASH_CACHE_TIMEOUT_MS),\n/* harmony export */   BPF_LOADER_DEPRECATED_PROGRAM_ID: () => (/* binding */ BPF_LOADER_DEPRECATED_PROGRAM_ID),\n/* harmony export */   BPF_LOADER_PROGRAM_ID: () => (/* binding */ BPF_LOADER_PROGRAM_ID),\n/* harmony export */   BpfLoader: () => (/* binding */ BpfLoader),\n/* harmony export */   COMPUTE_BUDGET_INSTRUCTION_LAYOUTS: () => (/* binding */ COMPUTE_BUDGET_INSTRUCTION_LAYOUTS),\n/* harmony export */   ComputeBudgetInstruction: () => (/* binding */ ComputeBudgetInstruction),\n/* harmony export */   ComputeBudgetProgram: () => (/* binding */ ComputeBudgetProgram),\n/* harmony export */   Connection: () => (/* binding */ Connection),\n/* harmony export */   Ed25519Program: () => (/* binding */ Ed25519Program),\n/* harmony export */   Enum: () => (/* binding */ Enum),\n/* harmony export */   EpochSchedule: () => (/* binding */ EpochSchedule),\n/* harmony export */   FeeCalculatorLayout: () => (/* binding */ FeeCalculatorLayout),\n/* harmony export */   Keypair: () => (/* binding */ Keypair),\n/* harmony export */   LAMPORTS_PER_SOL: () => (/* binding */ LAMPORTS_PER_SOL),\n/* harmony export */   LOOKUP_TABLE_INSTRUCTION_LAYOUTS: () => (/* binding */ LOOKUP_TABLE_INSTRUCTION_LAYOUTS),\n/* harmony export */   Loader: () => (/* binding */ Loader),\n/* harmony export */   Lockup: () => (/* binding */ Lockup),\n/* harmony export */   MAX_SEED_LENGTH: () => (/* binding */ MAX_SEED_LENGTH),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageAccountKeys: () => (/* binding */ MessageAccountKeys),\n/* harmony export */   MessageV0: () => (/* binding */ MessageV0),\n/* harmony export */   NONCE_ACCOUNT_LENGTH: () => (/* binding */ NONCE_ACCOUNT_LENGTH),\n/* harmony export */   NonceAccount: () => (/* binding */ NonceAccount),\n/* harmony export */   PACKET_DATA_SIZE: () => (/* binding */ PACKET_DATA_SIZE),\n/* harmony export */   PUBLIC_KEY_LENGTH: () => (/* binding */ PUBLIC_KEY_LENGTH),\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey),\n/* harmony export */   SIGNATURE_LENGTH_IN_BYTES: () => (/* binding */ SIGNATURE_LENGTH_IN_BYTES),\n/* harmony export */   SOLANA_SCHEMA: () => (/* binding */ SOLANA_SCHEMA),\n/* harmony export */   STAKE_CONFIG_ID: () => (/* binding */ STAKE_CONFIG_ID),\n/* harmony export */   STAKE_INSTRUCTION_LAYOUTS: () => (/* binding */ STAKE_INSTRUCTION_LAYOUTS),\n/* harmony export */   SYSTEM_INSTRUCTION_LAYOUTS: () => (/* binding */ SYSTEM_INSTRUCTION_LAYOUTS),\n/* harmony export */   SYSVAR_CLOCK_PUBKEY: () => (/* binding */ SYSVAR_CLOCK_PUBKEY),\n/* harmony export */   SYSVAR_EPOCH_SCHEDULE_PUBKEY: () => (/* binding */ SYSVAR_EPOCH_SCHEDULE_PUBKEY),\n/* harmony export */   SYSVAR_INSTRUCTIONS_PUBKEY: () => (/* binding */ SYSVAR_INSTRUCTIONS_PUBKEY),\n/* harmony export */   SYSVAR_RECENT_BLOCKHASHES_PUBKEY: () => (/* binding */ SYSVAR_RECENT_BLOCKHASHES_PUBKEY),\n/* harmony export */   SYSVAR_RENT_PUBKEY: () => (/* binding */ SYSVAR_RENT_PUBKEY),\n/* harmony export */   SYSVAR_REWARDS_PUBKEY: () => (/* binding */ SYSVAR_REWARDS_PUBKEY),\n/* harmony export */   SYSVAR_SLOT_HASHES_PUBKEY: () => (/* binding */ SYSVAR_SLOT_HASHES_PUBKEY),\n/* harmony export */   SYSVAR_SLOT_HISTORY_PUBKEY: () => (/* binding */ SYSVAR_SLOT_HISTORY_PUBKEY),\n/* harmony export */   SYSVAR_STAKE_HISTORY_PUBKEY: () => (/* binding */ SYSVAR_STAKE_HISTORY_PUBKEY),\n/* harmony export */   Secp256k1Program: () => (/* binding */ Secp256k1Program),\n/* harmony export */   SendTransactionError: () => (/* binding */ SendTransactionError),\n/* harmony export */   SolanaJSONRPCError: () => (/* binding */ SolanaJSONRPCError),\n/* harmony export */   SolanaJSONRPCErrorCode: () => (/* binding */ SolanaJSONRPCErrorCode),\n/* harmony export */   StakeAuthorizationLayout: () => (/* binding */ StakeAuthorizationLayout),\n/* harmony export */   StakeInstruction: () => (/* binding */ StakeInstruction),\n/* harmony export */   StakeProgram: () => (/* binding */ StakeProgram),\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   SystemInstruction: () => (/* binding */ SystemInstruction),\n/* harmony export */   SystemProgram: () => (/* binding */ SystemProgram),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   TransactionExpiredBlockheightExceededError: () => (/* binding */ TransactionExpiredBlockheightExceededError),\n/* harmony export */   TransactionExpiredNonceInvalidError: () => (/* binding */ TransactionExpiredNonceInvalidError),\n/* harmony export */   TransactionExpiredTimeoutError: () => (/* binding */ TransactionExpiredTimeoutError),\n/* harmony export */   TransactionInstruction: () => (/* binding */ TransactionInstruction),\n/* harmony export */   TransactionMessage: () => (/* binding */ TransactionMessage),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   VALIDATOR_INFO_KEY: () => (/* binding */ VALIDATOR_INFO_KEY),\n/* harmony export */   VERSION_PREFIX_MASK: () => (/* binding */ VERSION_PREFIX_MASK),\n/* harmony export */   VOTE_PROGRAM_ID: () => (/* binding */ VOTE_PROGRAM_ID),\n/* harmony export */   ValidatorInfo: () => (/* binding */ ValidatorInfo),\n/* harmony export */   VersionedMessage: () => (/* binding */ VersionedMessage),\n/* harmony export */   VersionedTransaction: () => (/* binding */ VersionedTransaction),\n/* harmony export */   VoteAccount: () => (/* binding */ VoteAccount),\n/* harmony export */   VoteAuthorizationLayout: () => (/* binding */ VoteAuthorizationLayout),\n/* harmony export */   VoteInit: () => (/* binding */ VoteInit),\n/* harmony export */   VoteInstruction: () => (/* binding */ VoteInstruction),\n/* harmony export */   VoteProgram: () => (/* binding */ VoteProgram),\n/* harmony export */   clusterApiUrl: () => (/* binding */ clusterApiUrl),\n/* harmony export */   sendAndConfirmRawTransaction: () => (/* binding */ sendAndConfirmRawTransaction),\n/* harmony export */   sendAndConfirmTransaction: () => (/* binding */ sendAndConfirmTransaction)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"(ssr)/../node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ \"(ssr)/../node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"(ssr)/../node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! borsh */ \"(ssr)/../node_modules/borsh/lib/index.js\");\n/* harmony import */ var borsh__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(borsh__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @solana/buffer-layout */ \"(ssr)/../node_modules/@solana/buffer-layout/lib/Layout.js\");\n/* harmony import */ var bigint_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bigint-buffer */ \"(ssr)/../node_modules/bigint-buffer/dist/node.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var superstruct__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! superstruct */ \"(ssr)/../node_modules/superstruct/dist/index.mjs\");\n/* harmony import */ var jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jayson/lib/client/browser */ \"(ssr)/../node_modules/jayson/lib/client/browser/index.js\");\n/* harmony import */ var jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! node-fetch */ \"(ssr)/../node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var rpc_websockets__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rpc-websockets */ \"(ssr)/../node_modules/rpc-websockets/dist/index.mjs\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/../node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/../node_modules/@noble/curves/esm/secp256k1.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_12__.ed25519.verify;\n\nconst toBuffer = arr => {\n  if (buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,borsh__WEBPACK_IMPORTED_MODULE_3__.serialize)(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return (0,borsh__WEBPACK_IMPORTED_MODULE_3__.deserialize)(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return (0,borsh__WEBPACK_IMPORTED_MODULE_3__.deserializeUnchecked)(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(decoded);\n      } else {\n        this._bn = new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([fromPublicKey.toBuffer(), buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_13__.sha256)(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer, programId.toBuffer(), buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_13__.sha256)(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('length'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('lengthPadding'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32().span + _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32().span + buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('unixTimestamp'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(PACKET_DATA_SIZE);\n    buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('programIdIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(instruction.dataLength.length, 'dataLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(1, 'numRequiredSignatures'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(1, 'numReadonlySignedAccounts'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(1, 'numReadonlyUnsignedAccounts'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(keyCount.length, 'keyCount'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(this.recentBlockhash)\n    };\n    let signData = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('prefix'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('numRequiredSignatures'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('numReadonlySignedAccounts'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('numReadonlyUnsignedAccounts')], 'header'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedInstructionsLength.length, 'instructionsLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(serializedInstructions.length, 'serializedInstructions'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('programIdIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedDataLength.length, 'encodedDataLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([publicKey('accountKey'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(), lookup.writableIndexes.length, 'writableIndexes'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(DEFAULT_SIGNATURE) ? null : bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(signature(), this.signatures.length, 'signatures'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('version'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = (0,_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob)(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return (0,bigint_buffer__WEBPACK_IMPORTED_MODULE_5__.toBigIntLE)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = (0,bigint_buffer__WEBPACK_IMPORTED_MODULE_5__.toBufferLE)(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('base'), rustString('seed'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('base'), rustString('seed'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('offset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('bytesLength'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('bytesLengthPadding'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('byte'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')]);\n      const data = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar agentkeepalive = {exports: {}};\n\n/**\n * Helpers.\n */\n\nvar ms;\nvar hasRequiredMs;\n\nfunction requireMs () {\n\tif (hasRequiredMs) return ms;\n\thasRequiredMs = 1;\n\tvar s = 1000;\n\tvar m = s * 60;\n\tvar h = m * 60;\n\tvar d = h * 24;\n\tvar w = d * 7;\n\tvar y = d * 365.25;\n\n\t/**\n\t * Parse or format the given `val`.\n\t *\n\t * Options:\n\t *\n\t *  - `long` verbose formatting [false]\n\t *\n\t * @param {String|Number} val\n\t * @param {Object} [options]\n\t * @throws {Error} throw an error if val is not a non-empty string or a number\n\t * @return {String|Number}\n\t * @api public\n\t */\n\n\tms = function (val, options) {\n\t  options = options || {};\n\t  var type = typeof val;\n\t  if (type === 'string' && val.length > 0) {\n\t    return parse(val);\n\t  } else if (type === 'number' && isFinite(val)) {\n\t    return options.long ? fmtLong(val) : fmtShort(val);\n\t  }\n\t  throw new Error(\n\t    'val is not a non-empty string or a valid number. val=' +\n\t      JSON.stringify(val)\n\t  );\n\t};\n\n\t/**\n\t * Parse the given `str` and return milliseconds.\n\t *\n\t * @param {String} str\n\t * @return {Number}\n\t * @api private\n\t */\n\n\tfunction parse(str) {\n\t  str = String(str);\n\t  if (str.length > 100) {\n\t    return;\n\t  }\n\t  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n\t    str\n\t  );\n\t  if (!match) {\n\t    return;\n\t  }\n\t  var n = parseFloat(match[1]);\n\t  var type = (match[2] || 'ms').toLowerCase();\n\t  switch (type) {\n\t    case 'years':\n\t    case 'year':\n\t    case 'yrs':\n\t    case 'yr':\n\t    case 'y':\n\t      return n * y;\n\t    case 'weeks':\n\t    case 'week':\n\t    case 'w':\n\t      return n * w;\n\t    case 'days':\n\t    case 'day':\n\t    case 'd':\n\t      return n * d;\n\t    case 'hours':\n\t    case 'hour':\n\t    case 'hrs':\n\t    case 'hr':\n\t    case 'h':\n\t      return n * h;\n\t    case 'minutes':\n\t    case 'minute':\n\t    case 'mins':\n\t    case 'min':\n\t    case 'm':\n\t      return n * m;\n\t    case 'seconds':\n\t    case 'second':\n\t    case 'secs':\n\t    case 'sec':\n\t    case 's':\n\t      return n * s;\n\t    case 'milliseconds':\n\t    case 'millisecond':\n\t    case 'msecs':\n\t    case 'msec':\n\t    case 'ms':\n\t      return n;\n\t    default:\n\t      return undefined;\n\t  }\n\t}\n\n\t/**\n\t * Short format for `ms`.\n\t *\n\t * @param {Number} ms\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction fmtShort(ms) {\n\t  var msAbs = Math.abs(ms);\n\t  if (msAbs >= d) {\n\t    return Math.round(ms / d) + 'd';\n\t  }\n\t  if (msAbs >= h) {\n\t    return Math.round(ms / h) + 'h';\n\t  }\n\t  if (msAbs >= m) {\n\t    return Math.round(ms / m) + 'm';\n\t  }\n\t  if (msAbs >= s) {\n\t    return Math.round(ms / s) + 's';\n\t  }\n\t  return ms + 'ms';\n\t}\n\n\t/**\n\t * Long format for `ms`.\n\t *\n\t * @param {Number} ms\n\t * @return {String}\n\t * @api private\n\t */\n\n\tfunction fmtLong(ms) {\n\t  var msAbs = Math.abs(ms);\n\t  if (msAbs >= d) {\n\t    return plural(ms, msAbs, d, 'day');\n\t  }\n\t  if (msAbs >= h) {\n\t    return plural(ms, msAbs, h, 'hour');\n\t  }\n\t  if (msAbs >= m) {\n\t    return plural(ms, msAbs, m, 'minute');\n\t  }\n\t  if (msAbs >= s) {\n\t    return plural(ms, msAbs, s, 'second');\n\t  }\n\t  return ms + ' ms';\n\t}\n\n\t/**\n\t * Pluralization helper.\n\t */\n\n\tfunction plural(ms, msAbs, n, name) {\n\t  var isPlural = msAbs >= n * 1.5;\n\t  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n\t}\n\treturn ms;\n}\n\n/*!\n * humanize-ms - index.js\n * Copyright(c) 2014 dead_horse <dead_horse@qq.com>\n * MIT Licensed\n */\n\nvar humanizeMs;\nvar hasRequiredHumanizeMs;\n\nfunction requireHumanizeMs () {\n\tif (hasRequiredHumanizeMs) return humanizeMs;\n\thasRequiredHumanizeMs = 1;\n\n\t/**\n\t * Module dependencies.\n\t */\n\n\tvar util = (util__WEBPACK_IMPORTED_MODULE_6___default());\n\tvar ms = /*@__PURE__*/ requireMs();\n\n\thumanizeMs = function (t) {\n\t  if (typeof t === 'number') return t;\n\t  var r = ms(t);\n\t  if (r === undefined) {\n\t    var err = new Error(util.format('humanize-ms(%j) result undefined', t));\n\t    console.warn(err.stack);\n\t  }\n\t  return r;\n\t};\n\treturn humanizeMs;\n}\n\nvar constants;\nvar hasRequiredConstants;\n\nfunction requireConstants () {\n\tif (hasRequiredConstants) return constants;\n\thasRequiredConstants = 1;\n\n\tconstants = {\n\t  // agent\n\t  CURRENT_ID: Symbol('agentkeepalive#currentId'),\n\t  CREATE_ID: Symbol('agentkeepalive#createId'),\n\t  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),\n\t  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),\n\t  // socket\n\t  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),\n\t  SOCKET_NAME: Symbol('agentkeepalive#socketName'),\n\t  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),\n\t  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),\n\t};\n\treturn constants;\n}\n\nvar agent;\nvar hasRequiredAgent;\n\nfunction requireAgent () {\n\tif (hasRequiredAgent) return agent;\n\thasRequiredAgent = 1;\n\n\tconst OriginalAgent = (http__WEBPACK_IMPORTED_MODULE_7___default().Agent);\n\tconst ms = /*@__PURE__*/ requireHumanizeMs();\n\tconst debug = util__WEBPACK_IMPORTED_MODULE_6___default().debuglog('agentkeepalive');\n\tconst {\n\t  INIT_SOCKET,\n\t  CURRENT_ID,\n\t  CREATE_ID,\n\t  SOCKET_CREATED_TIME,\n\t  SOCKET_NAME,\n\t  SOCKET_REQUEST_COUNT,\n\t  SOCKET_REQUEST_FINISHED_COUNT,\n\t} = /*@__PURE__*/ requireConstants();\n\n\t// OriginalAgent come from\n\t// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js\n\t// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js\n\n\t// node <= 10\n\tlet defaultTimeoutListenerCount = 1;\n\tconst majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));\n\tif (majorVersion >= 11 && majorVersion <= 12) {\n\t  defaultTimeoutListenerCount = 2;\n\t} else if (majorVersion >= 13) {\n\t  defaultTimeoutListenerCount = 3;\n\t}\n\n\tfunction deprecate(message) {\n\t  console.log('[agentkeepalive:deprecated] %s', message);\n\t}\n\n\tclass Agent extends OriginalAgent {\n\t  constructor(options) {\n\t    options = options || {};\n\t    options.keepAlive = options.keepAlive !== false;\n\t    // default is keep-alive and 4s free socket timeout\n\t    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83\n\t    if (options.freeSocketTimeout === undefined) {\n\t      options.freeSocketTimeout = 4000;\n\t    }\n\t    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`\n\t    if (options.keepAliveTimeout) {\n\t      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n\t      options.freeSocketTimeout = options.keepAliveTimeout;\n\t      delete options.keepAliveTimeout;\n\t    }\n\t    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`\n\t    if (options.freeSocketKeepAliveTimeout) {\n\t      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');\n\t      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;\n\t      delete options.freeSocketKeepAliveTimeout;\n\t    }\n\n\t    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.\n\t    // By default is double free socket timeout.\n\t    if (options.timeout === undefined) {\n\t      // make sure socket default inactivity timeout >= 8s\n\t      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);\n\t    }\n\n\t    // support humanize format\n\t    options.timeout = ms(options.timeout);\n\t    options.freeSocketTimeout = ms(options.freeSocketTimeout);\n\t    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;\n\n\t    super(options);\n\n\t    this[CURRENT_ID] = 0;\n\n\t    // create socket success counter\n\t    this.createSocketCount = 0;\n\t    this.createSocketCountLastCheck = 0;\n\n\t    this.createSocketErrorCount = 0;\n\t    this.createSocketErrorCountLastCheck = 0;\n\n\t    this.closeSocketCount = 0;\n\t    this.closeSocketCountLastCheck = 0;\n\n\t    // socket error event count\n\t    this.errorSocketCount = 0;\n\t    this.errorSocketCountLastCheck = 0;\n\n\t    // request finished counter\n\t    this.requestCount = 0;\n\t    this.requestCountLastCheck = 0;\n\n\t    // including free socket timeout counter\n\t    this.timeoutSocketCount = 0;\n\t    this.timeoutSocketCountLastCheck = 0;\n\n\t    this.on('free', socket => {\n\t      // https://github.com/nodejs/node/pull/32000\n\t      // Node.js native agent will check socket timeout eqs agent.options.timeout.\n\t      // Use the ttl or freeSocketTimeout to overwrite.\n\t      const timeout = this.calcSocketTimeout(socket);\n\t      if (timeout > 0 && socket.timeout !== timeout) {\n\t        socket.setTimeout(timeout);\n\t      }\n\t    });\n\t  }\n\n\t  get freeSocketKeepAliveTimeout() {\n\t    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');\n\t    return this.options.freeSocketTimeout;\n\t  }\n\n\t  get timeout() {\n\t    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');\n\t    return this.options.timeout;\n\t  }\n\n\t  get socketActiveTTL() {\n\t    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');\n\t    return this.options.socketActiveTTL;\n\t  }\n\n\t  calcSocketTimeout(socket) {\n\t    /**\n\t     * return <= 0: should free socket\n\t     * return > 0: should update socket timeout\n\t     * return undefined: not find custom timeout\n\t     */\n\t    let freeSocketTimeout = this.options.freeSocketTimeout;\n\t    const socketActiveTTL = this.options.socketActiveTTL;\n\t    if (socketActiveTTL) {\n\t      // check socketActiveTTL\n\t      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];\n\t      const diff = socketActiveTTL - aliveTime;\n\t      if (diff <= 0) {\n\t        return diff;\n\t      }\n\t      if (freeSocketTimeout && diff < freeSocketTimeout) {\n\t        freeSocketTimeout = diff;\n\t      }\n\t    }\n\t    // set freeSocketTimeout\n\t    if (freeSocketTimeout) {\n\t      // set free keepalive timer\n\t      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']\n\t      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498\n\t      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;\n\t      return customFreeSocketTimeout || freeSocketTimeout;\n\t    }\n\t  }\n\n\t  keepSocketAlive(socket) {\n\t    const result = super.keepSocketAlive(socket);\n\t    // should not keepAlive, do nothing\n\t    if (!result) return result;\n\n\t    const customTimeout = this.calcSocketTimeout(socket);\n\t    if (typeof customTimeout === 'undefined') {\n\t      return true;\n\t    }\n\t    if (customTimeout <= 0) {\n\t      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',\n\t        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);\n\t      return false;\n\t    }\n\t    if (socket.timeout !== customTimeout) {\n\t      socket.setTimeout(customTimeout);\n\t    }\n\t    return true;\n\t  }\n\n\t  // only call on addRequest\n\t  reuseSocket(...args) {\n\t    // reuseSocket(socket, req)\n\t    super.reuseSocket(...args);\n\t    const socket = args[0];\n\t    const req = args[1];\n\t    req.reusedSocket = true;\n\t    const agentTimeout = this.options.timeout;\n\t    if (getSocketTimeout(socket) !== agentTimeout) {\n\t      // reset timeout before use\n\t      socket.setTimeout(agentTimeout);\n\t      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);\n\t    }\n\t    socket[SOCKET_REQUEST_COUNT]++;\n\t    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',\n\t      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n\t      getSocketTimeout(socket));\n\t  }\n\n\t  [CREATE_ID]() {\n\t    const id = this[CURRENT_ID]++;\n\t    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;\n\t    return id;\n\t  }\n\n\t  [INIT_SOCKET](socket, options) {\n\t    // bugfix here.\n\t    // https on node 8, 10 won't set agent.options.timeout by default\n\t    // TODO: need to fix on node itself\n\t    if (options.timeout) {\n\t      const timeout = getSocketTimeout(socket);\n\t      if (!timeout) {\n\t        socket.setTimeout(options.timeout);\n\t      }\n\t    }\n\n\t    if (this.options.keepAlive) {\n\t      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/\n\t      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html\n\t      socket.setNoDelay(true);\n\t    }\n\t    this.createSocketCount++;\n\t    if (this.options.socketActiveTTL) {\n\t      socket[SOCKET_CREATED_TIME] = Date.now();\n\t    }\n\t    // don't show the hole '-----BEGIN CERTIFICATE----' key string\n\t    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];\n\t    socket[SOCKET_REQUEST_COUNT] = 1;\n\t    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;\n\t    installListeners(this, socket, options);\n\t  }\n\n\t  createConnection(options, oncreate) {\n\t    let called = false;\n\t    const onNewCreate = (err, socket) => {\n\t      if (called) return;\n\t      called = true;\n\n\t      if (err) {\n\t        this.createSocketErrorCount++;\n\t        return oncreate(err);\n\t      }\n\t      this[INIT_SOCKET](socket, options);\n\t      oncreate(err, socket);\n\t    };\n\n\t    const newSocket = super.createConnection(options, onNewCreate);\n\t    if (newSocket) onNewCreate(null, newSocket);\n\t    return newSocket;\n\t  }\n\n\t  get statusChanged() {\n\t    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||\n\t      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||\n\t      this.closeSocketCount !== this.closeSocketCountLastCheck ||\n\t      this.errorSocketCount !== this.errorSocketCountLastCheck ||\n\t      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||\n\t      this.requestCount !== this.requestCountLastCheck;\n\t    if (changed) {\n\t      this.createSocketCountLastCheck = this.createSocketCount;\n\t      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;\n\t      this.closeSocketCountLastCheck = this.closeSocketCount;\n\t      this.errorSocketCountLastCheck = this.errorSocketCount;\n\t      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;\n\t      this.requestCountLastCheck = this.requestCount;\n\t    }\n\t    return changed;\n\t  }\n\n\t  getCurrentStatus() {\n\t    return {\n\t      createSocketCount: this.createSocketCount,\n\t      createSocketErrorCount: this.createSocketErrorCount,\n\t      closeSocketCount: this.closeSocketCount,\n\t      errorSocketCount: this.errorSocketCount,\n\t      timeoutSocketCount: this.timeoutSocketCount,\n\t      requestCount: this.requestCount,\n\t      freeSockets: inspect(this.freeSockets),\n\t      sockets: inspect(this.sockets),\n\t      requests: inspect(this.requests),\n\t    };\n\t  }\n\t}\n\n\t// node 8 don't has timeout attribute on socket\n\t// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408\n\tfunction getSocketTimeout(socket) {\n\t  return socket.timeout || socket._idleTimeout;\n\t}\n\n\tfunction installListeners(agent, socket, options) {\n\t  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));\n\n\t  // listener socket events: close, timeout, error, free\n\t  function onFree() {\n\t    // create and socket.emit('free') logic\n\t    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311\n\t    // no req on the socket, it should be the new socket\n\t    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;\n\n\t    socket[SOCKET_REQUEST_FINISHED_COUNT]++;\n\t    agent.requestCount++;\n\t    debug('%s(requests: %s, finished: %s) free',\n\t      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\n\t    // should reuse on pedding requests?\n\t    const name = agent.getName(options);\n\t    if (socket.writable && agent.requests[name] && agent.requests[name].length) {\n\t      // will be reuse on agent free listener\n\t      socket[SOCKET_REQUEST_COUNT]++;\n\t      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',\n\t        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\t    }\n\t  }\n\t  socket.on('free', onFree);\n\n\t  function onClose(isError) {\n\t    debug('%s(requests: %s, finished: %s) close, isError: %s',\n\t      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);\n\t    agent.closeSocketCount++;\n\t  }\n\t  socket.on('close', onClose);\n\n\t  // start socket timeout handler\n\t  function onTimeout() {\n\t    // onTimeout and emitRequestTimeout(_http_client.js)\n\t    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711\n\t    const listenerCount = socket.listeners('timeout').length;\n\t    // node <= 10, default listenerCount is 1, onTimeout\n\t    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout\n\t    // node >= 13, default listenerCount is 3, onTimeout,\n\t    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)\n\t    //   and emitRequestTimeout\n\t    const timeout = getSocketTimeout(socket);\n\t    const req = socket._httpMessage;\n\t    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;\n\t    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',\n\t      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n\t      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);\n\t    if (debug.enabled) {\n\t      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));\n\t    }\n\t    agent.timeoutSocketCount++;\n\t    const name = agent.getName(options);\n\t    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {\n\t      // free socket timeout, destroy quietly\n\t      socket.destroy();\n\t      // Remove it from freeSockets list immediately to prevent new requests\n\t      // from being sent through this socket.\n\t      agent.removeSocket(socket, options);\n\t      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);\n\t    } else {\n\t      // if there is no any request socket timeout handler,\n\t      // agent need to handle socket timeout itself.\n\t      //\n\t      // custom request socket timeout handle logic must follow these rules:\n\t      //  1. Destroy socket first\n\t      //  2. Must emit socket 'agentRemove' event tell agent remove socket\n\t      //     from freeSockets list immediately.\n\t      //     Otherise you may be get 'socket hang up' error when reuse\n\t      //     free socket and timeout happen in the same time.\n\t      if (reqTimeoutListenerCount === 0) {\n\t        const error = new Error('Socket timeout');\n\t        error.code = 'ERR_SOCKET_TIMEOUT';\n\t        error.timeout = timeout;\n\t        // must manually call socket.end() or socket.destroy() to end the connection.\n\t        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback\n\t        socket.destroy(error);\n\t        agent.removeSocket(socket, options);\n\t        debug('%s destroy with timeout error', socket[SOCKET_NAME]);\n\t      }\n\t    }\n\t  }\n\t  socket.on('timeout', onTimeout);\n\n\t  function onError(err) {\n\t    const listenerCount = socket.listeners('error').length;\n\t    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',\n\t      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],\n\t      err, listenerCount);\n\t    agent.errorSocketCount++;\n\t    if (listenerCount === 1) {\n\t      // if socket don't contain error event handler, don't catch it, emit it again\n\t      debug('%s emit uncaught error event', socket[SOCKET_NAME]);\n\t      socket.removeListener('error', onError);\n\t      socket.emit('error', err);\n\t    }\n\t  }\n\t  socket.on('error', onError);\n\n\t  function onRemove() {\n\t    debug('%s(requests: %s, finished: %s) agentRemove',\n\t      socket[SOCKET_NAME],\n\t      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);\n\t    // We need this function for cases like HTTP 'upgrade'\n\t    // (defined by WebSockets) where we need to remove a socket from the\n\t    // pool because it'll be locked up indefinitely\n\t    socket.removeListener('close', onClose);\n\t    socket.removeListener('error', onError);\n\t    socket.removeListener('free', onFree);\n\t    socket.removeListener('timeout', onTimeout);\n\t    socket.removeListener('agentRemove', onRemove);\n\t  }\n\t  socket.on('agentRemove', onRemove);\n\t}\n\n\tagent = Agent;\n\n\tfunction inspect(obj) {\n\t  const res = {};\n\t  for (const key in obj) {\n\t    res[key] = obj[key].length;\n\t  }\n\t  return res;\n\t}\n\treturn agent;\n}\n\nvar https_agent;\nvar hasRequiredHttps_agent;\n\nfunction requireHttps_agent () {\n\tif (hasRequiredHttps_agent) return https_agent;\n\thasRequiredHttps_agent = 1;\n\n\tconst OriginalHttpsAgent = (https__WEBPACK_IMPORTED_MODULE_8___default().Agent);\n\tconst HttpAgent = /*@__PURE__*/ requireAgent();\n\tconst {\n\t  INIT_SOCKET,\n\t  CREATE_HTTPS_CONNECTION,\n\t} = /*@__PURE__*/ requireConstants();\n\n\tclass HttpsAgent extends HttpAgent {\n\t  constructor(options) {\n\t    super(options);\n\n\t    this.defaultPort = 443;\n\t    this.protocol = 'https:';\n\t    this.maxCachedSessions = this.options.maxCachedSessions;\n\t    /* istanbul ignore next */\n\t    if (this.maxCachedSessions === undefined) {\n\t      this.maxCachedSessions = 100;\n\t    }\n\n\t    this._sessionCache = {\n\t      map: {},\n\t      list: [],\n\t    };\n\t  }\n\n\t  createConnection(options, oncreate) {\n\t    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);\n\t    this[INIT_SOCKET](socket, options);\n\t    return socket;\n\t  }\n\t}\n\n\t// https://github.com/nodejs/node/blob/master/lib/https.js#L89\n\tHttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;\n\n\t[\n\t  'getName',\n\t  '_getSession',\n\t  '_cacheSession',\n\t  // https://github.com/nodejs/node/pull/4982\n\t  '_evictSession',\n\t].forEach(function(method) {\n\t  /* istanbul ignore next */\n\t  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {\n\t    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];\n\t  }\n\t});\n\n\thttps_agent = HttpsAgent;\n\treturn https_agent;\n}\n\nvar hasRequiredAgentkeepalive;\n\nfunction requireAgentkeepalive () {\n\tif (hasRequiredAgentkeepalive) return agentkeepalive.exports;\n\thasRequiredAgentkeepalive = 1;\n\n\tagentkeepalive.exports = /*@__PURE__*/ requireAgent();\n\tagentkeepalive.exports.HttpsAgent = /*@__PURE__*/ requireHttps_agent();\n\tagentkeepalive.exports.constants = /*@__PURE__*/ requireConstants();\n\treturn agentkeepalive.exports;\n}\n\nvar agentkeepaliveExports = /*@__PURE__*/ requireAgentkeepalive();\nvar HttpKeepAliveAgent = /*@__PURE__*/getDefaultExportFromCjs(agentkeepaliveExports);\n\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\n\nfunction requireFastStableStringify () {\n\tif (hasRequiredFastStableStringify) return fastStableStringify$1;\n\thasRequiredFastStableStringify = 1;\n\tvar objToString = Object.prototype.toString;\n\tvar objKeys = Object.keys || function(obj) {\n\t\t\tvar keys = [];\n\t\t\tfor (var name in obj) {\n\t\t\t\tkeys.push(name);\n\t\t\t}\n\t\t\treturn keys;\n\t\t};\n\n\tfunction stringify(val, isArrayProp) {\n\t\tvar i, max, str, keys, key, propVal, toStr;\n\t\tif (val === true) {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (val === false) {\n\t\t\treturn \"false\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t\t} else {\n\t\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\t\tstr = '[';\n\t\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + ']';\n\t\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t\t// only object is left\n\t\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\t\tmax = keys.length;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"function\":\n\t\t\tcase \"undefined\":\n\t\t\t\treturn isArrayProp ? null : undefined;\n\t\t\tcase \"string\":\n\t\t\t\treturn JSON.stringify(val);\n\t\t\tdefault:\n\t\t\t\treturn isFinite(val) ? val : null;\n\t\t}\n\t}\n\n\tfastStableStringify$1 = function(val) {\n\t\tvar returnVal = stringify(val, false);\n\t\tif (returnVal !== undefined) {\n\t\t\treturn ''+ returnVal;\n\t\t}\n\t};\n\treturn fastStableStringify$1;\n}\n\nvar fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = typeof globalThis.fetch === 'function' ?\n// The Fetch API is supported experimentally in Node 17.5+ and natively in Node 18+.\nglobalThis.fetch :\n// Otherwise use the polyfill.\nasync function (input, init) {\n  const processedInput = typeof input === 'string' && input.slice(0, 2) === '//' ? 'https:' + input : input;\n  return await node_fetch__WEBPACK_IMPORTED_MODULE_10__[\"default\"](processedInput, init);\n};\n\nclass RpcWebSocketClient extends rpc_websockets__WEBPACK_IMPORTED_MODULE_11__.CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = (0,rpc_websockets__WEBPACK_IMPORTED_MODULE_11__.WebSocket)(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('typeIndex'), u64('deactivationSlot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('lastExtendedSlot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('lastExtendedStartIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(),\n  // option\n  _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(publicKey(), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.coerce)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.instance)(PublicKey), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(), value => new PublicKey(value));\nconst RawAccountDataResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.tuple)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('base64')]);\nconst BufferFromRawAccountData = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.coerce)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.instance)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer), RawAccountDataResult, value => buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    jsonrpc: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('2.0'),\n    id: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    result\n  }), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    jsonrpc: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('2.0'),\n    id: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    error: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      code: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)(),\n      message: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n      data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.any)())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.coerce)(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    context: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    context: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  foundation: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  foundationTerm: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  initial: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  taper: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  terminal: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  epoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  effectiveSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  amount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  postBalance: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  commission: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  prioritizationFee: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  total: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  validator: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  foundation: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  epoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  epoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  slotIndex: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  slotsInEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  absoluteSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  transactionCount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\nconst GetEpochScheduleResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slotsPerEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  leaderScheduleSlotOffset: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  warmup: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  firstNormalEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  firstNormalSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  'solana-core': (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  'feature-set': (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\nconst ParsedInstructionStruct = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  program: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  programId: PublicKeyFromString,\n  parsed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)()\n});\nconst PartiallyDecodedInstructionStruct = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  programId: PublicKeyFromString,\n  accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString),\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  err: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()])),\n  logs: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())),\n  accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    executable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n    owner: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n    rentEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n  }))))),\n  unitsConsumed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  returnData: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    programId: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.tuple)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('base64')])\n  }))),\n  innerInstructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    instructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  byIdentity: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.record)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())),\n  range: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    firstSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    lastSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent == null) {\n      {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25\n        };\n        if (url.startsWith('https:')) {\n          agent = new agentkeepaliveExports.HttpsAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof https__WEBPACK_IMPORTED_MODULE_8__.Agent)) {\n          throw new Error('The endpoint `' + url + '` can only be paired with an `https.Agent`. You have, instead, supplied an ' + '`http.Agent` through `httpAgent`.');\n        } else if (!isHttps && httpAgent instanceof https__WEBPACK_IMPORTED_MODULE_8__.Agent) {\n          throw new Error('The endpoint `' + url + '` can only be paired with an `http.Agent`. You have, instead, supplied an ' + '`https.Agent` through `httpAgent`.');\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new (jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_9___default())(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  total: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  circulating: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  nonCirculating: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  nonCirculatingAccounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  amount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  uiAmount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  decimals: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  uiAmountString: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  address: PublicKeyFromString,\n  amount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  uiAmount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  decimals: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  uiAmountString: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  account: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    executable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n    owner: PublicKeyFromString,\n    lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    data: BufferFromRawAccountData,\n    rentEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n})));\nconst ParsedAccountDataResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  program: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parsed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)(),\n  space: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  account: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    executable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n    owner: PublicKeyFromString,\n    lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    data: ParsedAccountDataResult,\n    rentEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  executable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  owner: PublicKeyFromString,\n  lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  data: BufferFromRawAccountData,\n  rentEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.coerce)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.instance)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer), ParsedAccountDataResult]), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  executable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  owner: PublicKeyFromString,\n  lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\nconst KeyedParsedAccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  state: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('active'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('inactive'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('activating'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('deactivating')]),\n  active: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  inactive: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  signature: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  err: TransactionErrorResult,\n  memo: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  signature: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  err: TransactionErrorResult,\n  memo: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  parent: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  root: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('firstShredReceived'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('completed'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('optimisticConfirmation'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('root')]),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  timestamp: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('createdBank'),\n  parent: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  timestamp: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('frozen'),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  timestamp: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  stats: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    numTransactionEntries: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    numSuccessfulTransactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    numFailedTransactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    maxTransactionsPerEntry: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  type: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('dead'),\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  timestamp: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  err: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: notificationResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  result: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\nconst ContactInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  gossip: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  tpu: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  rpc: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())\n});\nconst VoteAccountInfoResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  votePubkey: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  nodePubkey: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  activatedStake: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  epochVoteAccount: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  epochCredits: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.tuple)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()])),\n  commission: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  lastVote: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  rootSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  current: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(VoteAccountInfoResult),\n  delinquent: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('processed'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('confirmed'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('finalized')]);\nconst SignatureStatusResponse = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  confirmations: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  err: TransactionErrorResult,\n  confirmationStatus: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)());\nconst AddressTableLookupStruct = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  accountKey: PublicKeyFromString,\n  writableIndexes: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  readonlyIndexes: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\nconst ConfirmedTransactionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  signatures: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  message: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    accountKeys: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n    header: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      numRequiredSignatures: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n      numReadonlySignedAccounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n      numReadonlyUnsignedAccounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n    }),\n    instructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n      data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n      programIdIndex: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n    })),\n    recentBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    addressTableLookups: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: PublicKeyFromString,\n  signer: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  writable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)(),\n  source: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('transaction'), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  accountKeys: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(AnnotatedAccountKey),\n  signatures: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())\n});\nconst ParsedInstructionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  parsed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)(),\n  program: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString),\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  parsed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.unknown)(),\n  program: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  programId: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()\n}), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  programId: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()\n})]);\nconst ParsedOrRawInstruction = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.coerce)(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(value, RawInstructionResult);\n  } else {\n    return (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  signatures: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  message: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    accountKeys: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(AnnotatedAccountKey),\n    instructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(ParsedOrRawInstruction),\n    recentBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n    addressTableLookups: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  accountIndex: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  mint: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  owner: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  programId: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  writable: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString),\n  readonly: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  err: TransactionErrorResult,\n  fee: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  innerInstructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    instructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n      accounts: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n      data: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n      programIdIndex: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n    }))\n  })))),\n  preBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  postBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  logMessages: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()))),\n  preTokenBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(TokenBalanceResult))),\n  postTokenBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(TokenBalanceResult))),\n  loadedAddresses: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(LoadedAddressesResult),\n  computeUnitsConsumed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  err: TransactionErrorResult,\n  fee: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  innerInstructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    index: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n    instructions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(ParsedOrRawInstruction)\n  })))),\n  preBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  postBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  logMessages: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()))),\n  preTokenBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(TokenBalanceResult))),\n  postTokenBalances: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(TokenBalanceResult))),\n  loadedAddresses: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(LoadedAddressesResult),\n  computeUnitsConsumed: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n});\nconst TransactionVersionStruct = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.union)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)(0), (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.literal)('legacy')]);\n\n/** @internal */\nconst RewardsResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  pubkey: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  lamports: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  postBalance: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  rewardType: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  commission: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    transaction: ConfirmedTransactionResult,\n    meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ConfirmedTransactionMetaResult),\n    version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n  })),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ConfirmedTransactionMetaResult),\n    version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n  })),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ParsedConfirmedTransactionMetaResult),\n    version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n  })),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ParsedConfirmedTransactionMetaResult),\n    version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n  })),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()),\n  blockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    transaction: ConfirmedTransactionResult,\n    meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ConfirmedTransactionMetaResult)\n  })),\n  rewards: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(RewardsResult)),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  previousBlockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  parentSlot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  signatures: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ConfirmedTransactionMetaResult),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())),\n  transaction: ConfirmedTransactionResult,\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ParsedConfirmedTransactionMetaResult),\n  blockTime: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())),\n  version: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  feeCalculator: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    lamportsPerSignature: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  blockhash: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  lastValidBlockHeight: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.boolean)());\nconst PerfSampleResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  slot: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  numTransactions: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  numSlots: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)(),\n  samplePeriodSecs: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  feeCalculator: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n    lamportsPerSignature: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  err: TransactionErrorResult,\n  logs: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  signature: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  result: notificationResultAndContext(LogsResult),\n  subscription: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.95.8\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext(baseSchema)) : (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.nullable)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.array)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.number)()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                args,\n                error: e\n              });\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.create)(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), u64('recentSlot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), u64(), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(publicKey(), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), (0,bigint_buffer__WEBPACK_IMPORTED_MODULE_5__.toBufferLE)(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('units'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('numSignatures'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('padding'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('signatureOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('signatureInstructionIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('publicKeyOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('publicKeyInstructionIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('messageDataOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('messageDataSize'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_15__.secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\n_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_15__.secp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_15__.secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('numSignatures'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('signatureOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('signatureInstructionIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('ethAddressOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('ethAddressInstructionIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('messageDataOffset'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u16('messageDataSize'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('messageInstructionIndex'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(20, 'ethAddress'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.blob(64, 'signature'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_16__.keccak_256)(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_16__.keccak_256)(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('newAuthorized'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('newAuthorized'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), publicKey('newAuthorized'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.type)({\n  name: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)(),\n  website: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  details: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  iconUrl: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)()),\n  keybaseUsername: (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.optional)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.string)())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        (0,superstruct__WEBPACK_IMPORTED_MODULE_14__.assert)(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('commission'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64(),\n// votes.length\n_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('slot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32('confirmationCount')]), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'votes'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('rootSlotValid'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('rootSlot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64(),\n// authorizedVoters.length\n_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('epoch'), publicKey('authorizedVoter')]), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'authorizedVoters'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([publicKey('authorizedPubkey'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('epochOfLastAuthorizedSwitch'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('targetEpoch')]), 32, 'buf'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('idx'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u8('isEmpty')], 'priorVoters'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64(),\n// epochCredits.length\n_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.seq(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('epoch'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('credits'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('prevCredits')]), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.offset(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.u32(), -8), 'epochCredits'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.struct([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('slot'), _solana_buffer_layout__WEBPACK_IMPORTED_MODULE_4__.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.esm.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!***************************************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \***************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/../node_modules/node-fetch/lib/index.mjs\")\nconst realFetch = nodeFetch.default || nodeFetch\n\nconst fetch = function (url, options) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // Ex: //github.com/ -> https://github.com/\n  if (/^\\/\\//.test(url)) {\n    url = 'https:' + url\n  }\n  return realFetch.call(this, url, options)\n}\n\nfetch.ponyfill = true\n\nmodule.exports = exports = fetch\nexports.fetch = fetch\nexports.Headers = nodeFetch.Headers\nexports.Request = nodeFetch.Request\nexports.Response = nodeFetch.Response\n\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyxrRUFBWTtBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsYUFBYTtBQUNiLGVBQWU7QUFDZixlQUFlO0FBQ2YsZ0JBQWdCOztBQUVoQjtBQUNBLGtCQUFlIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL25vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L25vZGUtcG9ueWZpbGwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZUZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpXG5jb25zdCByZWFsRmV0Y2ggPSBub2RlRmV0Y2guZGVmYXVsdCB8fCBub2RlRmV0Y2hcblxuY29uc3QgZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIC8vIFN1cHBvcnQgc2NoZW1hbGVzcyBVUklzIG9uIHRoZSBzZXJ2ZXIgZm9yIHBhcml0eSB3aXRoIHRoZSBicm93c2VyLlxuICAvLyBFeDogLy9naXRodWIuY29tLyAtPiBodHRwczovL2dpdGh1Yi5jb20vXG4gIGlmICgvXlxcL1xcLy8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gJ2h0dHBzOicgKyB1cmxcbiAgfVxuICByZXR1cm4gcmVhbEZldGNoLmNhbGwodGhpcywgdXJsLCBvcHRpb25zKVxufVxuXG5mZXRjaC5wb255ZmlsbCA9IHRydWVcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmV0Y2hcbmV4cG9ydHMuZmV0Y2ggPSBmZXRjaFxuZXhwb3J0cy5IZWFkZXJzID0gbm9kZUZldGNoLkhlYWRlcnNcbmV4cG9ydHMuUmVxdWVzdCA9IG5vZGVGZXRjaC5SZXF1ZXN0XG5leHBvcnRzLlJlc3BvbnNlID0gbm9kZUZldGNoLlJlc3BvbnNlXG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBjb25zdW1lcnMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG5leHBvcnRzLmRlZmF1bHQgPSBmZXRjaFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!***************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   pointDecode: () => (/* reexport safe */ _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__.pointDecode),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUNIOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLCtNQUF5QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsaU5BQTBCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseU1BQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBFQUF1QjtBQUNyRDtBQUNBO0FBQ0E7O0FBRXlDO0FBQ3pDIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcgfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5leHBvcnQgeyBwb2ludERlY29kZSB9IGZyb20gJy4vdGluay9lbGxpcHRpY19jdXJ2ZXMubWpzJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIEhlYWRlciBuYW1lIGZvciBhbiBBUEkga2V5IHN0YW1wXG5jb25zdCBzdGFtcEhlYWRlck5hbWUgPSBcIlgtU3RhbXBcIjtcbi8vIGB3aW5kb3cuZG9jdW1lbnRgIGVuc3VyZXMgdGhhdCB3ZSdyZSBpbiBhIGJyb3dzZXIgY29udGV4dFxuLy8gYW5kIGBjcnlwdG8uc3VidGxlYCBlbnN1cmVzIHRoYXQgaXQgc3VwcG9ydHMgdGhlIHdlYiBjcnlwdG8gQVBJc1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNDcnlwdG9FbmFibGVkQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8uc3VidGxlICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gV2UgY2hlY2sgYHByb2Nlc3MudmVyc2lvbnMubm9kZWBcbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICE9IG51bGwgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbDtcbi8qKlxuICogU2lnbmF0dXJlIGZ1bmN0aW9uIGFic3RyYWN0aW5nIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIE5vZGVKUyBhbmQgd2ViIGVudmlyb25tZW50cyBmb3Igc2lnbmluZyB3aXRoIEFQSSBrZXlzLlxuICovXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGlmIChpc0NyeXB0b0VuYWJsZWRCcm93c2VyKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL3dlYmNyeXB0by5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL25vZGVjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIE5vZGVKUyBvciB3ZWIgY3J5cHRvIGF0IG91ciBkaXNwb3NhbCwgZGVmYXVsdCB0byBwdXJlIEpTIGltcGxlbWVudGF0aW9uXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2UgZm9yIG9sZCBicm93c2VycyBhbmQgcmVhY3QgbmF0aXZlIGVudmlyb25tZW50c1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9wdXJlanMubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxufTtcbi8qKlxuICogU3RhbXBlciB0byB1c2Ugd2l0aCBgQHR1cm5rZXkvaHR0cGAncyBgVHVybmtleUNsaWVudGBcbiAqL1xuY2xhc3MgQXBpS2V5U3RhbXBlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXBpUHVibGljS2V5ID0gY29uZmlnLmFwaVB1YmxpY0tleTtcbiAgICAgICAgdGhpcy5hcGlQcml2YXRlS2V5ID0gY29uZmlnLmFwaVByaXZhdGVLZXk7XG4gICAgfVxuICAgIGFzeW5jIHN0YW1wKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc2lnbldpdGhBcGlLZXkoe1xuICAgICAgICAgICAgcHVibGljS2V5OiB0aGlzLmFwaVB1YmxpY0tleSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHRoaXMuYXBpUHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBheWxvYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBzY2hlbWU6IFwiU0lHTkFUVVJFX1NDSEVNRV9US19BUElfUDI1NlwiLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFtcEhlYWRlck5hbWU6IHN0YW1wSGVhZGVyTmFtZSxcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyVmFsdWU6IHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKEpTT04uc3RyaW5naWZ5KHN0YW1wKSksXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBBcGlLZXlTdGFtcGVyLCBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!********************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L25vZGVjcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUN1Qjs7QUFFeEQ7QUFDQSxZQUFZLGlDQUFpQztBQUM3Qyw2QkFBNkIsb0RBQXVCO0FBQ3BEO0FBQ0E7QUFDQSxhQUFhLHFFQUF5QjtBQUN0QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLGlCQUFpQiw4Q0FBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9ub2RlY3J5cHRvLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IHByaXZhdGVLZXlPYmplY3QgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gdGhlIGtleSBjYW4gYmUgYSBKV0sgb2JqZWN0IHNpbmNlIE5vZGUgdjE1LjEyLjBcbiAgICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbCNjcnlwdG9jcmVhdGVwcml2YXRla2V5a2V5XG4gICAgICAgIGtleTogY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleDogcHVibGljS2V5LFxuICAgICAgICB9KSxcbiAgICAgICAgZm9ybWF0OiBcImp3a1wiLFxuICAgIH0pO1xuICAgIGNvbnN0IHNpZ24gPSBjcnlwdG8uY3JlYXRlU2lnbihcIlNIQTI1NlwiKTtcbiAgICBzaWduLndyaXRlKEJ1ZmZlci5mcm9tKGNvbnRlbnQpKTtcbiAgICBzaWduLmVuZCgpO1xuICAgIHJldHVybiBzaWduLnNpZ24ocHJpdmF0ZUtleU9iamVjdCwgXCJoZXhcIik7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZWNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/../node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3B1cmVqcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwQztBQUNLO0FBQ1c7O0FBRTFEO0FBQ0Esc0JBQXNCLG9EQUFJO0FBQzFCO0FBQ0EsNEJBQTRCLHdFQUFxQjtBQUNqRDtBQUNBLG1FQUFtRSxnQkFBZ0IsUUFBUSxnQkFBZ0I7QUFDM0c7QUFDQSxpQkFBaUIsNkRBQVU7QUFDM0Isc0JBQXNCLG9EQUFJO0FBQzFCO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9wdXJlanMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHAyNTYgfSBmcm9tICdAbm9ibGUvY3VydmVzL3AyNTYnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ3NoYTI1Ni11aW50OGFycmF5JztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBwMjU2LmdldFB1YmxpY0tleShpbnB1dC5wcml2YXRlS2V5LCB0cnVlKTtcbiAgICAvLyBQdWJsaWMga2V5IGluIHRoZSB1c3VhbCAwMiBvciAwMyArIDY0IGhleCBkaWdpdHNcbiAgICBjb25zdCBwdWJsaWNLZXlTdHJpbmcgPSB1aW50OEFycmF5VG9IZXhTdHJpbmcocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5U3RyaW5nICE9IGlucHV0LnB1YmxpY0tleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBBUEkga2V5LiBFeHBlY3RlZCB0byBnZXQgcHVibGljIGtleSAke2lucHV0LnB1YmxpY0tleX0sIGdvdCAke3B1YmxpY0tleVN0cmluZ31gKTtcbiAgICB9XG4gICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goKS51cGRhdGUoaW5wdXQuY29udGVudCkuZGlnZXN0KCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gcDI1Ni5zaWduKGhhc2gsIGlucHV0LnByaXZhdGVLZXkpO1xuICAgIHJldHVybiBzaWduYXR1cmUudG9ERVJIZXgoKTtcbn07XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXJlanMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!********************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3RpbmsvYnl0ZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRWtEO0FBQ2xEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC90aW5rL2J5dGVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2J5dGVzLnRzXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQ29udmVydHMgdGhlIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBoZXggdGhlIGlucHV0XG4gKiBAcmV0dXJuIHRoZSBieXRlIGFycmF5IG91dHB1dFxuICogQHRocm93cyB7IUVycm9yfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGFycltpIC8gMl0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgYXJyYXkgdG8gaGV4LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHJldHVybiBoZXggdGhlIG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0hleChieXRlcykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmVzdWx0ICs9IGhleEJ5dGUubGVuZ3RoID4gMSA/IGhleEJ5dGUgOiBcIjBcIiArIGhleEJ5dGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEJhc2U2NCBlbmNvZGUgYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHBhcmFtIG9wdF93ZWJTYWZlIFRydWUgaW5kaWNhdGVzIHdlIHNob3VsZCB1c2UgdGhlIGFsdGVybmF0aXZlXG4gKiAgICAgYWxwaGFiZXQsIHdoaWNoIGRvZXMgbm90IHJlcXVpcmUgZXNjYXBpbmcgZm9yIHVzZSBpbiBVUkxzLlxuICogQHJldHVybiBiYXNlNjQgb3V0cHV0XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0KGJ5dGVzLCBvcHRfd2ViU2FmZSkge1xuICAgIGNvbnN0IGVuY29kZWQgPSBidG9hKFxuICAgIC8qIHBhZGRpbmcgKi9cbiAgICB0b0J5dGVTdHJpbmcoYnl0ZXMpKS5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIGlmIChvcHRfd2ViU2FmZSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLiBFYWNoIGJ5dGUgaXMgY29ycmVzcG9uZGluZyB0byBhXG4gKiBjaGFyYWN0ZXIuIERvZXMgbm90IHN1cHBvcnQgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZVN0cmluZyhieXRlcykge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBmcm9tSGV4LCB0b0Jhc2U2NCwgdG9CeXRlU3RyaW5nLCB0b0hleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!******************************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n * - The implementation of integerToByteArray has been modified to augment the resulting byte array to a certain length.\n * - The implementation of PointDecode has been modified to decode both compressed and uncompressed points by checking for correct format\n * - Method isP256CurvePoint added to check whether an uncompressed point is valid\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i, length) {\n    const input = i.toString(16);\n    const numHexChars = length * 2;\n    let padding = \"\";\n    if (numHexChars < input.length) {\n        throw new Error(`cannot pack integer with ${input.length} hex chars into ${length} bytes`);\n    }\n    else {\n        padding = \"0\".repeat(numHexChars - input.length);\n    }\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(padding + input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n *\n * Given x and y coordinates of a JWK, checks whether these are valid points on\n * the P-256 elliptic curve.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param y y-coordinate\n * @return boolean validity\n */\nfunction isP256CurvePoint(x, y) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    const lhs = y ** BigInt(2) % p;\n    return lhs === rhs;\n}\n/**\n * Decodes a public key in _compressed_ OR _uncompressed_ format.\n * Augmented to ensure that the x and y components are padded to fit 32 bytes.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    const compressedLength = fieldSize + 1;\n    const uncompressedLength = 2 * fieldSize + 1;\n    if (point.length !== compressedLength &&\n        point.length !== uncompressedLength) {\n        throw new Error(\"Invalid length: point is not in compressed or uncompressed format\");\n    }\n    // Decodes point if its length and first bit match the compressed format\n    if ((point[0] === 2 || point[0] === 3) && point.length == compressedLength) {\n        const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n        const x = byteArrayToInteger(point.subarray(1, point.length));\n        const p = getModulus();\n        if (x < BigInt(0) || x >= p) {\n            throw new Error(\"x is out of range\");\n        }\n        const y = getY(x, lsb);\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n        // Decodes point if its length and first bit match the uncompressed format\n    }\n    else if (point[0] === 4 && point.length == uncompressedLength) {\n        const x = byteArrayToInteger(point.subarray(1, fieldSize + 1));\n        const y = byteArrayToInteger(point.subarray(fieldSize + 1, 2 * fieldSize + 1));\n        const p = getModulus();\n        if (x < BigInt(0) ||\n            x >= p ||\n            y < BigInt(0) ||\n            y >= p ||\n            !isP256CurvePoint(x, y)) {\n            throw new Error(\"invalid uncompressed x and y coordinates\");\n        }\n        const result = {\n            kty: \"EC\",\n            crv: \"P-256\",\n            x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x, 32), /* websafe */ true),\n            y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y, 32), /* websafe */ true),\n            ext: true,\n        };\n        return result;\n    }\n    throw new Error(\"invalid format\");\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!***************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)((0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayFromHexString)(compressedPublicKeyHex));\n    // Ensure that d is sufficiently padded\n    jwk.d = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.hexStringToBase64url)(uncompressedPrivateKeyHex, _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_JWK_MEMBER_BYTE_LENGTH);\n    return jwk;\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDeUQ7O0FBRWxIO0FBQ0EsWUFBWSxvREFBb0Q7QUFDaEUsZ0JBQWdCLHNFQUFXLENBQUMsMEVBQXVCO0FBQ25EO0FBQ0EsWUFBWSx1RUFBb0IsNEJBQTRCLDZFQUE4QjtBQUMxRjtBQUNBOztBQUVxQztBQUNyQyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3QvdXRpbHMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBvaW50RGVjb2RlIH0gZnJvbSAnLi90aW5rL2VsbGlwdGljX2N1cnZlcy5tanMnO1xuaW1wb3J0IHsgdWludDhBcnJheUZyb21IZXhTdHJpbmcsIGhleFN0cmluZ1RvQmFzZTY0dXJsLCBERUZBVUxUX0pXS19NRU1CRVJfQllURV9MRU5HVEggfSBmcm9tICdAdHVybmtleS9lbmNvZGluZyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2soaW5wdXQpIHtcbiAgICBjb25zdCB7IHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIGNvbXByZXNzZWRQdWJsaWNLZXlIZXggfSA9IGlucHV0O1xuICAgIGNvbnN0IGp3ayA9IHBvaW50RGVjb2RlKHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nKGNvbXByZXNzZWRQdWJsaWNLZXlIZXgpKTtcbiAgICAvLyBFbnN1cmUgdGhhdCBkIGlzIHN1ZmZpY2llbnRseSBwYWRkZWRcbiAgICBqd2suZCA9IGhleFN0cmluZ1RvQmFzZTY0dXJsKHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsIERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCk7XG4gICAgcmV0dXJuIGp3aztcbn1cblxuZXhwb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3dlYmNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ0U7O0FBRTFEO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsK0JBQStCLGNBQWM7QUFDN0M7QUFDQTtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLGdCQUFnQixxRUFBeUI7QUFDekM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVyx3RUFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQjtBQUMxQiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgaW1wb3J0VHVybmtleUFwaUtleSh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgc2lnbk1lc3NhZ2UoeyBrZXksIGNvbnRlbnQgfSk7XG59O1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0VHVybmtleUFwaUtleShpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXgsXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwiandrXCIsIGp3aywge1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIG5hbWVkQ3VydmU6IFwiUC0yNTZcIixcbiAgICB9LCBmYWxzZSwgLy8gbm90IGV4dHJhY3RhYmxlXG4gICAgW1wic2lnblwiXSAvLyBhbGxvdyBzaWduaW5nXG4gICAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlKGlucHV0KSB7XG4gICAgY29uc3QgeyBrZXksIGNvbnRlbnQgfSA9IGlucHV0O1xuICAgIGNvbnN0IHNpZ25hdHVyZUllZWUxMzYzID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBoYXNoOiBcIlNIQS0yNTZcIixcbiAgICB9LCBrZXksIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlRGVyID0gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihuZXcgVWludDhBcnJheShzaWduYXR1cmVJZWVlMTM2MykpO1xuICAgIHJldHVybiB1aW50OEFycmF5VG9IZXhTdHJpbmcoc2lnbmF0dXJlRGVyKTtcbn1cbi8qKlxuICogYFN1YnRsZUNyeXB0by5zaWduKC4uLilgIG91dHB1dHMgc2lnbmF0dXJlIGluIElFRUUgUDEzNjMgZm9ybWF0OlxuICogLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3VidGxlQ3J5cHRvL3NpZ24jZWNkc2FcbiAqXG4gKiBUdXJua2V5IGV4cGVjdHMgdGhlIHNpZ25hdHVyZSBlbmNvZGluZyB0byBiZSBERVItZW5jb2RlZCBBU04uMTpcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL3RraHEvdGtjbGkvYmxvYi83ZjAxNTlhZjVhNzMzODdmZjA1MDY0NzE4MGQxZGI0ZDNhM2FhMDMzL3NyYy9pbnRlcm5hbC9hcGlrZXkvYXBpa2V5LmdvI0wxNDlcbiAqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDExNFxuICpcbiAqIFRyYW5zZm9ybSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSAxMzYzIGVuY29kaW5nIHRvIERFUiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gaWVlZSB0aGUgRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgZW5jb2RpbmdcbiAqIEByZXR1cm4gRUNEU0Egc2lnbmF0dXJlIGluIERFUiBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKGllZWUpIHtcbiAgICBpZiAoaWVlZS5sZW5ndGggJSAyICE9IDAgfHwgaWVlZS5sZW5ndGggPT0gMCB8fCBpZWVlLmxlbmd0aCA+IDEzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElFRUUgUDEzNjMgc2lnbmF0dXJlIGVuY29kaW5nLiBMZW5ndGg6IFwiICsgaWVlZS5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCByID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KDAsIGllZWUubGVuZ3RoIC8gMikpO1xuICAgIGNvbnN0IHMgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoaWVlZS5sZW5ndGggLyAyLCBpZWVlLmxlbmd0aCkpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgci5sZW5ndGggKyAxICsgMSArIHMubGVuZ3RoO1xuICAgIGxldCBkZXI7XG4gICAgaWYgKGxlbmd0aCA+PSAxMjgpIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMyk7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDEyOCArIDE7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAyKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gci5sZW5ndGg7XG4gICAgZGVyLnNldChyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSByLmxlbmd0aDtcbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gcy5sZW5ndGg7XG4gICAgZGVyLnNldChzLCBvZmZzZXQpO1xuICAgIHJldHVybiBkZXI7XG59XG4vKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMzExXG4gKlxuICogVHJhbnNmb3JtIGEgYmlnIGludGVnZXIgaW4gYmlnIGVuZGlhbiB0byBtaW5pbWFsIHVuc2lnbmVkIGZvcm0gd2hpY2ggaGFzXG4gKiBubyBleHRyYSB6ZXJvIGF0IHRoZSBiZWdpbm5pbmcgZXhjZXB0IHdoZW4gdGhlIGhpZ2hlc3QgYml0IGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gdG9VbnNpZ25lZEJpZ051bShieXRlcykge1xuICAgIC8vIFJlbW92ZSB6ZXJvIHByZWZpeGVzLlxuICAgIGxldCBzdGFydCA9IDA7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnl0ZXMubGVuZ3RoICYmIGJ5dGVzW3N0YXJ0XSA9PSAwKSB7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3RhcnQgPSBieXRlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBsZXQgZXh0cmFaZXJvID0gMDtcbiAgICAvLyBJZiB0aGUgMXN0IGJpdCBpcyBub3QgemVybywgYWRkIDEgemVybyBieXRlLlxuICAgIGlmICgoYnl0ZXNbc3RhcnRdICYgMTI4KSA9PSAxMjgpIHtcbiAgICAgICAgLy8gQWRkIGV4dHJhIHplcm8uXG4gICAgICAgIGV4dHJhWmVybyA9IDE7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCAtIHN0YXJ0ICsgZXh0cmFaZXJvKTtcbiAgICByZXMuc2V0KGJ5dGVzLnN1YmFycmF5KHN0YXJ0KSwgZXh0cmFaZXJvKTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs":
/*!********************************************************!*\
  !*** ../node_modules/@turnkey/encoding/dist/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction hexStringToBase64url(input, length) {\n    // Add an extra 0 to the start of the string to get a valid hex string (even length)\n    // (e.g. 0x0123 instead of 0x123)\n    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, \"0\");\n    const buffer = uint8ArrayFromHexString(hexString, length);\n    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\nconst uint8ArrayFromHexString = (hexString, length) => {\n    const hexRegex = /^[0-9A-Fa-f]+$/;\n    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {\n        throw new Error(`cannot create uint8array from invalid hex string: \"${hexString}\"`);\n    }\n    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));\n    if (!length) {\n        return buffer;\n    }\n    if (hexString.length / 2 > length) {\n        throw new Error(\"hex value cannot fit in a buffer of \" + length + \" byte(s)\");\n    }\n    // If a length is specified, ensure we sufficiently pad\n    let paddedBuffer = new Uint8Array(length);\n    paddedBuffer.set(buffer, length - buffer.length);\n    return paddedBuffer;\n};\n// Pure JS implementation of btoa. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2VuY29kaW5nL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLFVBQVU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0Esd0ZBQXdGLGlCQUFpQixjQUFjLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrSztBQUMvSyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi93ZWJhdXRobi1qc29uL2Jsb2IvZTkzMmIzNTg1ZmE3MGIwYmQ1YjVhNDAxMmJhN2RiYWQ3YjBhMGQwZi9zcmMvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwudHMjTDIzXG4gKi9cbmNvbnN0IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCA9IDMyO1xuZnVuY3Rpb24gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoaW5wdXQpIHtcbiAgICAvLyBzdHJpbmcgdG8gYmFzZTY0IC0tIHdlIGRvIG5vdCByZWx5IG9uIHRoZSBicm93c2VyJ3MgYnRvYSBzaW5jZSBpdCdzIG5vdCBwcmVzZW50IGluIFJlYWN0IE5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKGlucHV0KTtcbiAgICByZXR1cm4gYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nKGJhc2U2NFN0cmluZyk7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmdUb0Jhc2U2NHVybChpbnB1dCwgbGVuZ3RoKSB7XG4gICAgLy8gQWRkIGFuIGV4dHJhIDAgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmcgdG8gZ2V0IGEgdmFsaWQgaGV4IHN0cmluZyAoZXZlbiBsZW5ndGgpXG4gICAgLy8gKGUuZy4gMHgwMTIzIGluc3RlYWQgb2YgMHgxMjMpXG4gICAgY29uc3QgaGV4U3RyaW5nID0gaW5wdXQucGFkU3RhcnQoTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAvIDIpICogMiwgXCIwXCIpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nKGhleFN0cmluZywgbGVuZ3RoKTtcbiAgICByZXR1cm4gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoYnVmZmVyLnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpLCBcIlwiKSk7XG59XG5mdW5jdGlvbiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpLnJlcGxhY2UoLz0vZywgXCJcIik7XG59XG5mdW5jdGlvbiB1aW50OEFycmF5VG9IZXhTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIHgudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgXCJcIik7XG59XG5jb25zdCB1aW50OEFycmF5RnJvbUhleFN0cmluZyA9IChoZXhTdHJpbmcsIGxlbmd0aCkgPT4ge1xuICAgIGNvbnN0IGhleFJlZ2V4ID0gL15bMC05QS1GYS1mXSskLztcbiAgICBpZiAoIWhleFN0cmluZyB8fCBoZXhTdHJpbmcubGVuZ3RoICUgMiAhPSAwIHx8ICFoZXhSZWdleC50ZXN0KGhleFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgY3JlYXRlIHVpbnQ4YXJyYXkgZnJvbSBpbnZhbGlkIGhleCBzdHJpbmc6IFwiJHtoZXhTdHJpbmd9XCJgKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGV4U3RyaW5nLm1hdGNoKC8uLi9nKS5tYXAoKGgpID0+IHBhcnNlSW50KGgsIDE2KSkpO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIGlmIChoZXhTdHJpbmcubGVuZ3RoIC8gMiA+IGxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggdmFsdWUgY2Fubm90IGZpdCBpbiBhIGJ1ZmZlciBvZiBcIiArIGxlbmd0aCArIFwiIGJ5dGUocylcIik7XG4gICAgfVxuICAgIC8vIElmIGEgbGVuZ3RoIGlzIHNwZWNpZmllZCwgZW5zdXJlIHdlIHN1ZmZpY2llbnRseSBwYWRcbiAgICBsZXQgcGFkZGVkQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBwYWRkZWRCdWZmZXIuc2V0KGJ1ZmZlciwgbGVuZ3RoIC0gYnVmZmVyLmxlbmd0aCk7XG4gICAgcmV0dXJuIHBhZGRlZEJ1ZmZlcjtcbn07XG4vLyBQdXJlIEpTIGltcGxlbWVudGF0aW9uIG9mIGJ0b2EuIFRoaXMgaXMgYWRhcHRlZCBmcm9tIHRoZSBmb2xsb3dpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vYWJhYi9ibG9iLzgwODc0YWUxZmUxY2RlMmU1ODdiYjZlNTFiNmQ3YzliNDJjYTFkMzQvbGliL2J0b2EuanNcbmZ1bmN0aW9uIGJ0b2Eocykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgIH1cbiAgICBsZXQgaTtcbiAgICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICAgIHMgPSBgJHtzfWA7XG4gICAgLy8gXCJUaGUgYnRvYSgpIG1ldGhvZCBtdXN0IHRocm93IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIgRE9NRXhjZXB0aW9uIGlmXG4gICAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZENoYXJhY3RlckVycm9yOiBmb3VuZCBjb2RlIHBvaW50IGdyZWF0ZXIgdGhhbiAyNTU6JHtzLmNoYXJDb2RlQXQoaSl9IGF0IHBvc2l0aW9uICR7aX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBncm91cHNPZlNpeCA9IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXTtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzFdIHw9IHMuY2hhckNvZGVBdChpICsgMSkgPj4gNDtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdID0gKHMuY2hhckNvZGVBdChpICsgMSkgJiAweDBmKSA8PCAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICAgICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICAgICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gYnRvYUxvb2t1cChncm91cHNPZlNpeFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgQVNDSUkgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGtleXN0ciA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGtleXN0cltpbmRleF07XG4gICAgfVxuICAgIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCwgYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nLCBoZXhTdHJpbmdUb0Jhc2U2NHVybCwgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcsIHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nLCB1aW50OEFycmF5VG9IZXhTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!*************************************************************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get the attestation document corresponding to an enclave.\n         *\n         * Sign the provided `TGetAttestationDocumentBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_attestation).\n         *\n         * See also {@link stampGetAttestationDocument}.\n         */\n        this.getAttestationDocument = async (input) => {\n            return this.request(\"/public/v1/query/get_attestation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAttestationDocumentBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAttestationDocument}.\n         */\n        this.stampGetAttestationDocument = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_attestation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about Oauth providers for a user\n         *\n         * Sign the provided `TGetOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_oauth_providers).\n         *\n         * See also {@link stampGetOauthProviders}.\n         */\n        this.getOauthProviders = async (input) => {\n            return this.request(\"/public/v1/query/get_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOauthProviders}.\n         */\n        this.stampGetOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get quorum settings and features for an organization\n         *\n         * Sign the provided `TGetOrganizationConfigsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization_configs).\n         *\n         * See also {@link stampGetOrganizationConfigs}.\n         */\n        this.getOrganizationConfigs = async (input) => {\n            return this.request(\"/public/v1/query/get_organization_configs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationConfigsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganizationConfigs}.\n         */\n        this.stampGetOrganizationConfigs = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization_configs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get all suborg IDs associated given a parent org ID and an optional filter.\n         *\n         * Sign the provided `TGetSubOrgIdsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_suborgs).\n         *\n         * See also {@link stampGetSubOrgIds}.\n         */\n        this.getSubOrgIds = async (input) => {\n            return this.request(\"/public/v1/query/list_suborgs\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetSubOrgIdsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetSubOrgIds}.\n         */\n        this.stampGetSubOrgIds = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_suborgs\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Creates Oauth providers for a specified user - BETA\n         *\n         * Sign the provided `TCreateOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_oauth_providers).\n         *\n         * See also {@link stampCreateOauthProviders}.\n         */\n        this.createOauthProviders = async (input) => {\n            return this.request(\"/public/v1/submit/create_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateOauthProviders}.\n         */\n        this.stampCreateOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Policies\n         *\n         * Sign the provided `TCreatePoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policies).\n         *\n         * See also {@link stampCreatePolicies}.\n         */\n        this.createPolicies = async (input) => {\n            return this.request(\"/public/v1/submit/create_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicies}.\n         */\n        this.stampCreatePolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a read only session for a user (valid for 1 hour)\n         *\n         * Sign the provided `TCreateReadOnlySessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_only_session).\n         *\n         * See also {@link stampCreateReadOnlySession}.\n         */\n        this.createReadOnlySession = async (input) => {\n            return this.request(\"/public/v1/submit/create_read_only_session\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateReadOnlySessionBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateReadOnlySession}.\n         */\n        this.stampCreateReadOnlySession = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_read_only_session\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a read write session for a user\n         *\n         * Sign the provided `TCreateReadWriteSessionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_read_write_session).\n         *\n         * See also {@link stampCreateReadWriteSession}.\n         */\n        this.createReadWriteSession = async (input) => {\n            return this.request(\"/public/v1/submit/create_read_write_session\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateReadWriteSessionBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateReadWriteSession}.\n         */\n        this.stampCreateReadWriteSession = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_read_write_session\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes Oauth providers for a specified user - BETA\n         *\n         * Sign the provided `TDeleteOauthProvidersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_oauth_providers).\n         *\n         * See also {@link stampDeleteOauthProviders}.\n         */\n        this.deleteOauthProviders = async (input) => {\n            return this.request(\"/public/v1/submit/delete_oauth_providers\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteOauthProvidersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteOauthProviders}.\n         */\n        this.stampDeleteOauthProviders = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_oauth_providers\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Private Key Tags within an Organization\n         *\n         * Sign the provided `TDeletePrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_private_key_tags).\n         *\n         * See also {@link stampDeletePrivateKeyTags}.\n         */\n        this.deletePrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePrivateKeyTags}.\n         */\n        this.stampDeletePrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete User Tags within an Organization\n         *\n         * Sign the provided `TDeleteUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_user_tags).\n         *\n         * See also {@link stampDeleteUserTags}.\n         */\n        this.deleteUserTags = async (input) => {\n            return this.request(\"/public/v1/submit/delete_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUserTags}.\n         */\n        this.stampDeleteUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete Users within an Organization\n         *\n         * Sign the provided `TDeleteUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_users).\n         *\n         * See also {@link stampDeleteUsers}.\n         */\n        this.deleteUsers = async (input) => {\n            return this.request(\"/public/v1/submit/delete_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteUsers}.\n         */\n        this.stampDeleteUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a private key\n         *\n         * Sign the provided `TImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_private_key).\n         *\n         * See also {@link stampImportPrivateKey}.\n         */\n        this.importPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportPrivateKey}.\n         */\n        this.stampImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Imports a wallet\n         *\n         * Sign the provided `TImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/import_wallet).\n         *\n         * See also {@link stampImportWallet}.\n         */\n        this.importWallet = async (input) => {\n            return this.request(\"/public/v1/submit/import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ImportWallet}.\n         */\n        this.stampImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new private key import\n         *\n         * Sign the provided `TInitImportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_private_key).\n         *\n         * See also {@link stampInitImportPrivateKey}.\n         */\n        this.initImportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportPrivateKey}.\n         */\n        this.stampInitImportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new wallet import\n         *\n         * Sign the provided `TInitImportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_import_wallet).\n         *\n         * See also {@link stampInitImportWallet}.\n         */\n        this.initImportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/init_import_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitImportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitImportWallet}.\n         */\n        this.stampInitImportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_import_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user with an Oidc token (Oauth) - BETA\n         *\n         * Sign the provided `TOauthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/oauth).\n         *\n         * See also {@link stampOauth}.\n         */\n        this.oauth = async (input) => {\n            return this.request(\"/public/v1/submit/oauth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TOauthBody` by using the client's `stamp` function.\n         *\n         * See also {@link Oauth}.\n         */\n        this.stampOauth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/oauth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign multiple raw payloads with the same signing parameters\n         *\n         * Sign the provided `TSignRawPayloadsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payloads).\n         *\n         * See also {@link stampSignRawPayloads}.\n         */\n        this.signRawPayloads = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payloads\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadsBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayloads}.\n         */\n        this.stampSignRawPayloads = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payloads\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!**************************************************************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createOauthProviders: () => (/* binding */ createOauthProviders),\n/* harmony export */   createPolicies: () => (/* binding */ createPolicies),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createReadOnlySession: () => (/* binding */ createReadOnlySession),\n/* harmony export */   createReadWriteSession: () => (/* binding */ createReadWriteSession),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deleteOauthProviders: () => (/* binding */ deleteOauthProviders),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   deletePrivateKeyTags: () => (/* binding */ deletePrivateKeyTags),\n/* harmony export */   deleteUserTags: () => (/* binding */ deleteUserTags),\n/* harmony export */   deleteUsers: () => (/* binding */ deleteUsers),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAttestationDocument: () => (/* binding */ getAttestationDocument),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOauthProviders: () => (/* binding */ getOauthProviders),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getOrganizationConfigs: () => (/* binding */ getOrganizationConfigs),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getSubOrgIds: () => (/* binding */ getSubOrgIds),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   importPrivateKey: () => (/* binding */ importPrivateKey),\n/* harmony export */   importWallet: () => (/* binding */ importWallet),\n/* harmony export */   initImportPrivateKey: () => (/* binding */ initImportPrivateKey),\n/* harmony export */   initImportWallet: () => (/* binding */ initImportWallet),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   oauth: () => (/* binding */ oauth),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreateOauthProviders: () => (/* binding */ signCreateOauthProviders),\n/* harmony export */   signCreatePolicies: () => (/* binding */ signCreatePolicies),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateReadOnlySession: () => (/* binding */ signCreateReadOnlySession),\n/* harmony export */   signCreateReadWriteSession: () => (/* binding */ signCreateReadWriteSession),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeleteOauthProviders: () => (/* binding */ signDeleteOauthProviders),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signDeletePrivateKeyTags: () => (/* binding */ signDeletePrivateKeyTags),\n/* harmony export */   signDeleteUserTags: () => (/* binding */ signDeleteUserTags),\n/* harmony export */   signDeleteUsers: () => (/* binding */ signDeleteUsers),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAttestationDocument: () => (/* binding */ signGetAttestationDocument),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOauthProviders: () => (/* binding */ signGetOauthProviders),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetOrganizationConfigs: () => (/* binding */ signGetOrganizationConfigs),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetSubOrgIds: () => (/* binding */ signGetSubOrgIds),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signImportPrivateKey: () => (/* binding */ signImportPrivateKey),\n/* harmony export */   signImportWallet: () => (/* binding */ signImportWallet),\n/* harmony export */   signInitImportPrivateKey: () => (/* binding */ signInitImportPrivateKey),\n/* harmony export */   signInitImportWallet: () => (/* binding */ signInitImportWallet),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signOauth: () => (/* binding */ signOauth),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRawPayloads: () => (/* binding */ signRawPayloads),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignRawPayloads: () => (/* binding */ signSignRawPayloads),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Attestation\n *\n * Get the attestation document corresponding to an enclave.\n *\n * `POST /public/v1/query/get_attestation`\n */\nconst getAttestationDocument = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_attestation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAttestationDocument}\n */\nconst signGetAttestationDocument = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_attestation\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Oauth providers\n *\n * Get details about Oauth providers for a user\n *\n * `POST /public/v1/query/get_oauth_providers`\n */\nconst getOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOauthProviders}\n */\nconst signGetOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Configs\n *\n * Get quorum settings and features for an organization\n *\n * `POST /public/v1/query/get_organization_configs`\n */\nconst getOrganizationConfigs = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization_configs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganizationConfigs}\n */\nconst signGetOrganizationConfigs = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization_configs\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Suborgs\n *\n * Get all suborg IDs associated given a parent org ID and an optional filter.\n *\n * `POST /public/v1/query/list_suborgs`\n */\nconst getSubOrgIds = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_suborgs\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetSubOrgIds}\n */\nconst signGetSubOrgIds = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_suborgs\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Oauth Providers\n *\n * Creates Oauth providers for a specified user - BETA\n *\n * `POST /public/v1/submit/create_oauth_providers`\n */\nconst createOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateOauthProviders}\n */\nconst signCreateOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policies\n *\n * Create new Policies\n *\n * `POST /public/v1/submit/create_policies`\n */\nconst createPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicies}\n */\nconst signCreatePolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policies\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Read Only Session\n *\n * Create a read only session for a user (valid for 1 hour)\n *\n * `POST /public/v1/submit/create_read_only_session`\n */\nconst createReadOnlySession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_read_only_session\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateReadOnlySession}\n */\nconst signCreateReadOnlySession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_read_only_session\",\n    body: input.body,\n    options,\n});\n/**\n * Create Read Write Session\n *\n * Create a read write session for a user\n *\n * `POST /public/v1/submit/create_read_write_session`\n */\nconst createReadWriteSession = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_read_write_session\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateReadWriteSession}\n */\nconst signCreateReadWriteSession = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_read_write_session\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Oauth Providers\n *\n * Removes Oauth providers for a specified user - BETA\n *\n * `POST /public/v1/submit/delete_oauth_providers`\n */\nconst deleteOauthProviders = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_oauth_providers\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteOauthProviders}\n */\nconst signDeleteOauthProviders = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_oauth_providers\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Private Key Tags\n *\n * Delete Private Key Tags within an Organization\n *\n * `POST /public/v1/submit/delete_private_key_tags`\n */\nconst deletePrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePrivateKeyTags}\n */\nconst signDeletePrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete User Tags\n *\n * Delete User Tags within an Organization\n *\n * `POST /public/v1/submit/delete_user_tags`\n */\nconst deleteUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUserTags}\n */\nconst signDeleteUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Users\n *\n * Delete Users within an Organization\n *\n * `POST /public/v1/submit/delete_users`\n */\nconst deleteUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteUsers}\n */\nconst signDeleteUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_users\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Import Private Key\n *\n * Imports a private key\n *\n * `POST /public/v1/submit/import_private_key`\n */\nconst importPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportPrivateKey}\n */\nconst signImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Import Wallet\n *\n * Imports a wallet\n *\n * `POST /public/v1/submit/import_wallet`\n */\nconst importWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ImportWallet}\n */\nconst signImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Private Key\n *\n * Initializes a new private key import\n *\n * `POST /public/v1/submit/init_import_private_key`\n */\nconst initImportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportPrivateKey}\n */\nconst signInitImportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Init Import Wallet\n *\n * Initializes a new wallet import\n *\n * `POST /public/v1/submit/init_import_wallet`\n */\nconst initImportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitImportWallet}\n */\nconst signInitImportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_import_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Oauth\n *\n * Authenticate a user with an Oidc token (Oauth) - BETA\n *\n * `POST /public/v1/submit/oauth`\n */\nconst oauth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/oauth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.\n *\n * See {@link Oauth}\n */\nconst signOauth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/oauth\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payloads\n *\n * Sign multiple raw payloads with the same signing parameters\n *\n * `POST /public/v1/submit/sign_raw_payloads`\n */\nconst signRawPayloads = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayloads}\n */\nconst signSignRawPayloads = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payloads\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmZldGNoZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlFOztBQUVqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsd0RBQWE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsd0RBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtEQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwyQ0FBMkMsd0RBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1REFBdUQsd0RBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtEQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxrREFBa0Qsd0RBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtEQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxrREFBa0Qsd0RBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxnREFBZ0Qsd0RBQWE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1REFBdUQsd0RBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsd0RBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtEQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx3Q0FBd0Msd0RBQWE7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsd0RBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsd0RBQWE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGtEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxtREFBbUQsd0RBQWE7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwrQ0FBK0Msd0RBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGtEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx5Q0FBeUMsd0RBQWE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtEQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxrREFBa0Qsd0RBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtEQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwyQ0FBMkMsd0RBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsd0RBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxnREFBZ0Qsd0RBQWE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGtEQUFPO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxtREFBbUQsd0RBQWE7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtEQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxrREFBa0Qsd0RBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwrQ0FBK0Msd0RBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtEQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxvREFBb0Qsd0RBQWE7QUFDakU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtEQUFPO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxrREFBa0Qsd0RBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGtEQUFPO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxzREFBc0Qsd0RBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1REFBdUQsd0RBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGtEQUFPO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxzREFBc0Qsd0RBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsd0RBQWE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwrQ0FBK0Msd0RBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsd0RBQWE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtEQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsd0RBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtEQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxvREFBb0Qsd0RBQWE7QUFDakU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtEQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxxREFBcUQsd0RBQWE7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGtEQUFPO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxzREFBc0Qsd0RBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtEQUFPO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxzQ0FBc0Msd0RBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtEQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw0Q0FBNEMsd0RBQWE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwrQ0FBK0Msd0RBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGtEQUFPO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwREFBMEQsd0RBQWE7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGtEQUFPO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSx1REFBdUQsd0RBQWE7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtEQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwrQ0FBK0Msd0RBQWE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxnREFBZ0Qsd0RBQWE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGtEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxnREFBZ0Qsd0RBQWE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFPO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw2Q0FBNkMsd0RBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtEQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxvREFBb0Qsd0RBQWE7QUFDakU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGtEQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpREFBaUQsd0RBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtEQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwyQ0FBMkMsd0RBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtEQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSw4Q0FBOEMsd0RBQWE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrREFBTztBQUN2QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLG9DQUFvQyx3REFBYTtBQUNqRDtBQUNBLENBQUM7O0FBRTJvRjtBQUM1b0YiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9fX2dlbmVyYXRlZF9fL3NlcnZpY2VzL2Nvb3JkaW5hdG9yL3B1YmxpYy92MS9wdWJsaWNfYXBpLmZldGNoZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVlc3QsIHNpZ25lZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9iYXNlLm1qcyc7XG5cbi8qIEBnZW5lcmF0ZWQgYnkgYEB0dXJua2V5L2ZldGNoZXJzYC4gRE8gTk9UIEVESVQgQlkgSEFORCAqL1xuLyoqXG4gKiBHZXQgQWN0aXZpdHlcbiAqXG4gKiBHZXQgZGV0YWlscyBhYm91dCBhbiBBY3Rpdml0eVxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FjdGl2aXR5YFxuICovXG5jb25zdCBnZXRBY3Rpdml0eSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FjdGl2aXR5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0QWN0aXZpdHlgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0QWN0aXZpdHl9XG4gKi9cbmNvbnN0IHNpZ25HZXRBY3Rpdml0eSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FjdGl2aXR5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEdldCBBUEkga2V5XG4gKlxuICogR2V0IGRldGFpbHMgYWJvdXQgYW4gQVBJIGtleVxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlgXG4gKi9cbmNvbnN0IGdldEFwaUtleSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRBcGlLZXlgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0QXBpS2V5fVxuICovXG5jb25zdCBzaWduR2V0QXBpS2V5ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXBpX2tleVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBHZXQgQVBJIGtleVxuICpcbiAqIEdldCBkZXRhaWxzIGFib3V0IEFQSSBrZXlzIGZvciBhIHVzZXJcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9hcGlfa2V5c2BcbiAqL1xuY29uc3QgZ2V0QXBpS2V5cyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0QXBpS2V5c2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBHZXRBcGlLZXlzfVxuICovXG5jb25zdCBzaWduR2V0QXBpS2V5cyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X2FwaV9rZXlzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEF0dGVzdGF0aW9uXG4gKlxuICogR2V0IHRoZSBhdHRlc3RhdGlvbiBkb2N1bWVudCBjb3JyZXNwb25kaW5nIHRvIGFuIGVuY2xhdmUuXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfYXR0ZXN0YXRpb25gXG4gKi9cbmNvbnN0IGdldEF0dGVzdGF0aW9uRG9jdW1lbnQgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdHRlc3RhdGlvblwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldEF0dGVzdGF0aW9uRG9jdW1lbnRgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0QXR0ZXN0YXRpb25Eb2N1bWVudH1cbiAqL1xuY29uc3Qgc2lnbkdldEF0dGVzdGF0aW9uRG9jdW1lbnQgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdHRlc3RhdGlvblwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBHZXQgQXV0aGVudGljYXRvclxuICpcbiAqIEdldCBkZXRhaWxzIGFib3V0IGFuIGF1dGhlbnRpY2F0b3JcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yYFxuICovXG5jb25zdCBnZXRBdXRoZW50aWNhdG9yID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfYXV0aGVudGljYXRvclwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldEF1dGhlbnRpY2F0b3JgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0QXV0aGVudGljYXRvcn1cbiAqL1xuY29uc3Qgc2lnbkdldEF1dGhlbnRpY2F0b3IgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEdldCBBdXRoZW50aWNhdG9yc1xuICpcbiAqIEdldCBkZXRhaWxzIGFib3V0IGF1dGhlbnRpY2F0b3JzIGZvciBhIHVzZXJcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yc2BcbiAqL1xuY29uc3QgZ2V0QXV0aGVudGljYXRvcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldEF1dGhlbnRpY2F0b3JzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldEF1dGhlbnRpY2F0b3JzfVxuICovXG5jb25zdCBzaWduR2V0QXV0aGVudGljYXRvcnMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9hdXRoZW50aWNhdG9yc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBHZXQgT2F1dGggcHJvdmlkZXJzXG4gKlxuICogR2V0IGRldGFpbHMgYWJvdXQgT2F1dGggcHJvdmlkZXJzIGZvciBhIHVzZXJcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9vYXV0aF9wcm92aWRlcnNgXG4gKi9cbmNvbnN0IGdldE9hdXRoUHJvdmlkZXJzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfb2F1dGhfcHJvdmlkZXJzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0T2F1dGhQcm92aWRlcnNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0T2F1dGhQcm92aWRlcnN9XG4gKi9cbmNvbnN0IHNpZ25HZXRPYXV0aFByb3ZpZGVycyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X29hdXRoX3Byb3ZpZGVyc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBHZXQgT3JnYW5pemF0aW9uXG4gKlxuICogR2V0IGRldGFpbHMgYWJvdXQgYW4gT3JnYW5pemF0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uYFxuICovXG5jb25zdCBnZXRPcmdhbml6YXRpb24gPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9vcmdhbml6YXRpb25cIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRPcmdhbml6YXRpb25gIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0T3JnYW5pemF0aW9ufVxuICovXG5jb25zdCBzaWduR2V0T3JnYW5pemF0aW9uID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEdldCBDb25maWdzXG4gKlxuICogR2V0IHF1b3J1bSBzZXR0aW5ncyBhbmQgZmVhdHVyZXMgZm9yIGFuIG9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvZ2V0X29yZ2FuaXphdGlvbl9jb25maWdzYFxuICovXG5jb25zdCBnZXRPcmdhbml6YXRpb25Db25maWdzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uX2NvbmZpZ3NcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRPcmdhbml6YXRpb25Db25maWdzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldE9yZ2FuaXphdGlvbkNvbmZpZ3N9XG4gKi9cbmNvbnN0IHNpZ25HZXRPcmdhbml6YXRpb25Db25maWdzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfb3JnYW5pemF0aW9uX2NvbmZpZ3NcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogR2V0IFBvbGljeVxuICpcbiAqIEdldCBkZXRhaWxzIGFib3V0IGEgUG9saWN5XG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfcG9saWN5YFxuICovXG5jb25zdCBnZXRQb2xpY3kgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF9wb2xpY3lcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRQb2xpY3lgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0UG9saWN5fVxuICovXG5jb25zdCBzaWduR2V0UG9saWN5ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfcG9saWN5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEdldCBQcml2YXRlIEtleVxuICpcbiAqIEdldCBkZXRhaWxzIGFib3V0IGEgUHJpdmF0ZSBLZXlcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF9wcml2YXRlX2tleWBcbiAqL1xuY29uc3QgZ2V0UHJpdmF0ZUtleSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3ByaXZhdGVfa2V5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0UHJpdmF0ZUtleWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBHZXRQcml2YXRlS2V5fVxuICovXG5jb25zdCBzaWduR2V0UHJpdmF0ZUtleSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3ByaXZhdGVfa2V5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEdldCBVc2VyXG4gKlxuICogR2V0IGRldGFpbHMgYWJvdXQgYSBVc2VyXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9nZXRfdXNlcmBcbiAqL1xuY29uc3QgZ2V0VXNlciA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3VzZXJcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRVc2VyYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldFVzZXJ9XG4gKi9cbmNvbnN0IHNpZ25HZXRVc2VyID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9nZXRfdXNlclwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBHZXQgV2FsbGV0XG4gKlxuICogR2V0IGRldGFpbHMgYWJvdXQgYSBXYWxsZXRcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2dldF93YWxsZXRgXG4gKi9cbmNvbnN0IGdldFdhbGxldCA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvZ2V0X3dhbGxldFwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldFdhbGxldGAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBHZXRXYWxsZXR9XG4gKi9cbmNvbnN0IHNpZ25HZXRXYWxsZXQgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2dldF93YWxsZXRcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogTGlzdCBBY3Rpdml0aWVzXG4gKlxuICogTGlzdCBhbGwgQWN0aXZpdGllcyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9saXN0X2FjdGl2aXRpZXNgXG4gKi9cbmNvbnN0IGdldEFjdGl2aXRpZXMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfYWN0aXZpdGllc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldEFjdGl2aXRpZXNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0QWN0aXZpdGllc31cbiAqL1xuY29uc3Qgc2lnbkdldEFjdGl2aXRpZXMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfYWN0aXZpdGllc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBMaXN0IFBvbGljaWVzXG4gKlxuICogTGlzdCBhbGwgUG9saWNpZXMgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF9wb2xpY2llc2BcbiAqL1xuY29uc3QgZ2V0UG9saWNpZXMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcG9saWNpZXNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRQb2xpY2llc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBHZXRQb2xpY2llc31cbiAqL1xuY29uc3Qgc2lnbkdldFBvbGljaWVzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3BvbGljaWVzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIExpc3QgUHJpdmF0ZSBLZXkgVGFnc1xuICpcbiAqIExpc3QgYWxsIFByaXZhdGUgS2V5IFRhZ3Mgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF9wcml2YXRlX2tleV90YWdzYFxuICovXG5jb25zdCBsaXN0UHJpdmF0ZUtleVRhZ3MgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcHJpdmF0ZV9rZXlfdGFnc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYExpc3RQcml2YXRlS2V5VGFnc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBMaXN0UHJpdmF0ZUtleVRhZ3N9XG4gKi9cbmNvbnN0IHNpZ25MaXN0UHJpdmF0ZUtleVRhZ3MgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcHJpdmF0ZV9rZXlfdGFnc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBMaXN0IFByaXZhdGUgS2V5c1xuICpcbiAqIExpc3QgYWxsIFByaXZhdGUgS2V5cyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS9saXN0X3ByaXZhdGVfa2V5c2BcbiAqL1xuY29uc3QgZ2V0UHJpdmF0ZUtleXMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfcHJpdmF0ZV9rZXlzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0UHJpdmF0ZUtleXNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0UHJpdmF0ZUtleXN9XG4gKi9cbmNvbnN0IHNpZ25HZXRQcml2YXRlS2V5cyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvbGlzdF9wcml2YXRlX2tleXNcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogR2V0IFN1Ym9yZ3NcbiAqXG4gKiBHZXQgYWxsIHN1Ym9yZyBJRHMgYXNzb2NpYXRlZCBnaXZlbiBhIHBhcmVudCBvcmcgSUQgYW5kIGFuIG9wdGlvbmFsIGZpbHRlci5cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3F1ZXJ5L2xpc3Rfc3Vib3Jnc2BcbiAqL1xuY29uc3QgZ2V0U3ViT3JnSWRzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3N1Ym9yZ3NcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRTdWJPcmdJZHNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgR2V0U3ViT3JnSWRzfVxuICovXG5jb25zdCBzaWduR2V0U3ViT3JnSWRzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3N1Ym9yZ3NcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogTGlzdCBVc2VyIFRhZ3NcbiAqXG4gKiBMaXN0IGFsbCBVc2VyIFRhZ3Mgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2VyX3RhZ3NgXG4gKi9cbmNvbnN0IGxpc3RVc2VyVGFncyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2VyX3RhZ3NcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBMaXN0VXNlclRhZ3NgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgTGlzdFVzZXJUYWdzfVxuICovXG5jb25zdCBzaWduTGlzdFVzZXJUYWdzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3VzZXJfdGFnc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBMaXN0IFVzZXJzXG4gKlxuICogTGlzdCBhbGwgVXNlcnMgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF91c2Vyc2BcbiAqL1xuY29uc3QgZ2V0VXNlcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3RfdXNlcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRVc2Vyc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBHZXRVc2Vyc31cbiAqL1xuY29uc3Qgc2lnbkdldFVzZXJzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3VzZXJzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIExpc3QgV2FsbGV0cyBBY2NvdW50c1xuICpcbiAqIExpc3QgYWxsIEFjY291bnRzIHdpcmhpbiBhIFdhbGxldFxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF93YWxsZXRfYWNjb3VudHNgXG4gKi9cbmNvbnN0IGdldFdhbGxldEFjY291bnRzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldF9hY2NvdW50c1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEdldFdhbGxldEFjY291bnRzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldFdhbGxldEFjY291bnRzfVxuICovXG5jb25zdCBzaWduR2V0V2FsbGV0QWNjb3VudHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3F1ZXJ5L2xpc3Rfd2FsbGV0X2FjY291bnRzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIExpc3QgV2FsbGV0c1xuICpcbiAqIExpc3QgYWxsIFdhbGxldHMgd2l0aGluIGFuIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvcXVlcnkvbGlzdF93YWxsZXRzYFxuICovXG5jb25zdCBnZXRXYWxsZXRzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldHNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBHZXRXYWxsZXRzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldFdhbGxldHN9XG4gKi9cbmNvbnN0IHNpZ25HZXRXYWxsZXRzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9xdWVyeS9saXN0X3dhbGxldHNcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogV2hvIGFtIEk/XG4gKlxuICogR2V0IGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgY3VycmVudCBBUEkgb3IgV2ViQXV0aE4gdXNlciBhbmQgdGhlaXIgb3JnYW5pemF0aW9uLiBBZmZvcmRzIFN1Yi1Pcmdhbml6YXRpb24gbG9vayB1cHMgdmlhIFBhcmVudCBPcmdhbml6YXRpb24gZm9yIFdlYkF1dGhOIG9yIEFQSSBrZXkgdXNlcnMuXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9xdWVyeS93aG9hbWlgXG4gKi9cbmNvbnN0IGdldFdob2FtaSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvd2hvYW1pXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgR2V0V2hvYW1pYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEdldFdob2FtaX1cbiAqL1xuY29uc3Qgc2lnbkdldFdob2FtaSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvcXVlcnkvd2hvYW1pXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEFwcHJvdmUgQWN0aXZpdHlcbiAqXG4gKiBBcHByb3ZlIGFuIEFjdGl2aXR5XG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvYXBwcm92ZV9hY3Rpdml0eWBcbiAqL1xuY29uc3QgYXBwcm92ZUFjdGl2aXR5ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvYXBwcm92ZV9hY3Rpdml0eVwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEFwcHJvdmVBY3Rpdml0eWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBBcHByb3ZlQWN0aXZpdHl9XG4gKi9cbmNvbnN0IHNpZ25BcHByb3ZlQWN0aXZpdHkgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9hcHByb3ZlX2FjdGl2aXR5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBBUEkgS2V5c1xuICpcbiAqIEFkZCBhcGkga2V5cyB0byBhbiBleGlzdGluZyBVc2VyXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9rZXlzYFxuICovXG5jb25zdCBjcmVhdGVBcGlLZXlzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9rZXlzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgQ3JlYXRlQXBpS2V5c2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVBcGlLZXlzfVxuICovXG5jb25zdCBzaWduQ3JlYXRlQXBpS2V5cyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hcGlfa2V5c1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBDcmVhdGUgQVBJLW9ubHkgVXNlcnNcbiAqXG4gKiBDcmVhdGUgQVBJLW9ubHkgVXNlcnMgaW4gYW4gZXhpc3RpbmcgT3JnYW5pemF0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9vbmx5X3VzZXJzYFxuICovXG5jb25zdCBjcmVhdGVBcGlPbmx5VXNlcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfYXBpX29ubHlfdXNlcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVBcGlPbmx5VXNlcnNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgQ3JlYXRlQXBpT25seVVzZXJzfVxuICovXG5jb25zdCBzaWduQ3JlYXRlQXBpT25seVVzZXJzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2FwaV9vbmx5X3VzZXJzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBBdXRoZW50aWNhdG9yc1xuICpcbiAqIENyZWF0ZSBBdXRoZW50aWNhdG9ycyB0byBhdXRoZW50aWNhdGUgcmVxdWVzdHMgdG8gVHVybmtleVxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9hdXRoZW50aWNhdG9yc2BcbiAqL1xuY29uc3QgY3JlYXRlQXV0aGVudGljYXRvcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfYXV0aGVudGljYXRvcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVBdXRoZW50aWNhdG9yc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVBdXRoZW50aWNhdG9yc31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZUF1dGhlbnRpY2F0b3JzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2F1dGhlbnRpY2F0b3JzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBJbnZpdGF0aW9uc1xuICpcbiAqIENyZWF0ZSBJbnZpdGF0aW9ucyB0byBqb2luIGFuIGV4aXN0aW5nIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9pbnZpdGF0aW9uc2BcbiAqL1xuY29uc3QgY3JlYXRlSW52aXRhdGlvbnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfaW52aXRhdGlvbnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVJbnZpdGF0aW9uc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVJbnZpdGF0aW9uc31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZUludml0YXRpb25zID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX2ludml0YXRpb25zXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBPYXV0aCBQcm92aWRlcnNcbiAqXG4gKiBDcmVhdGVzIE9hdXRoIHByb3ZpZGVycyBmb3IgYSBzcGVjaWZpZWQgdXNlciAtIEJFVEFcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfb2F1dGhfcHJvdmlkZXJzYFxuICovXG5jb25zdCBjcmVhdGVPYXV0aFByb3ZpZGVycyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9vYXV0aF9wcm92aWRlcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVPYXV0aFByb3ZpZGVyc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVPYXV0aFByb3ZpZGVyc31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZU9hdXRoUHJvdmlkZXJzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX29hdXRoX3Byb3ZpZGVyc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBDcmVhdGUgUG9saWNpZXNcbiAqXG4gKiBDcmVhdGUgbmV3IFBvbGljaWVzXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3BvbGljaWVzYFxuICovXG5jb25zdCBjcmVhdGVQb2xpY2llcyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wb2xpY2llc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYENyZWF0ZVBvbGljaWVzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIENyZWF0ZVBvbGljaWVzfVxuICovXG5jb25zdCBzaWduQ3JlYXRlUG9saWNpZXMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcG9saWNpZXNcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogQ3JlYXRlIFBvbGljeVxuICpcbiAqIENyZWF0ZSBhIG5ldyBQb2xpY3lcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcG9saWN5YFxuICovXG5jb25zdCBjcmVhdGVQb2xpY3kgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcG9saWN5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgQ3JlYXRlUG9saWN5YCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIENyZWF0ZVBvbGljeX1cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVBvbGljeSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wb2xpY3lcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogQ3JlYXRlIFByaXZhdGUgS2V5IFRhZ1xuICpcbiAqIENyZWF0ZSBhIHByaXZhdGUga2V5IHRhZyBhbmQgYWRkIGl0IHRvIHByaXZhdGUga2V5cy5cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcHJpdmF0ZV9rZXlfdGFnYFxuICovXG5jb25zdCBjcmVhdGVQcml2YXRlS2V5VGFnID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3ByaXZhdGVfa2V5X3RhZ1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYENyZWF0ZVByaXZhdGVLZXlUYWdgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgQ3JlYXRlUHJpdmF0ZUtleVRhZ31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVByaXZhdGVLZXlUYWcgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcHJpdmF0ZV9rZXlfdGFnXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBQcml2YXRlIEtleXNcbiAqXG4gKiBDcmVhdGUgbmV3IFByaXZhdGUgS2V5c1xuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9wcml2YXRlX2tleXNgXG4gKi9cbmNvbnN0IGNyZWF0ZVByaXZhdGVLZXlzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3ByaXZhdGVfa2V5c1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYENyZWF0ZVByaXZhdGVLZXlzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIENyZWF0ZVByaXZhdGVLZXlzfVxuICovXG5jb25zdCBzaWduQ3JlYXRlUHJpdmF0ZUtleXMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcHJpdmF0ZV9rZXlzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBSZWFkIE9ubHkgU2Vzc2lvblxuICpcbiAqIENyZWF0ZSBhIHJlYWQgb25seSBzZXNzaW9uIGZvciBhIHVzZXIgKHZhbGlkIGZvciAxIGhvdXIpXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3JlYWRfb25seV9zZXNzaW9uYFxuICovXG5jb25zdCBjcmVhdGVSZWFkT25seVNlc3Npb24gPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcmVhZF9vbmx5X3Nlc3Npb25cIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVSZWFkT25seVNlc3Npb25gIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgQ3JlYXRlUmVhZE9ubHlTZXNzaW9ufVxuICovXG5jb25zdCBzaWduQ3JlYXRlUmVhZE9ubHlTZXNzaW9uID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3JlYWRfb25seV9zZXNzaW9uXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBSZWFkIFdyaXRlIFNlc3Npb25cbiAqXG4gKiBDcmVhdGUgYSByZWFkIHdyaXRlIHNlc3Npb24gZm9yIGEgdXNlclxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9yZWFkX3dyaXRlX3Nlc3Npb25gXG4gKi9cbmNvbnN0IGNyZWF0ZVJlYWRXcml0ZVNlc3Npb24gPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfcmVhZF93cml0ZV9zZXNzaW9uXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgQ3JlYXRlUmVhZFdyaXRlU2Vzc2lvbmAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVSZWFkV3JpdGVTZXNzaW9ufVxuICovXG5jb25zdCBzaWduQ3JlYXRlUmVhZFdyaXRlU2Vzc2lvbiA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9yZWFkX3dyaXRlX3Nlc3Npb25cIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogQ3JlYXRlIFN1Yi1Pcmdhbml6YXRpb25cbiAqXG4gKiBDcmVhdGUgYSBuZXcgU3ViLU9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV9zdWJfb3JnYW5pemF0aW9uYFxuICovXG5jb25zdCBjcmVhdGVTdWJPcmdhbml6YXRpb24gPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfc3ViX29yZ2FuaXphdGlvblwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYENyZWF0ZVN1Yk9yZ2FuaXphdGlvbmAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVTdWJPcmdhbml6YXRpb259XG4gKi9cbmNvbnN0IHNpZ25DcmVhdGVTdWJPcmdhbml6YXRpb24gPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfc3ViX29yZ2FuaXphdGlvblwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBDcmVhdGUgVXNlciBUYWdcbiAqXG4gKiBDcmVhdGUgYSB1c2VyIHRhZyBhbmQgYWRkIGl0IHRvIHVzZXJzLlxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV91c2VyX3RhZ2BcbiAqL1xuY29uc3QgY3JlYXRlVXNlclRhZyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV91c2VyX3RhZ1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYENyZWF0ZVVzZXJUYWdgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgQ3JlYXRlVXNlclRhZ31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVVzZXJUYWcgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfdXNlcl90YWdcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogQ3JlYXRlIFVzZXJzXG4gKlxuICogQ3JlYXRlIFVzZXJzIGluIGFuIGV4aXN0aW5nIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV91c2Vyc2BcbiAqL1xuY29uc3QgY3JlYXRlVXNlcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfdXNlcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVVc2Vyc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVVc2Vyc31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVVzZXJzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3VzZXJzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIENyZWF0ZSBXYWxsZXRcbiAqXG4gKiBDcmVhdGUgYSBXYWxsZXQgYW5kIGRlcml2ZSBhZGRyZXNzZXNcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfd2FsbGV0YFxuICovXG5jb25zdCBjcmVhdGVXYWxsZXQgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfd2FsbGV0XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgQ3JlYXRlV2FsbGV0YCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIENyZWF0ZVdhbGxldH1cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVdhbGxldCA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV93YWxsZXRcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogQ3JlYXRlIFdhbGxldCBBY2NvdW50c1xuICpcbiAqIERlcml2ZSBhZGRpdGlvbmFsIGFkZHJlc3NlcyB1c2luZyBhbiBleGlzdGluZyB3YWxsZXRcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9jcmVhdGVfd2FsbGV0X2FjY291bnRzYFxuICovXG5jb25zdCBjcmVhdGVXYWxsZXRBY2NvdW50cyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2NyZWF0ZV93YWxsZXRfYWNjb3VudHNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBDcmVhdGVXYWxsZXRBY2NvdW50c2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBDcmVhdGVXYWxsZXRBY2NvdW50c31cbiAqL1xuY29uc3Qgc2lnbkNyZWF0ZVdhbGxldEFjY291bnRzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvY3JlYXRlX3dhbGxldF9hY2NvdW50c1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBEZWxldGUgQVBJIEtleXNcbiAqXG4gKiBSZW1vdmUgYXBpIGtleXMgZnJvbSBhIFVzZXJcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfYXBpX2tleXNgXG4gKi9cbmNvbnN0IGRlbGV0ZUFwaUtleXMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfYXBpX2tleXNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBEZWxldGVBcGlLZXlzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIERlbGV0ZUFwaUtleXN9XG4gKi9cbmNvbnN0IHNpZ25EZWxldGVBcGlLZXlzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX2FwaV9rZXlzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIERlbGV0ZSBBdXRoZW50aWNhdG9yc1xuICpcbiAqIFJlbW92ZSBhdXRoZW50aWNhdG9ycyBmcm9tIGEgVXNlclxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9hdXRoZW50aWNhdG9yc2BcbiAqL1xuY29uc3QgZGVsZXRlQXV0aGVudGljYXRvcnMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfYXV0aGVudGljYXRvcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBEZWxldGVBdXRoZW50aWNhdG9yc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBEZWxldGVBdXRoZW50aWNhdG9yc31cbiAqL1xuY29uc3Qgc2lnbkRlbGV0ZUF1dGhlbnRpY2F0b3JzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX2F1dGhlbnRpY2F0b3JzXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIERlbGV0ZSBJbnZpdGF0aW9uXG4gKlxuICogRGVsZXRlIGFuIGV4aXN0aW5nIEludml0YXRpb25cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfaW52aXRhdGlvbmBcbiAqL1xuY29uc3QgZGVsZXRlSW52aXRhdGlvbiA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9pbnZpdGF0aW9uXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgRGVsZXRlSW52aXRhdGlvbmAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBEZWxldGVJbnZpdGF0aW9ufVxuICovXG5jb25zdCBzaWduRGVsZXRlSW52aXRhdGlvbiA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9pbnZpdGF0aW9uXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIERlbGV0ZSBPYXV0aCBQcm92aWRlcnNcbiAqXG4gKiBSZW1vdmVzIE9hdXRoIHByb3ZpZGVycyBmb3IgYSBzcGVjaWZpZWQgdXNlciAtIEJFVEFcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfb2F1dGhfcHJvdmlkZXJzYFxuICovXG5jb25zdCBkZWxldGVPYXV0aFByb3ZpZGVycyA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9vYXV0aF9wcm92aWRlcnNcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBEZWxldGVPYXV0aFByb3ZpZGVyc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBEZWxldGVPYXV0aFByb3ZpZGVyc31cbiAqL1xuY29uc3Qgc2lnbkRlbGV0ZU9hdXRoUHJvdmlkZXJzID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX29hdXRoX3Byb3ZpZGVyc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBEZWxldGUgUG9saWN5XG4gKlxuICogRGVsZXRlIGFuIGV4aXN0aW5nIFBvbGljeVxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9wb2xpY3lgXG4gKi9cbmNvbnN0IGRlbGV0ZVBvbGljeSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV9wb2xpY3lcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBEZWxldGVQb2xpY3lgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgRGVsZXRlUG9saWN5fVxuICovXG5jb25zdCBzaWduRGVsZXRlUG9saWN5ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX3BvbGljeVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBEZWxldGUgUHJpdmF0ZSBLZXkgVGFnc1xuICpcbiAqIERlbGV0ZSBQcml2YXRlIEtleSBUYWdzIHdpdGhpbiBhbiBPcmdhbml6YXRpb25cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfcHJpdmF0ZV9rZXlfdGFnc2BcbiAqL1xuY29uc3QgZGVsZXRlUHJpdmF0ZUtleVRhZ3MgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfcHJpdmF0ZV9rZXlfdGFnc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYERlbGV0ZVByaXZhdGVLZXlUYWdzYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIERlbGV0ZVByaXZhdGVLZXlUYWdzfVxuICovXG5jb25zdCBzaWduRGVsZXRlUHJpdmF0ZUtleVRhZ3MgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfcHJpdmF0ZV9rZXlfdGFnc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBEZWxldGUgVXNlciBUYWdzXG4gKlxuICogRGVsZXRlIFVzZXIgVGFncyB3aXRoaW4gYW4gT3JnYW5pemF0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX3VzZXJfdGFnc2BcbiAqL1xuY29uc3QgZGVsZXRlVXNlclRhZ3MgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfdXNlcl90YWdzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgRGVsZXRlVXNlclRhZ3NgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgRGVsZXRlVXNlclRhZ3N9XG4gKi9cbmNvbnN0IHNpZ25EZWxldGVVc2VyVGFncyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV91c2VyX3RhZ3NcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogRGVsZXRlIFVzZXJzXG4gKlxuICogRGVsZXRlIFVzZXJzIHdpdGhpbiBhbiBPcmdhbml6YXRpb25cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9kZWxldGVfdXNlcnNgXG4gKi9cbmNvbnN0IGRlbGV0ZVVzZXJzID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZGVsZXRlX3VzZXJzXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgRGVsZXRlVXNlcnNgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgRGVsZXRlVXNlcnN9XG4gKi9cbmNvbnN0IHNpZ25EZWxldGVVc2VycyA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2RlbGV0ZV91c2Vyc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBQZXJmb3JtIEVtYWlsIEF1dGhcbiAqXG4gKiBBdXRoZW50aWNhdGUgYSB1c2VyIHZpYSBFbWFpbFxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2VtYWlsX2F1dGhgXG4gKi9cbmNvbnN0IGVtYWlsQXV0aCA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2VtYWlsX2F1dGhcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBFbWFpbEF1dGhgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgRW1haWxBdXRofVxuICovXG5jb25zdCBzaWduRW1haWxBdXRoID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZW1haWxfYXV0aFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBFeHBvcnQgUHJpdmF0ZSBLZXlcbiAqXG4gKiBFeHBvcnRzIGEgUHJpdmF0ZSBLZXlcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfcHJpdmF0ZV9rZXlgXG4gKi9cbmNvbnN0IGV4cG9ydFByaXZhdGVLZXkgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfcHJpdmF0ZV9rZXlcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBFeHBvcnRQcml2YXRlS2V5YCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEV4cG9ydFByaXZhdGVLZXl9XG4gKi9cbmNvbnN0IHNpZ25FeHBvcnRQcml2YXRlS2V5ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3ByaXZhdGVfa2V5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEV4cG9ydCBXYWxsZXRcbiAqXG4gKiBFeHBvcnRzIGEgV2FsbGV0XG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3dhbGxldGBcbiAqL1xuY29uc3QgZXhwb3J0V2FsbGV0ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvZXhwb3J0X3dhbGxldFwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEV4cG9ydFdhbGxldGAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBFeHBvcnRXYWxsZXR9XG4gKi9cbmNvbnN0IHNpZ25FeHBvcnRXYWxsZXQgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfd2FsbGV0XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEV4cG9ydCBXYWxsZXQgQWNjb3VudFxuICpcbiAqIEV4cG9ydHMgYSBXYWxsZXQgQWNjb3VudFxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2V4cG9ydF93YWxsZXRfYWNjb3VudGBcbiAqL1xuY29uc3QgZXhwb3J0V2FsbGV0QWNjb3VudCA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2V4cG9ydF93YWxsZXRfYWNjb3VudFwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYEV4cG9ydFdhbGxldEFjY291bnRgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgRXhwb3J0V2FsbGV0QWNjb3VudH1cbiAqL1xuY29uc3Qgc2lnbkV4cG9ydFdhbGxldEFjY291bnQgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9leHBvcnRfd2FsbGV0X2FjY291bnRcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogSW1wb3J0IFByaXZhdGUgS2V5XG4gKlxuICogSW1wb3J0cyBhIHByaXZhdGUga2V5XG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvaW1wb3J0X3ByaXZhdGVfa2V5YFxuICovXG5jb25zdCBpbXBvcnRQcml2YXRlS2V5ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvaW1wb3J0X3ByaXZhdGVfa2V5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgSW1wb3J0UHJpdmF0ZUtleWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBJbXBvcnRQcml2YXRlS2V5fVxuICovXG5jb25zdCBzaWduSW1wb3J0UHJpdmF0ZUtleSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2ltcG9ydF9wcml2YXRlX2tleVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBJbXBvcnQgV2FsbGV0XG4gKlxuICogSW1wb3J0cyBhIHdhbGxldFxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2ltcG9ydF93YWxsZXRgXG4gKi9cbmNvbnN0IGltcG9ydFdhbGxldCA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2ltcG9ydF93YWxsZXRcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBJbXBvcnRXYWxsZXRgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgSW1wb3J0V2FsbGV0fVxuICovXG5jb25zdCBzaWduSW1wb3J0V2FsbGV0ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvaW1wb3J0X3dhbGxldFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBJbml0IEltcG9ydCBQcml2YXRlIEtleVxuICpcbiAqIEluaXRpYWxpemVzIGEgbmV3IHByaXZhdGUga2V5IGltcG9ydFxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2luaXRfaW1wb3J0X3ByaXZhdGVfa2V5YFxuICovXG5jb25zdCBpbml0SW1wb3J0UHJpdmF0ZUtleSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2luaXRfaW1wb3J0X3ByaXZhdGVfa2V5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgSW5pdEltcG9ydFByaXZhdGVLZXlgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgSW5pdEltcG9ydFByaXZhdGVLZXl9XG4gKi9cbmNvbnN0IHNpZ25Jbml0SW1wb3J0UHJpdmF0ZUtleSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2luaXRfaW1wb3J0X3ByaXZhdGVfa2V5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEluaXQgSW1wb3J0IFdhbGxldFxuICpcbiAqIEluaXRpYWxpemVzIGEgbmV3IHdhbGxldCBpbXBvcnRcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9pbml0X2ltcG9ydF93YWxsZXRgXG4gKi9cbmNvbnN0IGluaXRJbXBvcnRXYWxsZXQgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9pbml0X2ltcG9ydF93YWxsZXRcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBJbml0SW1wb3J0V2FsbGV0YCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEluaXRJbXBvcnRXYWxsZXR9XG4gKi9cbmNvbnN0IHNpZ25Jbml0SW1wb3J0V2FsbGV0ID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvaW5pdF9pbXBvcnRfd2FsbGV0XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIEluaXQgRW1haWwgUmVjb3ZlcnlcbiAqXG4gKiBJbml0aWFsaXplcyBhIG5ldyBlbWFpbCByZWNvdmVyeVxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L2luaXRfdXNlcl9lbWFpbF9yZWNvdmVyeWBcbiAqL1xuY29uc3QgaW5pdFVzZXJFbWFpbFJlY292ZXJ5ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvaW5pdF91c2VyX2VtYWlsX3JlY292ZXJ5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgSW5pdFVzZXJFbWFpbFJlY292ZXJ5YCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIEluaXRVc2VyRW1haWxSZWNvdmVyeX1cbiAqL1xuY29uc3Qgc2lnbkluaXRVc2VyRW1haWxSZWNvdmVyeSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L2luaXRfdXNlcl9lbWFpbF9yZWNvdmVyeVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBPYXV0aFxuICpcbiAqIEF1dGhlbnRpY2F0ZSBhIHVzZXIgd2l0aCBhbiBPaWRjIHRva2VuIChPYXV0aCkgLSBCRVRBXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvb2F1dGhgXG4gKi9cbmNvbnN0IG9hdXRoID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvb2F1dGhcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBPYXV0aGAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBPYXV0aH1cbiAqL1xuY29uc3Qgc2lnbk9hdXRoID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvb2F1dGhcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogUmVjb3ZlciBhIHVzZXJcbiAqXG4gKiBDb21wbGV0ZXMgdGhlIHByb2Nlc3Mgb2YgcmVjb3ZlcmluZyBhIHVzZXIgYnkgYWRkaW5nIGFuIGF1dGhlbnRpY2F0b3JcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9yZWNvdmVyX3VzZXJgXG4gKi9cbmNvbnN0IHJlY292ZXJVc2VyID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvcmVjb3Zlcl91c2VyXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgUmVjb3ZlclVzZXJgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgUmVjb3ZlclVzZXJ9XG4gKi9cbmNvbnN0IHNpZ25SZWNvdmVyVXNlciA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3JlY292ZXJfdXNlclwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBSZWplY3QgQWN0aXZpdHlcbiAqXG4gKiBSZWplY3QgYW4gQWN0aXZpdHlcbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC9yZWplY3RfYWN0aXZpdHlgXG4gKi9cbmNvbnN0IHJlamVjdEFjdGl2aXR5ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvcmVqZWN0X2FjdGl2aXR5XCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgUmVqZWN0QWN0aXZpdHlgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgUmVqZWN0QWN0aXZpdHl9XG4gKi9cbmNvbnN0IHNpZ25SZWplY3RBY3Rpdml0eSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3JlamVjdF9hY3Rpdml0eVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBSZW1vdmUgT3JnYW5pemF0aW9uIEZlYXR1cmVcbiAqXG4gKiBSZW1vdmVzIGFuIG9yZ2FuaXphdGlvbiBmZWF0dXJlXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvcmVtb3ZlX29yZ2FuaXphdGlvbl9mZWF0dXJlYFxuICovXG5jb25zdCByZW1vdmVPcmdhbml6YXRpb25GZWF0dXJlID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvcmVtb3ZlX29yZ2FuaXphdGlvbl9mZWF0dXJlXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBSZW1vdmVPcmdhbml6YXRpb25GZWF0dXJlfVxuICovXG5jb25zdCBzaWduUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3JlbW92ZV9vcmdhbml6YXRpb25fZmVhdHVyZVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBTZXQgT3JnYW5pemF0aW9uIEZlYXR1cmVcbiAqXG4gKiBTZXRzIGFuIG9yZ2FuaXphdGlvbiBmZWF0dXJlXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvc2V0X29yZ2FuaXphdGlvbl9mZWF0dXJlYFxuICovXG5jb25zdCBzZXRPcmdhbml6YXRpb25GZWF0dXJlID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvc2V0X29yZ2FuaXphdGlvbl9mZWF0dXJlXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgU2V0T3JnYW5pemF0aW9uRmVhdHVyZWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBTZXRPcmdhbml6YXRpb25GZWF0dXJlfVxuICovXG5jb25zdCBzaWduU2V0T3JnYW5pemF0aW9uRmVhdHVyZSA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3NldF9vcmdhbml6YXRpb25fZmVhdHVyZVwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBTaWduIFJhdyBQYXlsb2FkXG4gKlxuICogU2lnbiBhIHJhdyBwYXlsb2FkXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvc2lnbl9yYXdfcGF5bG9hZGBcbiAqL1xuY29uc3Qgc2lnblJhd1BheWxvYWQgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9zaWduX3Jhd19wYXlsb2FkXCIsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxufSk7XG4vKipcbiAqIFJlcXVlc3QgYSBXZWJBdXRobiBhc3NlcnRpb24gYW5kIHJldHVybiBhIHNpZ25lZCBgU2lnblJhd1BheWxvYWRgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgU2lnblJhd1BheWxvYWR9XG4gKi9cbmNvbnN0IHNpZ25TaWduUmF3UGF5bG9hZCA9IChpbnB1dCwgb3B0aW9ucykgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3NpZ25fcmF3X3BheWxvYWRcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogU2lnbiBSYXcgUGF5bG9hZHNcbiAqXG4gKiBTaWduIG11bHRpcGxlIHJhdyBwYXlsb2FkcyB3aXRoIHRoZSBzYW1lIHNpZ25pbmcgcGFyYW1ldGVyc1xuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3NpZ25fcmF3X3BheWxvYWRzYFxuICovXG5jb25zdCBzaWduUmF3UGF5bG9hZHMgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9zaWduX3Jhd19wYXlsb2Fkc1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYFNpZ25SYXdQYXlsb2Fkc2AgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBTaWduUmF3UGF5bG9hZHN9XG4gKi9cbmNvbnN0IHNpZ25TaWduUmF3UGF5bG9hZHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9zaWduX3Jhd19wYXlsb2Fkc1wiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG4gICAgb3B0aW9ucyxcbn0pO1xuLyoqXG4gKiBTaWduIFRyYW5zYWN0aW9uXG4gKlxuICogU2lnbiBhIHRyYW5zYWN0aW9uXG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvc2lnbl90cmFuc2FjdGlvbmBcbiAqL1xuY29uc3Qgc2lnblRyYW5zYWN0aW9uID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvc2lnbl90cmFuc2FjdGlvblwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYFNpZ25UcmFuc2FjdGlvbmAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBTaWduVHJhbnNhY3Rpb259XG4gKi9cbmNvbnN0IHNpZ25TaWduVHJhbnNhY3Rpb24gPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC9zaWduX3RyYW5zYWN0aW9uXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIFVwZGF0ZSBQb2xpY3lcbiAqXG4gKiBVcGRhdGUgYW4gZXhpc3RpbmcgUG9saWN5XG4gKlxuICogYFBPU1QgL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3BvbGljeWBcbiAqL1xuY29uc3QgdXBkYXRlUG9saWN5ID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3BvbGljeVwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYFVwZGF0ZVBvbGljeWAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBVcGRhdGVQb2xpY3l9XG4gKi9cbmNvbnN0IHNpZ25VcGRhdGVQb2xpY3kgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcG9saWN5XCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIFVwZGF0ZSBQcml2YXRlIEtleSBUYWdcbiAqXG4gKiBVcGRhdGUgaHVtYW4tcmVhZGFibGUgbmFtZSBvciBhc3NvY2lhdGVkIHByaXZhdGUga2V5cy4gTm90ZSB0aGF0IHRoaXMgYWN0aXZpdHkgaXMgYXRvbWljOiBhbGwgb2YgdGhlIHVwZGF0ZXMgd2lsbCBzdWNjZWVkIGF0IG9uY2UsIG9yIGFsbCBvZiB0aGVtIHdpbGwgZmFpbC5cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcHJpdmF0ZV9rZXlfdGFnYFxuICovXG5jb25zdCB1cGRhdGVQcml2YXRlS2V5VGFnID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3ByaXZhdGVfa2V5X3RhZ1wiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYFVwZGF0ZVByaXZhdGVLZXlUYWdgIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgVXBkYXRlUHJpdmF0ZUtleVRhZ31cbiAqL1xuY29uc3Qgc2lnblVwZGF0ZVByaXZhdGVLZXlUYWcgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcHJpdmF0ZV9rZXlfdGFnXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIFVwZGF0ZSBSb290IFF1b3J1bVxuICpcbiAqIFNldCB0aGUgdGhyZXNob2xkIGFuZCBtZW1iZXJzIG9mIHRoZSByb290IHF1b3J1bS4gVGhpcyBtdXN0IGJlIGFwcHJvdmVkIGJ5IHRoZSBjdXJyZW50IHJvb3QgcXVvcnVtLlxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV9yb290X3F1b3J1bWBcbiAqL1xuY29uc3QgdXBkYXRlUm9vdFF1b3J1bSA9IChpbnB1dCkgPT4gcmVxdWVzdCh7XG4gICAgdXJpOiBcIi9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV9yb290X3F1b3J1bVwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbn0pO1xuLyoqXG4gKiBSZXF1ZXN0IGEgV2ViQXV0aG4gYXNzZXJ0aW9uIGFuZCByZXR1cm4gYSBzaWduZWQgYFVwZGF0ZVJvb3RRdW9ydW1gIHJlcXVlc3QsIHJlYWR5IHRvIGJlIFBPU1RlZCB0byBUdXJua2V5LlxuICpcbiAqIFNlZSB7QGxpbmsgVXBkYXRlUm9vdFF1b3J1bX1cbiAqL1xuY29uc3Qgc2lnblVwZGF0ZVJvb3RRdW9ydW0gPSAoaW5wdXQsIG9wdGlvbnMpID0+IHNpZ25lZFJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfcm9vdF9xdW9ydW1cIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogVXBkYXRlIFVzZXJcbiAqXG4gKiBVcGRhdGUgYSBVc2VyIGluIGFuIGV4aXN0aW5nIE9yZ2FuaXphdGlvblxuICpcbiAqIGBQT1NUIC9wdWJsaWMvdjEvc3VibWl0L3VwZGF0ZV91c2VyYFxuICovXG5jb25zdCB1cGRhdGVVc2VyID0gKGlucHV0KSA9PiByZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3VzZXJcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBVcGRhdGVVc2VyYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIFVwZGF0ZVVzZXJ9XG4gKi9cbmNvbnN0IHNpZ25VcGRhdGVVc2VyID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3VzZXJcIixcbiAgICBib2R5OiBpbnB1dC5ib2R5LFxuICAgIG9wdGlvbnMsXG59KTtcbi8qKlxuICogVXBkYXRlIFVzZXIgVGFnXG4gKlxuICogVXBkYXRlIGh1bWFuLXJlYWRhYmxlIG5hbWUgb3IgYXNzb2NpYXRlZCB1c2Vycy4gTm90ZSB0aGF0IHRoaXMgYWN0aXZpdHkgaXMgYXRvbWljOiBhbGwgb2YgdGhlIHVwZGF0ZXMgd2lsbCBzdWNjZWVkIGF0IG9uY2UsIG9yIGFsbCBvZiB0aGVtIHdpbGwgZmFpbC5cbiAqXG4gKiBgUE9TVCAvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfdXNlcl90YWdgXG4gKi9cbmNvbnN0IHVwZGF0ZVVzZXJUYWcgPSAoaW5wdXQpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvcHVibGljL3YxL3N1Ym1pdC91cGRhdGVfdXNlcl90YWdcIixcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IGlucHV0LmJvZHksXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBVcGRhdGVVc2VyVGFnYCByZXF1ZXN0LCByZWFkeSB0byBiZSBQT1NUZWQgdG8gVHVybmtleS5cbiAqXG4gKiBTZWUge0BsaW5rIFVwZGF0ZVVzZXJUYWd9XG4gKi9cbmNvbnN0IHNpZ25VcGRhdGVVc2VyVGFnID0gKGlucHV0LCBvcHRpb25zKSA9PiBzaWduZWRSZXF1ZXN0KHtcbiAgICB1cmk6IFwiL3B1YmxpYy92MS9zdWJtaXQvdXBkYXRlX3VzZXJfdGFnXCIsXG4gICAgYm9keTogaW5wdXQuYm9keSxcbiAgICBvcHRpb25zLFxufSk7XG4vKipcbiAqIGBQT1NUIC90a2hxL2FwaS92MS9ub29wLWNvZGVnZW4tYW5jaG9yYFxuICovXG5jb25zdCBuT09QQ29kZWdlbkFuY2hvciA9ICgpID0+IHJlcXVlc3Qoe1xuICAgIHVyaTogXCIvdGtocS9hcGkvdjEvbm9vcC1jb2RlZ2VuLWFuY2hvclwiLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG59KTtcbi8qKlxuICogUmVxdWVzdCBhIFdlYkF1dGhuIGFzc2VydGlvbiBhbmQgcmV0dXJuIGEgc2lnbmVkIGBOT09QQ29kZWdlbkFuY2hvcmAgcmVxdWVzdCwgcmVhZHkgdG8gYmUgUE9TVGVkIHRvIFR1cm5rZXkuXG4gKlxuICogU2VlIHtAbGluayBOT09QQ29kZWdlbkFuY2hvcn1cbiAqL1xuY29uc3Qgc2lnbk5PT1BDb2RlZ2VuQW5jaG9yID0gKCkgPT4gc2lnbmVkUmVxdWVzdCh7XG4gICAgdXJpOiBcIi90a2hxL2FwaS92MS9ub29wLWNvZGVnZW4tYW5jaG9yXCIsXG59KTtcblxuZXhwb3J0IHsgYXBwcm92ZUFjdGl2aXR5LCBjcmVhdGVBcGlLZXlzLCBjcmVhdGVBcGlPbmx5VXNlcnMsIGNyZWF0ZUF1dGhlbnRpY2F0b3JzLCBjcmVhdGVJbnZpdGF0aW9ucywgY3JlYXRlT2F1dGhQcm92aWRlcnMsIGNyZWF0ZVBvbGljaWVzLCBjcmVhdGVQb2xpY3ksIGNyZWF0ZVByaXZhdGVLZXlUYWcsIGNyZWF0ZVByaXZhdGVLZXlzLCBjcmVhdGVSZWFkT25seVNlc3Npb24sIGNyZWF0ZVJlYWRXcml0ZVNlc3Npb24sIGNyZWF0ZVN1Yk9yZ2FuaXphdGlvbiwgY3JlYXRlVXNlclRhZywgY3JlYXRlVXNlcnMsIGNyZWF0ZVdhbGxldCwgY3JlYXRlV2FsbGV0QWNjb3VudHMsIGRlbGV0ZUFwaUtleXMsIGRlbGV0ZUF1dGhlbnRpY2F0b3JzLCBkZWxldGVJbnZpdGF0aW9uLCBkZWxldGVPYXV0aFByb3ZpZGVycywgZGVsZXRlUG9saWN5LCBkZWxldGVQcml2YXRlS2V5VGFncywgZGVsZXRlVXNlclRhZ3MsIGRlbGV0ZVVzZXJzLCBlbWFpbEF1dGgsIGV4cG9ydFByaXZhdGVLZXksIGV4cG9ydFdhbGxldCwgZXhwb3J0V2FsbGV0QWNjb3VudCwgZ2V0QWN0aXZpdGllcywgZ2V0QWN0aXZpdHksIGdldEFwaUtleSwgZ2V0QXBpS2V5cywgZ2V0QXR0ZXN0YXRpb25Eb2N1bWVudCwgZ2V0QXV0aGVudGljYXRvciwgZ2V0QXV0aGVudGljYXRvcnMsIGdldE9hdXRoUHJvdmlkZXJzLCBnZXRPcmdhbml6YXRpb24sIGdldE9yZ2FuaXphdGlvbkNvbmZpZ3MsIGdldFBvbGljaWVzLCBnZXRQb2xpY3ksIGdldFByaXZhdGVLZXksIGdldFByaXZhdGVLZXlzLCBnZXRTdWJPcmdJZHMsIGdldFVzZXIsIGdldFVzZXJzLCBnZXRXYWxsZXQsIGdldFdhbGxldEFjY291bnRzLCBnZXRXYWxsZXRzLCBnZXRXaG9hbWksIGltcG9ydFByaXZhdGVLZXksIGltcG9ydFdhbGxldCwgaW5pdEltcG9ydFByaXZhdGVLZXksIGluaXRJbXBvcnRXYWxsZXQsIGluaXRVc2VyRW1haWxSZWNvdmVyeSwgbGlzdFByaXZhdGVLZXlUYWdzLCBsaXN0VXNlclRhZ3MsIG5PT1BDb2RlZ2VuQW5jaG9yLCBvYXV0aCwgcmVjb3ZlclVzZXIsIHJlamVjdEFjdGl2aXR5LCByZW1vdmVPcmdhbml6YXRpb25GZWF0dXJlLCBzZXRPcmdhbml6YXRpb25GZWF0dXJlLCBzaWduQXBwcm92ZUFjdGl2aXR5LCBzaWduQ3JlYXRlQXBpS2V5cywgc2lnbkNyZWF0ZUFwaU9ubHlVc2Vycywgc2lnbkNyZWF0ZUF1dGhlbnRpY2F0b3JzLCBzaWduQ3JlYXRlSW52aXRhdGlvbnMsIHNpZ25DcmVhdGVPYXV0aFByb3ZpZGVycywgc2lnbkNyZWF0ZVBvbGljaWVzLCBzaWduQ3JlYXRlUG9saWN5LCBzaWduQ3JlYXRlUHJpdmF0ZUtleVRhZywgc2lnbkNyZWF0ZVByaXZhdGVLZXlzLCBzaWduQ3JlYXRlUmVhZE9ubHlTZXNzaW9uLCBzaWduQ3JlYXRlUmVhZFdyaXRlU2Vzc2lvbiwgc2lnbkNyZWF0ZVN1Yk9yZ2FuaXphdGlvbiwgc2lnbkNyZWF0ZVVzZXJUYWcsIHNpZ25DcmVhdGVVc2Vycywgc2lnbkNyZWF0ZVdhbGxldCwgc2lnbkNyZWF0ZVdhbGxldEFjY291bnRzLCBzaWduRGVsZXRlQXBpS2V5cywgc2lnbkRlbGV0ZUF1dGhlbnRpY2F0b3JzLCBzaWduRGVsZXRlSW52aXRhdGlvbiwgc2lnbkRlbGV0ZU9hdXRoUHJvdmlkZXJzLCBzaWduRGVsZXRlUG9saWN5LCBzaWduRGVsZXRlUHJpdmF0ZUtleVRhZ3MsIHNpZ25EZWxldGVVc2VyVGFncywgc2lnbkRlbGV0ZVVzZXJzLCBzaWduRW1haWxBdXRoLCBzaWduRXhwb3J0UHJpdmF0ZUtleSwgc2lnbkV4cG9ydFdhbGxldCwgc2lnbkV4cG9ydFdhbGxldEFjY291bnQsIHNpZ25HZXRBY3Rpdml0aWVzLCBzaWduR2V0QWN0aXZpdHksIHNpZ25HZXRBcGlLZXksIHNpZ25HZXRBcGlLZXlzLCBzaWduR2V0QXR0ZXN0YXRpb25Eb2N1bWVudCwgc2lnbkdldEF1dGhlbnRpY2F0b3IsIHNpZ25HZXRBdXRoZW50aWNhdG9ycywgc2lnbkdldE9hdXRoUHJvdmlkZXJzLCBzaWduR2V0T3JnYW5pemF0aW9uLCBzaWduR2V0T3JnYW5pemF0aW9uQ29uZmlncywgc2lnbkdldFBvbGljaWVzLCBzaWduR2V0UG9saWN5LCBzaWduR2V0UHJpdmF0ZUtleSwgc2lnbkdldFByaXZhdGVLZXlzLCBzaWduR2V0U3ViT3JnSWRzLCBzaWduR2V0VXNlciwgc2lnbkdldFVzZXJzLCBzaWduR2V0V2FsbGV0LCBzaWduR2V0V2FsbGV0QWNjb3VudHMsIHNpZ25HZXRXYWxsZXRzLCBzaWduR2V0V2hvYW1pLCBzaWduSW1wb3J0UHJpdmF0ZUtleSwgc2lnbkltcG9ydFdhbGxldCwgc2lnbkluaXRJbXBvcnRQcml2YXRlS2V5LCBzaWduSW5pdEltcG9ydFdhbGxldCwgc2lnbkluaXRVc2VyRW1haWxSZWNvdmVyeSwgc2lnbkxpc3RQcml2YXRlS2V5VGFncywgc2lnbkxpc3RVc2VyVGFncywgc2lnbk5PT1BDb2RlZ2VuQW5jaG9yLCBzaWduT2F1dGgsIHNpZ25SYXdQYXlsb2FkLCBzaWduUmF3UGF5bG9hZHMsIHNpZ25SZWNvdmVyVXNlciwgc2lnblJlamVjdEFjdGl2aXR5LCBzaWduUmVtb3ZlT3JnYW5pemF0aW9uRmVhdHVyZSwgc2lnblNldE9yZ2FuaXphdGlvbkZlYXR1cmUsIHNpZ25TaWduUmF3UGF5bG9hZCwgc2lnblNpZ25SYXdQYXlsb2Fkcywgc2lnblNpZ25UcmFuc2FjdGlvbiwgc2lnblRyYW5zYWN0aW9uLCBzaWduVXBkYXRlUG9saWN5LCBzaWduVXBkYXRlUHJpdmF0ZUtleVRhZywgc2lnblVwZGF0ZVJvb3RRdW9ydW0sIHNpZ25VcGRhdGVVc2VyLCBzaWduVXBkYXRlVXNlclRhZywgdXBkYXRlUG9saWN5LCB1cGRhdGVQcml2YXRlS2V5VGFnLCB1cGRhdGVSb290UXVvcnVtLCB1cGRhdGVVc2VyLCB1cGRhdGVVc2VyVGFnIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaWNfYXBpLmZldGNoZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/async.mjs":
/*!****************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/async.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9hc3luYy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRztBQUNoRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsaUJBQWlCO0FBQy9ELFFBQVEscUJBQXFCLEtBQUssNEJBQTRCO0FBQzlEO0FBQ0E7QUFDQSxZQUFZLDJEQUEyRDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELGtFQUFrRSxZQUFZO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELDZDQUE2QyxhQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQW9CO0FBQ2xELDZDQUE2QyxhQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyw2R0FBVztBQUNyRDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLFlBQVksc0VBQXNFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2REFBb0I7QUFDbEQsa0VBQWtFLFlBQVk7QUFDOUU7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2REFBb0I7QUFDbEQsNkNBQTZDLGFBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2REFBb0I7QUFDbEQsNkNBQTZDLGFBQWE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQSxvRUFBb0Usc0JBQXNCO0FBQzFGOztBQUVrRDtBQUNsRCIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L2FzeW5jLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBY3Rpdml0eSB9IGZyb20gJy4vX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5mZXRjaGVyLm1qcyc7XG5pbXBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5cbmNvbnN0IERFRkFVTFRfUkVGUkVTSF9JTlRFUlZBTF9NUyA9IDUwMDtcbi8qKlxuICogV3JhcHMgYSByZXF1ZXN0IHRvIGNyZWF0ZSBhIGZldGNoZXIgd2l0aCBidWlsdC1pbiBhc3luYyBwb2xsaW5nIHN1cHBvcnQuXG4gKlxuICogQGRlcHJlY2F0ZWQgdGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIHdpdGgge0BsaW5rIFR1cm5rZXlBcGl9LlxuICogVXNlIHtAbGluayBUdXJua2V5Q2xpZW50fSBhbmQge0BsaW5rIGNyZWF0ZUFjdGl2aXR5UG9sbGVyfSBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiB3aXRoQXN5bmNQb2xsaW5nKHBhcmFtcykge1xuICAgIGNvbnN0IHsgcmVxdWVzdCwgcmVmcmVzaEludGVydmFsTXMgPSBERUZBVUxUX1JFRlJFU0hfSU5URVJWQUxfTVMgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoaW5wdXQpO1xuICAgICAgICBsZXQgYWN0aXZpdHkgPSBpbml0aWFsUmVzcG9uc2UuYWN0aXZpdHk7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGl2aXR5LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfQ09NUExFVEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2aXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0NSRUFURURcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3luYyBwZW5kaW5nIHN0YXRlIC0tIGtlZXAgcG9sbGluZ1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19QRU5ESU5HXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXN5bmMgcGVuZGluZyBzdGF0ZSAtLSBrZWVwIHBvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfQ09OU0VOU1VTX05FRURFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhY3Rpdml0eSByZXF1aXJlcyBjb25zZW5zdXMsIHdlIHNob3VsZG4ndCBiZSBwb2xsaW5nIGZvcmV2ZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIFlvdSBjYW4gcmVhZCB0aGUgYFR1cm5rZXlBY3Rpdml0eUVycm9yYCB0aHJvd24gdG8gZ2V0IHRoZSBgYWN0aXZpdHlJZGAsXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGl0IHNvbWV3aGVyZSwgdGhlbiByZS1mZXRjaCB0aGUgYWN0aXZpdHkgdmlhIGAucG9zdEdldEFjdGl2aXR5KC4uLilgXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHJlcXVpcmVkIGFwcHJvdmFscy9yZWplY3Rpb25zIGFyZSBpbiBwbGFjZS5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBDb25zZW5zdXMgbmVlZGVkIGZvciBhY3Rpdml0eSAke2FjdGl2aXR5LmlkfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5U3RhdHVzOiBhY3Rpdml0eS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGU6IGFjdGl2aXR5LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX0ZBSUxFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFjdGl2aXR5IGZhaWxlZFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEFjdGl2aXR5ICR7YWN0aXZpdHkuaWR9IGZhaWxlZGAsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5U3RhdHVzOiBhY3Rpdml0eS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVR5cGU6IGFjdGl2aXR5LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX1JFSkVDVEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZpdHkgd2FzIHJlamVjdGVkXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQWN0aXZpdHkgJHthY3Rpdml0eS5pZH0gd2FzIHJlamVjdGVkYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5SWQ6IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlTdGF0dXM6IGFjdGl2aXR5LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogYWN0aXZpdHkudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzd2l0Y2ggYmxvY2sgaXMgZXhoYXVzdGl2ZVxuICAgICAgICAgICAgICAgICAgICBhc3NlcnROZXZlcihhY3Rpdml0eS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKHJlZnJlc2hJbnRlcnZhbE1zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvbGxpbmdSZXNwb25zZSA9IGF3YWl0IGdldEFjdGl2aXR5KHtcbiAgICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5SWQ6IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25JZDogYWN0aXZpdHkub3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWN0aXZpdHkgPSBwb2xsaW5nUmVzcG9uc2UuYWN0aXZpdHk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBXcmFwcyBhIGNsaWVudCByZXF1ZXN0IGZ1bmN0aW9uIChlLmcuIGBjbGllbnQuY3JlYXRlUHJpdmF0ZUtleXNgKSBpbiBhIHBvbGxlci5cbiAqIFRoZSBkZWZhdWx0IHJlZnJlc2ggaW50ZXJ2YWwgaXMgNTAwbXMuXG4gKlxuICogVGhlIHJldHVybmVkIHBvbGxlciB3aWxsIHBvbGwgdW50aWwgdGhlIGFjdGl2aXR5IGJlY29tZXMgYENPTVBMRVRFRGAuXG4gKiBJZiB0aGUgYWN0aXZpdHkgYmVjb21lcyBgRkFJTEVEYCBvciBgUkVKRUNURURgIG9yIGlzIGZsYWdnZWQgYXMgYE5FRURTX0NPTlNFTlNVU2AsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYWN0aXZpdHlQb2xsZXIgPSBjcmVhdGVBY3Rpdml0eVBvbGxlcihjbGllbnQsIGNsaWVudC5jcmVhdGVQcml2YXRlS2V5cyk7XG4gKiBjb25zdCBhY3Rpdml0eSA9IGF3YWl0IGFjdGl2aXR5UG9sbGVyKGlucHV0KTtcbiAqIGNvbnNvbGUubG9nKGFjdGl2aXR5LnJlc3VsdCk7IC8vIGFjdGl2aXR5IGlzIGNvbXBsZXRlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVBY3Rpdml0eVBvbGxlcihwYXJhbXMpIHtcbiAgICBjb25zdCB7IGNsaWVudCwgcmVxdWVzdEZuLCByZWZyZXNoSW50ZXJ2YWxNcyA9IERFRkFVTFRfUkVGUkVTSF9JTlRFUlZBTF9NUywgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RGbihpbnB1dCk7XG4gICAgICAgIGxldCBhY3Rpdml0eSA9IGluaXRpYWxSZXNwb25zZS5hY3Rpdml0eTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aXZpdHkuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19DT01QTEVURURcIjoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfQ1JFQVRFRFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFzeW5jIHBlbmRpbmcgc3RhdGUgLS0ga2VlcCBwb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQUNUSVZJVFlfU1RBVFVTX1BFTkRJTkdcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3luYyBwZW5kaW5nIHN0YXRlIC0tIGtlZXAgcG9sbGluZ1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIkFDVElWSVRZX1NUQVRVU19DT05TRU5TVVNfTkVFREVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGFjdGl2aXR5IHJlcXVpcmVzIGNvbnNlbnN1cywgd2Ugc2hvdWxkbid0IGJlIHBvbGxpbmcgZm9yZXZlci5cbiAgICAgICAgICAgICAgICAgICAgLy8gWW91IGNhbiByZWFkIHRoZSBgVHVybmtleUFjdGl2aXR5RXJyb3JgIHRocm93biB0byBnZXQgdGhlIGBhY3Rpdml0eUlkYCxcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgaXQgc29tZXdoZXJlLCB0aGVuIHJlLWZldGNoIHRoZSBhY3Rpdml0eSB2aWEgYC5wb3N0R2V0QWN0aXZpdHkoLi4uKWBcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgcmVxdWlyZWQgYXBwcm92YWxzL3JlamVjdGlvbnMgYXJlIGluIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYENvbnNlbnN1cyBuZWVkZWQgZm9yIGFjdGl2aXR5ICR7YWN0aXZpdHkuaWR9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5SWQ6IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlTdGF0dXM6IGFjdGl2aXR5LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogYWN0aXZpdHkudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfRkFJTEVEXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZpdHkgZmFpbGVkXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQWN0aXZpdHkgJHthY3Rpdml0eS5pZH0gZmFpbGVkYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5SWQ6IGFjdGl2aXR5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlTdGF0dXM6IGFjdGl2aXR5LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VHlwZTogYWN0aXZpdHkudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJBQ1RJVklUWV9TVEFUVVNfUkVKRUNURURcIjoge1xuICAgICAgICAgICAgICAgICAgICAvLyBBY3Rpdml0eSB3YXMgcmVqZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBBY3Rpdml0eSAke2FjdGl2aXR5LmlkfSB3YXMgcmVqZWN0ZWRgLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogYWN0aXZpdHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eVN0YXR1czogYWN0aXZpdHkuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlUeXBlOiBhY3Rpdml0eS50eXBlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHN3aXRjaCBibG9jayBpcyBleGhhdXN0aXZlXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydE5ldmVyKGFjdGl2aXR5LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgc2xlZXAocmVmcmVzaEludGVydmFsTXMpO1xuICAgICAgICAgICAgY29uc3QgcG9sbGluZ1Jlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldEFjdGl2aXR5KHtcbiAgICAgICAgICAgICAgICBhY3Rpdml0eUlkOiBhY3Rpdml0eS5pZCxcbiAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25JZDogYWN0aXZpdHkub3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFjdGl2aXR5ID0gcG9sbGluZ1Jlc3BvbnNlLmFjdGl2aXR5O1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNsZWVwKG1zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCBtcyk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhc3NlcnROZXZlcihpbnB1dCwgbWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlICE9IG51bGwgPyBtZXNzYWdlIDogYFVuZXhwZWN0ZWQgY2FzZTogJHtKU09OLnN0cmluZ2lmeShpbnB1dCl9YCk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUFjdGl2aXR5UG9sbGVyLCB3aXRoQXN5bmNQb2xsaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3luYy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/base.mjs":
/*!***************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/base.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/../node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/http/node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/config.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/config.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9jb25maWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsS0FBSztBQUNqQztBQUNBO0FBQ0E7O0FBRTBEO0FBQzFEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvY29uZmlnLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XG4gICAgYXBpUHVibGljS2V5OiBudWxsLFxuICAgIGFwaVByaXZhdGVLZXk6IG51bGwsXG4gICAgYmFzZVVybDogbnVsbCxcbn07XG5jb25zdCBicm93c2VyQ29uZmlnID0ge1xuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGJyb3dzZXJJbml0KHZhbHVlKSB7XG4gICAgYnJvd3NlckNvbmZpZy5iYXNlVXJsID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYmFzZVVybCwgXCJiYXNlVXJsXCIpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGluaXQodmFsdWUpIHtcbiAgICBjb25maWcuYXBpUHVibGljS2V5ID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKTtcbiAgICBjb25maWcuYXBpUHJpdmF0ZUtleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKTtcbiAgICBjb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlQdWJsaWNLZXk6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGNvbmZpZy5hcGlQdWJsaWNLZXksIFwiYXBpUHVibGljS2V5XCIpLFxuICAgICAgICBhcGlQcml2YXRlS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHJpdmF0ZUtleSwgXCJhcGlQcml2YXRlS2V5XCIpLFxuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VVcmw6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGJyb3dzZXJDb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eVN0cmluZyhpbnB1dCwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIgfHwgIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnQgeyBicm93c2VySW5pdCwgZ2V0QnJvd3NlckNvbmZpZywgZ2V0Q29uZmlnLCBpbml0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/index.mjs":
/*!****************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEc7QUFDUDtBQUNwRDtBQUN5QjtBQUN0QjtBQUNJO0FBQ2E7QUFDN0I7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2RkFBa0I7O0FBRW1CO0FBQzlEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHB1YmxpY19hcGlfZmV0Y2hlciBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuZmV0Y2hlci5tanMnO1xuZXhwb3J0IHsgVHVybmtleUNsaWVudCB9IGZyb20gJy4vX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5jbGllbnQubWpzJztcbmV4cG9ydCB7IGJyb3dzZXJJbml0LCBpbml0IH0gZnJvbSAnLi9jb25maWcubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlSZXF1ZXN0RXJyb3IsIHNlYWxBbmRTdGFtcFJlcXVlc3RCb2R5IH0gZnJvbSAnLi9iYXNlLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5leHBvcnQgeyBnZXRXZWJBdXRobkF0dGVzdGF0aW9uIH0gZnJvbSAnLi93ZWJhdXRobi5tanMnO1xuZXhwb3J0IHsgY3JlYXRlQWN0aXZpdHlQb2xsZXIsIHdpdGhBc3luY1BvbGxpbmcgfSBmcm9tICcuL2FzeW5jLm1qcyc7XG5leHBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uLm1qcyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBUdXJua2V5QXBpYCBpbnN0ZWFkXG4gKi9cbmNvbnN0IFB1YmxpY0FwaVNlcnZpY2UgPSBwdWJsaWNfYXBpX2ZldGNoZXI7XG5cbmV4cG9ydCB7IFB1YmxpY0FwaVNlcnZpY2UsIHB1YmxpY19hcGlfZmV0Y2hlciBhcyBUdXJua2V5QXBpIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/shared.mjs":
/*!*****************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/shared.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9zaGFyZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsZ0JBQWdCLDJEQUEyRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnQztBQUNoQyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVHVybmtleUFjdGl2aXR5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlLCBjYXVzZSwgYWN0aXZpdHlJZCwgYWN0aXZpdHlTdGF0dXMsIGFjdGl2aXR5VHlwZSB9ID0gaW5wdXQ7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlR1cm5rZXlBY3Rpdml0eUVycm9yXCI7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlJZCA9IGFjdGl2aXR5SWQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5hY3Rpdml0eVN0YXR1cyA9IGFjdGl2aXR5U3RhdHVzID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlUeXBlID0gYWN0aXZpdHlUeXBlID8/IG51bGw7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZSA/PyBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/universal.mjs":
/*!********************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/universal.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/../node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC91bml2ZXJzYWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDOztBQUUvQztBQUNBO0FBQ0EsY0FBYyw4Q0FBTzs7QUFFSjtBQUNqQiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmV0Y2ggYXMgZmV0Y2gkMSB9IGZyb20gJ2Nyb3NzLWZldGNoJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIFRoaXMgaXMgdXNlZnVsIGZvciBtb2NraW5nIGZldGNoIGluIHRlc3RzLlxuY29uc3QgZmV0Y2ggPSBmZXRjaCQxO1xuXG5leHBvcnQgeyBmZXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdmVyc2FsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/version.mjs":
/*!******************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/version.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.12.2\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC92ZXJzaW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdmVyc2lvbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVkVSU0lPTiA9IFwiQHR1cm5rZXkvaHR0cEAyLjEyLjJcIjtcblxuZXhwb3J0IHsgVkVSU0lPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDWjtBQUM0RDs7QUFFcEc7QUFDQSxXQUFXLHFEQUFPLENBQUMsNkRBQWlCLEVBQUUsMkVBQWtDO0FBQ3hFO0FBQ0E7QUFDQSxXQUFXLHFEQUFPLENBQUMsNkRBQWlCLEVBQUUseUVBQWdDO0FBQ3RFOztBQUVtRDtBQUNuRCIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgY3JlZGVudGlhbCk7XG59XG5mdW5jdGlvbiBnZXRSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uLCBjcmVkZW50aWFsKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVzcG9uc2VUb0pTT04sIGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!**********************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!********************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUU7QUFDekUiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!******************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7O0FBRXBFO0FBQ0E7QUFDQSw0QkFBNEIsOERBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9IGZyb20gJy4vYXBpLm1qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmNyZWF0ZShvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gY3JlYXRlUmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldChvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldChvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gZ2V0UmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlLCBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!*******************************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFGOztBQUVyRjtBQUNBLFdBQVcsc0RBQVEsQ0FBQyxtREFBUztBQUM3QixrQkFBa0Isc0RBQVEsQ0FBQyxtREFBUztBQUNwQyxlQUFlLHNEQUFRLENBQUMsbURBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxvQkFBb0IscURBQU8sQ0FBQyxtREFBUztBQUNyQyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFZ0Y7QUFDaEYiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWlyZWQsIG9wdGlvbmFsLCBkZXJpdmVkLCBjb3B5VmFsdWUsIGNvbnZlcnRWYWx1ZSB9IGZyb20gJy4vY29udmVydC5tanMnO1xuXG5jb25zdCBzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSA9IHtcbiAgICBhcHBpZDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBhcHBpZEV4Y2x1ZGU6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgY3JlZFByb3BzOiBvcHRpb25hbChjb3B5VmFsdWUpLFxufTtcbi8vIGBuYXZpZ2F0b3IuY3JlYXRlKClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB0cmFuc3BvcnRzOiBkZXJpdmVkKGNvcHlWYWx1ZSwgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5nZXRUcmFuc3BvcnRzPy4oKSB8fCBbXSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/dist/webauthn.mjs":
/*!*******************************************************!*\
  !*** ../node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/../node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDs7QUFFeEQsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsNkRBQUc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnRUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RjtBQUM3RiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUsIGdldCB9IGZyb20gJy4vd2ViYXV0aG4tanNvbi9pbmRleC5tanMnO1xuXG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuY29uc3QgZGVmYXVsdFNpZ25pbmdPcHRpb25zID0ge1xuICAgIHB1YmxpY0tleToge1xuICAgICAgICB0aW1lb3V0OiBkZWZhdWx0VGltZW91dCxcbiAgICAgICAgdXNlclZlcmlmaWNhdGlvbjogZGVmYXVsdFVzZXJWZXJpZmljYXRpb24sXG4gICAgfSxcbn07XG5hc3luYyBmdW5jdGlvbiBnZXRDcmVkZW50aWFsUmVxdWVzdE9wdGlvbnMocGF5bG9hZCwgdGtTaWduaW5nT3B0aW9ucyA9IGRlZmF1bHRTaWduaW5nT3B0aW9ucykge1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGF3YWl0IGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpO1xuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0ge1xuICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLFxuICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLnB1YmxpY0tleSxcbiAgICAgICAgICAgIGNoYWxsZW5nZSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzaWduaW5nT3B0aW9ucztcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBheWxvYWQpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgbWVzc2FnZUJ1ZmZlcik7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gQnVmZmVyLmZyb20oaGFzaEJ1ZmZlcikudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgaGV4QnVmZmVyID0gQnVmZmVyLmZyb20oaGV4U3RyaW5nLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhleEJ1ZmZlcik7XG59XG4vKiBQdWxsZWQgZnJvbSBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4tMi8jZW51bS10cmFuc3BvcnQgKi9cbmZ1bmN0aW9uIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtKHByb3RvY29sRW51bSkge1xuICAgIHN3aXRjaCAocHJvdG9jb2xFbnVtKSB7XG4gICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9JTlRFUk5BTFwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ1c2JcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfVVNCXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIm5mY1wiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9ORkNcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmxlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0JMRVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJoeWJyaWRcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSFlCUklEXCI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgdHJhbnNwb3J0IGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRvSW50ZXJuYWxBdHRlc3RhdGlvbihhdHRlc3RhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWRlbnRpYWxJZDogYXR0ZXN0YXRpb24ucmF3SWQsXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiBhdHRlc3RhdGlvbi5yZXNwb25zZS5hdHRlc3RhdGlvbk9iamVjdCxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGF0dGVzdGF0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICB0cmFuc3BvcnRzOiBhdHRlc3RhdGlvbi5yZXNwb25zZS50cmFuc3BvcnRzLm1hcChwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSksXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXNzZXJ0aW9uKHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0gYXdhaXQgZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGNsaWVudEdldFJlc3VsdCA9IGF3YWl0IGdldChzaWduaW5nT3B0aW9ucyk7XG4gICAgY29uc3QgYXNzZXJ0aW9uID0gY2xpZW50R2V0UmVzdWx0LnRvSlNPTigpO1xuICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogYXNzZXJ0aW9uLnJlc3BvbnNlLmF1dGhlbnRpY2F0b3JEYXRhLFxuICAgICAgICBjbGllbnREYXRhSnNvbjogYXNzZXJ0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgc2lnbmF0dXJlOiBhc3NlcnRpb24ucmVzcG9uc2Uuc2lnbmF0dXJlLFxuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YW1wKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHdlYkF1dGhuU3VwcG9ydGVkID0gaGFzV2ViQXV0aG5TdXBwb3J0KCk7XG4gICAgaWYgKCF3ZWJBdXRoblN1cHBvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJhdXRobiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclwiKTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlKG9wdGlvbnMpO1xuICAgIHJldHVybiB0b0ludGVybmFsQXR0ZXN0YXRpb24ocmVzLnRvSlNPTigpKTtcbn1cbi8vIGBoYXNXZWJBdXRoblN1cHBvcnRgIGNoZWNrcyBmb3IgYmFyZWJvbmVzIHdlYmF1dGhuIHN1cHBvcnQuXG4vLyBGb3IgYWRkaXRpb25hbCBkZXRhaWxzIGFuZCBncmFudWxhciBzZXR0aW5ncywgc2VlOlxuLy8gaHR0cHM6Ly93ZWIuZGV2L2FydGljbGVzL3Bhc3NrZXktZm9ybS1hdXRvZmlsbCNmZWF0dXJlLWRldGVjdGlvbiwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1B1YmxpY0tleUNyZWRlbnRpYWxcbmZ1bmN0aW9uIGhhc1dlYkF1dGhuU3VwcG9ydCgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuUHVibGljS2V5Q3JlZGVudGlhbDtcbn1cblxuZXhwb3J0IHsgZ2V0V2ViQXV0aG5Bc3NlcnRpb24sIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24sIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJhdXRobi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/http/node_modules/@turnkey/encoding/dist/index.mjs":
/*!***********************************************************************************!*\
  !*** ../node_modules/@turnkey/http/node_modules/@turnkey/encoding/dist/index.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_JWK_MEMBER_BYTE_LENGTH: () => (/* binding */ DEFAULT_JWK_MEMBER_BYTE_LENGTH),\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   hexStringToBase64url: () => (/* binding */ hexStringToBase64url),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayFromHexString: () => (/* binding */ uint8ArrayFromHexString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nconst DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction hexStringToBase64url(input, length) {\n    // Add an extra 0 to the start of the string to get a valid hex string (even length)\n    // (e.g. 0x0123 instead of 0x123)\n    const hexString = input.padStart(Math.ceil(input.length / 2) * 2, \"0\");\n    const buffer = uint8ArrayFromHexString(hexString, length);\n    return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\nconst uint8ArrayFromHexString = (hexString, length) => {\n    const hexRegex = /^[0-9A-Fa-f]+$/;\n    if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {\n        throw new Error(`cannot create uint8array from invalid hex string: \"${hexString}\"`);\n    }\n    const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));\n    if (!length) {\n        return buffer;\n    }\n    if (hexString.length / 2 > length) {\n        throw new Error(\"hex value cannot fit in a buffer of \" + length + \" byte(s)\");\n    }\n    // If a length is specified, ensure we sufficiently pad\n    let paddedBuffer = new Uint8Array(length);\n    paddedBuffer.set(buffer, length - buffer.length);\n    return paddedBuffer;\n};\n// Pure JS implementation of btoa. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvbm9kZV9tb2R1bGVzL0B0dXJua2V5L2VuY29kaW5nL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLFVBQVU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0Esd0ZBQXdGLGlCQUFpQixjQUFjLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrSztBQUMvSyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi93ZWJhdXRobi1qc29uL2Jsb2IvZTkzMmIzNTg1ZmE3MGIwYmQ1YjVhNDAxMmJhN2RiYWQ3YjBhMGQwZi9zcmMvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwudHMjTDIzXG4gKi9cbmNvbnN0IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCA9IDMyO1xuZnVuY3Rpb24gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoaW5wdXQpIHtcbiAgICAvLyBzdHJpbmcgdG8gYmFzZTY0IC0tIHdlIGRvIG5vdCByZWx5IG9uIHRoZSBicm93c2VyJ3MgYnRvYSBzaW5jZSBpdCdzIG5vdCBwcmVzZW50IGluIFJlYWN0IE5hdGl2ZSBlbnZpcm9ubWVudHNcbiAgICBjb25zdCBiYXNlNjRTdHJpbmcgPSBidG9hKGlucHV0KTtcbiAgICByZXR1cm4gYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nKGJhc2U2NFN0cmluZyk7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmdUb0Jhc2U2NHVybChpbnB1dCwgbGVuZ3RoKSB7XG4gICAgLy8gQWRkIGFuIGV4dHJhIDAgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmcgdG8gZ2V0IGEgdmFsaWQgaGV4IHN0cmluZyAoZXZlbiBsZW5ndGgpXG4gICAgLy8gKGUuZy4gMHgwMTIzIGluc3RlYWQgb2YgMHgxMjMpXG4gICAgY29uc3QgaGV4U3RyaW5nID0gaW5wdXQucGFkU3RhcnQoTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAvIDIpICogMiwgXCIwXCIpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nKGhleFN0cmluZywgbGVuZ3RoKTtcbiAgICByZXR1cm4gc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoYnVmZmVyLnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHgpLCBcIlwiKSk7XG59XG5mdW5jdGlvbiBiYXNlNjRTdHJpbmdUb0Jhc2U2NFVybEVuY29kZWRTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFwrL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCJfXCIpLnJlcGxhY2UoLz0vZywgXCJcIik7XG59XG5mdW5jdGlvbiB1aW50OEFycmF5VG9IZXhTdHJpbmcoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIHgudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgXCJcIik7XG59XG5jb25zdCB1aW50OEFycmF5RnJvbUhleFN0cmluZyA9IChoZXhTdHJpbmcsIGxlbmd0aCkgPT4ge1xuICAgIGNvbnN0IGhleFJlZ2V4ID0gL15bMC05QS1GYS1mXSskLztcbiAgICBpZiAoIWhleFN0cmluZyB8fCBoZXhTdHJpbmcubGVuZ3RoICUgMiAhPSAwIHx8ICFoZXhSZWdleC50ZXN0KGhleFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgY3JlYXRlIHVpbnQ4YXJyYXkgZnJvbSBpbnZhbGlkIGhleCBzdHJpbmc6IFwiJHtoZXhTdHJpbmd9XCJgKTtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGV4U3RyaW5nLm1hdGNoKC8uLi9nKS5tYXAoKGgpID0+IHBhcnNlSW50KGgsIDE2KSkpO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIGlmIChoZXhTdHJpbmcubGVuZ3RoIC8gMiA+IGxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggdmFsdWUgY2Fubm90IGZpdCBpbiBhIGJ1ZmZlciBvZiBcIiArIGxlbmd0aCArIFwiIGJ5dGUocylcIik7XG4gICAgfVxuICAgIC8vIElmIGEgbGVuZ3RoIGlzIHNwZWNpZmllZCwgZW5zdXJlIHdlIHN1ZmZpY2llbnRseSBwYWRcbiAgICBsZXQgcGFkZGVkQnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBwYWRkZWRCdWZmZXIuc2V0KGJ1ZmZlciwgbGVuZ3RoIC0gYnVmZmVyLmxlbmd0aCk7XG4gICAgcmV0dXJuIHBhZGRlZEJ1ZmZlcjtcbn07XG4vLyBQdXJlIEpTIGltcGxlbWVudGF0aW9uIG9mIGJ0b2EuIFRoaXMgaXMgYWRhcHRlZCBmcm9tIHRoZSBmb2xsb3dpbmc6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vanNkb20vYWJhYi9ibG9iLzgwODc0YWUxZmUxY2RlMmU1ODdiYjZlNTFiNmQ3YzliNDJjYTFkMzQvbGliL2J0b2EuanNcbmZ1bmN0aW9uIGJ0b2Eocykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCIxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuXCIpO1xuICAgIH1cbiAgICBsZXQgaTtcbiAgICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICAgIHMgPSBgJHtzfWA7XG4gICAgLy8gXCJUaGUgYnRvYSgpIG1ldGhvZCBtdXN0IHRocm93IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yXCIgRE9NRXhjZXB0aW9uIGlmXG4gICAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZENoYXJhY3RlckVycm9yOiBmb3VuZCBjb2RlIHBvaW50IGdyZWF0ZXIgdGhhbiAyNTU6JHtzLmNoYXJDb2RlQXQoaSl9IGF0IHBvc2l0aW9uICR7aX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjb25zdCBncm91cHNPZlNpeCA9IFtcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgXTtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMF0gPSBzLmNoYXJDb2RlQXQoaSkgPj4gMjtcbiAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzFdIHw9IHMuY2hhckNvZGVBdChpICsgMSkgPj4gNDtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdID0gKHMuY2hhckNvZGVBdChpICsgMSkgJiAweDBmKSA8PCAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICAgICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICAgICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3JvdXBzT2ZTaXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzT2ZTaXhbal0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gXCI9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gYnRvYUxvb2t1cChncm91cHNPZlNpeFtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbmZ1bmN0aW9uIGJ0b2FMb29rdXAoaW5kZXgpIHtcbiAgICAvKipcbiAgICAgKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgQVNDSUkgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGtleXN0ciA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICAgICAgcmV0dXJuIGtleXN0cltpbmRleF07XG4gICAgfVxuICAgIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfSldLX01FTUJFUl9CWVRFX0xFTkdUSCwgYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nLCBoZXhTdHJpbmdUb0Jhc2U2NHVybCwgc3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcsIHVpbnQ4QXJyYXlGcm9tSGV4U3RyaW5nLCB1aW50OEFycmF5VG9IZXhTdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/http/node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/iframe-stamper/dist/index.mjs":
/*!**************************************************************!*\
  !*** ../node_modules/@turnkey/iframe-stamper/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeEventType: () => (/* binding */ IframeEventType),\n/* harmony export */   IframeStamper: () => (/* binding */ IframeStamper),\n/* harmony export */   KeyFormat: () => (/* binding */ KeyFormat)\n/* harmony export */ });\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// Set of constants for event types expected to be sent and received between a parent page and its iframe.\nvar IframeEventType;\n(function (IframeEventType) {\n    // Event sent by the iframe to its parent to indicate readiness.\n    // Value: the iframe public key\n    IframeEventType[\"PublicKeyReady\"] = \"PUBLIC_KEY_READY\";\n    // Event sent by the parent to inject a credential bundle (for recovery or auth) into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectCredentialBundle\"] = \"INJECT_CREDENTIAL_BUNDLE\";\n    // Event sent by the parent to inject a private key export bundle into the iframe.\n    // Value: the bundle to inject\n    // Key Format (optional): the key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    // Public Key (optional): the public key of the exported private key. Required when the key format is SOLANA.\n    IframeEventType[\"InjectKeyExportBundle\"] = \"INJECT_KEY_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject a wallet export bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectWalletExportBundle\"] = \"INJECT_WALLET_EXPORT_BUNDLE\";\n    // Event sent by the parent to inject an import bundle into the iframe.\n    // Value: the bundle to inject\n    IframeEventType[\"InjectImportBundle\"] = \"INJECT_IMPORT_BUNDLE\";\n    // Event sent by the parent to extract an encrypted wallet bundle from the iframe.\n    // Value: none\n    IframeEventType[\"ExtractWalletEncryptedBundle\"] = \"EXTRACT_WALLET_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to extract an encrypted private key bundle from the iframe.\n    // Value: none\n    // Key Format (optional): the key format to decode the private key in before it's encrypted for import: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n    IframeEventType[\"ExtractKeyEncryptedBundle\"] = \"EXTRACT_KEY_ENCRYPTED_BUNDLE\";\n    // Event sent by the parent to apply settings on the iframe.\n    // Value: the settings to apply in JSON string format.\n    IframeEventType[\"ApplySettings\"] = \"APPLY_SETTINGS\";\n    // Event sent by the iframe to its parent when `InjectBundle` is successful\n    // Value: true (boolean)\n    IframeEventType[\"BundleInjected\"] = \"BUNDLE_INJECTED\";\n    // Event sent by the iframe to its parent when `ExtractEncryptedBundle` is successful\n    // Value: the bundle encrypted in the iframe\n    IframeEventType[\"EncryptedBundleExtracted\"] = \"ENCRYPTED_BUNDLE_EXTRACTED\";\n    // Event sent by the iframe to its parent when `ApplySettings` is successful\n    // Value: true (boolean)\n    IframeEventType[\"SettingsApplied\"] = \"SETTINGS_APPLIED\";\n    // Event sent by the parent page to request a signature\n    // Value: payload to sign\n    IframeEventType[\"StampRequest\"] = \"STAMP_REQUEST\";\n    // Event sent by the iframe to communicate the result of a stamp operation.\n    // Value: signed payload\n    IframeEventType[\"Stamp\"] = \"STAMP\";\n    // Event sent by the iframe to communicate an error\n    // Value: serialized error\n    IframeEventType[\"Error\"] = \"ERROR\";\n})(IframeEventType || (IframeEventType = {}));\n// Set of constants for private key formats. These formats map to the encoding type used on a private key before encrypting and importing it\n// or after exporting it and decrypting it.\nvar KeyFormat;\n(function (KeyFormat) {\n    // 64 hexadecimal digits. Key format used by MetaMask, MyEtherWallet, Phantom, Ledger, and Trezor for Ethereum and Tron keys\n    KeyFormat[\"Hexadecimal\"] = \"HEXADECIMAL\";\n    // Key format used by Phantom and Solflare for Solana keys\n    KeyFormat[\"Solana\"] = \"SOLANA\";\n})(KeyFormat || (KeyFormat = {}));\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n * Creating a stamper inserts an iframe in the current page.\n */\nclass IframeStamper {\n    /**\n     * Creates a new iframe stamper. This function _does not_ insert the iframe in the DOM.\n     * Call `.init()` to insert the iframe element in the DOM.\n     */\n    constructor(config) {\n        if (typeof window === \"undefined\") {\n            throw new Error(\"Cannot initialize iframe in non-browser environment\");\n        }\n        if (!config.iframeContainer) {\n            throw new Error(\"Iframe container cannot be found\");\n        }\n        this.container = config.iframeContainer;\n        if (this.container.querySelector(`#${config.iframeElementId}`)) {\n            throw new Error(`Iframe element with ID ${config.iframeElementId} already exists`);\n        }\n        let iframe = window.document.createElement(\"iframe\");\n        // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#sandbox\n        // We do not need any other permission than running scripts for import/export/auth frames.\n        iframe.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin\");\n        iframe.id = config.iframeElementId;\n        iframe.src = config.iframeUrl;\n        this.iframe = iframe;\n        const iframeUrl = new URL(config.iframeUrl);\n        this.iframeOrigin = iframeUrl.origin;\n        // This is populated once the iframe is ready. Call `.init()` to kick off DOM insertion!\n        this.iframePublicKey = null;\n    }\n    /**\n     * Inserts the iframe on the page and returns a promise resolving to the iframe's public key\n     */\n    async init() {\n        this.container.appendChild(this.iframe);\n        return new Promise((resolve, _reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out\n                    return;\n                }\n                if (event.data?.type === IframeEventType.PublicKeyReady) {\n                    this.iframePublicKey = event.data[\"value\"];\n                    resolve(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Removes the iframe from the DOM\n     */\n    clear() {\n        this.iframe.remove();\n    }\n    /**\n     * Returns the public key, or `null` if the underlying iframe isn't properly initialized.\n     */\n    publicKey() {\n        return this.iframePublicKey;\n    }\n    /**\n     * Function to inject a new credential into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during recovery and auth flows.\n     */\n    async injectCredentialBundle(bundle) {\n        return new Promise((resolve, reject) => {\n            this.iframe.contentWindow?.postMessage({\n                type: IframeEventType.InjectCredentialBundle,\n                value: bundle,\n            }, \"*\");\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in after it's exported and decrypted: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key export flow.\n     */\n    async injectKeyExportBundle(bundle, organizationId, keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectKeyExportBundle,\n            value: bundle,\n            keyFormat,\n            organizationId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an export bundle into the iframe\n     * The bundle should be encrypted to the iframe's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet export flow.\n     */\n    async injectWalletExportBundle(bundle, organizationId) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectWalletExportBundle,\n            value: bundle,\n            organizationId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to inject an import bundle into the iframe\n     * This is used to initiate either the wallet import flow or the private key import flow.\n     */\n    async injectImportBundle(bundle, organizationId, userId) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.InjectImportBundle,\n            value: bundle,\n            organizationId,\n            userId,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.BundleInjected) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * This is used during the wallet import flow.\n     */\n    async extractWalletEncryptedBundle() {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractWalletEncryptedBundle,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to extract an encrypted bundle from the iframe\n     * The bundle should be encrypted to Turnkey's Signer enclave's initial public key\n     * Encryption should be performed with HPKE (RFC 9180).\n     * The key format to encode the private key in before it's encrypted and imported: HEXADECIMAL or SOLANA. Defaults to HEXADECIMAL.\n     * This is used during the private key import flow.\n     */\n    async extractKeyEncryptedBundle(keyFormat) {\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ExtractKeyEncryptedBundle,\n            keyFormat: keyFormat,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.EncryptedBundleExtracted) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to apply settings on allowed parameters in the iframe\n     * This is used to style the HTML element used for plaintext in wallet and private key import.\n     */\n    async applySettings(settings) {\n        const settingsStr = JSON.stringify(settings);\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.ApplySettings,\n            value: settingsStr,\n        }, \"*\");\n        return new Promise((resolve, reject) => {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== this.iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.SettingsApplied) {\n                    resolve(event.data[\"value\"]);\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n    /**\n     * Function to sign a payload with the underlying iframe\n     */\n    async stamp(payload) {\n        if (this.iframePublicKey === null) {\n            throw new Error(\"null iframe public key. Have you called/awaited .init()?\");\n        }\n        const iframeOrigin = this.iframeOrigin;\n        this.iframe.contentWindow?.postMessage({\n            type: IframeEventType.StampRequest,\n            value: payload,\n        }, \"*\");\n        return new Promise(function (resolve, reject) {\n            window.addEventListener(\"message\", (event) => {\n                if (event.origin !== iframeOrigin) {\n                    // There might be other things going on in the window, for example: react dev tools, other extensions, etc.\n                    // Instead of erroring out we simply return. Not our event!\n                    return;\n                }\n                if (event.data?.type === IframeEventType.Stamp) {\n                    resolve({\n                        stampHeaderName: stampHeaderName,\n                        stampHeaderValue: event.data[\"value\"],\n                    });\n                }\n                if (event.data?.type === IframeEventType.Error) {\n                    reject(event.data[\"value\"]);\n                }\n            }, false);\n        });\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/iframe-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/solana/dist/index.mjs":
/*!******************************************************!*\
  !*** ../node_modules/@turnkey/solana/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeySigner: () => (/* binding */ TurnkeySigner)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/../node_modules/@turnkey/solana/node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/../node_modules/@turnkey/http/dist/index.mjs\");\n\n\n\nclass TurnkeySigner {\n    constructor(input) {\n        this.organizationId = input.organizationId;\n        this.client = input.client;\n    }\n    /**\n     * This function takes an array of Solana transactions and adds a signature with Turnkey to each of them\n     *\n     * @param txs array of Transaction | VersionedTransaction (native @solana/web3.js type)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async signAllTransactions(txs, fromAddress) {\n        const fromKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(fromAddress);\n        let messages = txs.map((tx) => this.getMessageToSign(tx).toString(\"hex\"));\n        const signRawPayloadsResult = await this.signRawPayloads(messages, fromAddress);\n        const signatures = signRawPayloadsResult.signRawPayloadsResult?.signatures?.map((sig) => `${sig?.r}${sig?.s}`);\n        for (let i in txs) {\n            txs[i]?.addSignature(fromKey, Buffer.from(signatures[i], \"hex\"));\n        }\n        return txs;\n    }\n    /**\n     * This function takes a Solana transaction and adds a signature with Turnkey\n     *\n     * @param tx Transaction | VersionedTransaction object (native @solana/web3.js type)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async addSignature(tx, fromAddress) {\n        const fromKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(fromAddress);\n        let messageToSign = this.getMessageToSign(tx);\n        const signRawPayloadResult = await this.signRawPayload(messageToSign.toString(\"hex\"), fromAddress);\n        const signature = `${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`;\n        tx.addSignature(fromKey, Buffer.from(signature, \"hex\"));\n    }\n    /**\n     * This function takes a message and returns it after being signed with Turnkey\n     *\n     * @param message The message to sign (Uint8Array)\n     * @param fromAddress Solana address (base58 encoded)\n     */\n    async signMessage(message, fromAddress) {\n        const signRawPayloadResult = await this.signRawPayload(Buffer.from(message).toString(\"hex\"), fromAddress);\n        return Buffer.from(`${signRawPayloadResult.signRawPayloadResult?.r}${signRawPayloadResult.signRawPayloadResult?.s}`, \"hex\");\n    }\n    async signRawPayload(payload, signWith) {\n        const response = await this.client.signRawPayload({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n            organizationId: this.organizationId,\n            timestampMs: String(Date.now()),\n            parameters: {\n                signWith,\n                payload,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                // Note: unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032).\n                // Turnkey's signer requires an explicit value to be passed here to minimize ambiguity.\n                hashFunction: \"HASH_FUNCTION_NOT_APPLICABLE\",\n            },\n        });\n        const { id, status, type, result } = response.activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                message: `Expected COMPLETED status, got ${status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return result;\n    }\n    async signRawPayloads(payloads, signWith) {\n        const response = await this.client.signRawPayloads({\n            type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOADS\",\n            organizationId: this.organizationId,\n            timestampMs: String(Date.now()),\n            parameters: {\n                signWith,\n                payloads,\n                encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n                // Note: unlike ECDSA, EdDSA's API does not support signing raw digests (see RFC 8032).\n                // Turnkey's signer requires an explicit value to be passed here to minimize ambiguity.\n                hashFunction: \"HASH_FUNCTION_NOT_APPLICABLE\",\n            },\n        });\n        const { id, status, type, result } = response.activity;\n        if (status !== \"ACTIVITY_STATUS_COMPLETED\") {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                message: `Expected COMPLETED status, got ${status}`,\n                activityId: id,\n                activityStatus: status,\n                activityType: type,\n            });\n        }\n        return result;\n    }\n    getMessageToSign(tx) {\n        let messageToSign;\n        // @ts-ignore\n        // type narrowing (e.g. tx instanceof Transaction) does not seem to work here when the package gets compiled\n        // and bundled. Instead, we will check for the existence of a property unique to the Transaction class\n        // to determine whether the caller passed a Transaction or a VersionedTransaction\n        if (typeof tx.serializeMessage === \"function\") {\n            messageToSign = tx.serializeMessage();\n        }\n        else {\n            messageToSign = Buffer.from(tx.message.serialize());\n        }\n        return messageToSign;\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/solana/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/dist/index.mjs":
/*!****************************************************!*\
  !*** ../node_modules/@turnkey/viem/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccount: () => (/* binding */ createAccount),\n/* harmony export */   createApiKeyAccount: () => (/* binding */ createApiKeyAccount)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/../node_modules/viem/_esm/utils/address/isAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/../node_modules/viem/_esm/utils/transaction/serializeTransaction.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/../node_modules/viem/_esm/utils/signature/hashMessage.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/../node_modules/viem/_esm/utils/signature/hashTypedData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/../node_modules/viem/_esm/utils/signature/serializeSignature.js\");\n/* harmony import */ var viem_accounts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/accounts */ \"(ssr)/../node_modules/viem/_esm/accounts/toAccount.js\");\n/* harmony import */ var _turnkey_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/http */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/index.mjs\");\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n\n\n\n\n\nasync function createAccount(input) {\n    const { client, organizationId, signWith } = input;\n    let { ethereumAddress } = input;\n    if (!signWith) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Missing signWith parameter`,\n        });\n    }\n    if ((0,viem__WEBPACK_IMPORTED_MODULE_2__.isAddress)(signWith)) {\n        // override provided `ethereumAddress`\n        ethereumAddress = signWith;\n    }\n    else if (!ethereumAddress) {\n        // we have a private key ID, but not an ethereumAddress\n        const data = await client.getPrivateKey({\n            privateKeyId: signWith,\n            organizationId: organizationId,\n        });\n        ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n        if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n            throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n                message: `Unable to find Ethereum address for key ${signWith} under organization ${organizationId}`,\n            });\n        }\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, signWith);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, signWith);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, signWith);\n        },\n    });\n}\n/**\n * Creates a new Custom Account backed by a Turnkey API key.\n * @deprecated use {@link createAccount} instead.\n */\nasync function createApiKeyAccount(config) {\n    const { apiPublicKey, apiPrivateKey, baseUrl, organizationId, privateKeyId } = config;\n    const stamper = new _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_1__.ApiKeyStamper({\n        apiPublicKey: apiPublicKey,\n        apiPrivateKey: apiPrivateKey,\n    });\n    const client = new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyClient({\n        baseUrl: baseUrl,\n    }, stamper);\n    const data = await client.getPrivateKey({\n        privateKeyId: privateKeyId,\n        organizationId: organizationId,\n    });\n    const ethereumAddress = data.privateKey.addresses.find((item) => item.format === \"ADDRESS_FORMAT_ETHEREUM\")?.address;\n    if (typeof ethereumAddress !== \"string\" || !ethereumAddress) {\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Unable to find Ethereum address for key ${privateKeyId} under organization ${organizationId}`,\n        });\n    }\n    return (0,viem_accounts__WEBPACK_IMPORTED_MODULE_3__.toAccount)({\n        address: ethereumAddress,\n        signMessage: function ({ message, }) {\n            return signMessage(client, message, organizationId, privateKeyId);\n        },\n        signTransaction: function (transaction, args) {\n            const serializer = !args?.serializer\n                ? viem__WEBPACK_IMPORTED_MODULE_4__.serializeTransaction\n                : args.serializer;\n            return signTransaction(client, transaction, serializer, organizationId, privateKeyId);\n        },\n        signTypedData: function (typedData) {\n            return signTypedData(client, typedData, organizationId, privateKeyId);\n        },\n    });\n}\nasync function signMessage(client, message, organizationId, signWith) {\n    const hashedMessage = (0,viem__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(message);\n    const signedMessage = await signMessageWithErrorWrapping(client, hashedMessage, organizationId, signWith);\n    return `${signedMessage}`;\n}\nasync function signTransaction(client, transaction, serializer, organizationId, signWith) {\n    const serializedTx = serializer(transaction);\n    const nonHexPrefixedSerializedTx = serializedTx.replace(/^0x/, \"\");\n    return await signTransactionWithErrorWrapping(client, nonHexPrefixedSerializedTx, organizationId, signWith);\n}\nasync function signTypedData(client, data, organizationId, signWith) {\n    const hashToSign = (0,viem__WEBPACK_IMPORTED_MODULE_6__.hashTypedData)(data);\n    return await signMessageWithErrorWrapping(client, hashToSign, organizationId, signWith);\n}\nasync function signTransactionWithErrorWrapping(client, unsignedTransaction, organizationId, signWith) {\n    let signedTx;\n    try {\n        signedTx = await signTransactionImpl(client, unsignedTransaction, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign transaction: ${error.message}`,\n            cause: error,\n        });\n    }\n    return `0x${signedTx}`;\n}\nasync function signTransactionImpl(client, unsignedTransaction, organizationId, signWith) {\n    const { activity } = await client.signTransaction({\n        type: \"ACTIVITY_TYPE_SIGN_TRANSACTION_V2\",\n        organizationId: organizationId,\n        parameters: {\n            signWith,\n            type: \"TRANSACTION_TYPE_ETHEREUM\",\n            unsignedTransaction: unsignedTransaction,\n        },\n        timestampMs: String(Date.now()), // millisecond timestamp\n    });\n    const { id, status, type } = activity;\n    if (activity.status === \"ACTIVITY_STATUS_COMPLETED\") {\n        return assertNonNull(activity?.result?.signTransactionResult?.signedTransaction);\n    }\n    throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n        message: `Invalid activity status: ${activity.status}`,\n        activityId: id,\n        activityStatus: status,\n        activityType: type,\n    });\n}\nasync function signMessageWithErrorWrapping(client, message, organizationId, signWith) {\n    let signedMessage;\n    try {\n        signedMessage = await signMessageImpl(client, message, organizationId, signWith);\n    }\n    catch (error) {\n        if (error instanceof _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError) {\n            throw error;\n        }\n        throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n            message: `Failed to sign: ${error.message}`,\n            cause: error,\n        });\n    }\n    return signedMessage;\n}\nasync function signMessageImpl(client, message, organizationId, signWith) {\n    const { activity } = await client.signRawPayload({\n        type: \"ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2\",\n        organizationId: organizationId,\n        parameters: {\n            signWith,\n            payload: message,\n            encoding: \"PAYLOAD_ENCODING_HEXADECIMAL\",\n            hashFunction: \"HASH_FUNCTION_NO_OP\",\n        },\n        timestampMs: String(Date.now()), // millisecond timestamp\n    });\n    const { id, status, type } = activity;\n    if (activity.status === \"ACTIVITY_STATUS_COMPLETED\") {\n        let result = assertNonNull(activity?.result?.signRawPayloadResult);\n        let assembled = (0,viem__WEBPACK_IMPORTED_MODULE_7__.serializeSignature)({\n            r: `0x${result.r}`,\n            s: `0x${result.s}`,\n            v: result.v === \"00\" ? 27n : 28n,\n        });\n        // Assemble the hex\n        return assertNonNull(assembled);\n    }\n    throw new _turnkey_http__WEBPACK_IMPORTED_MODULE_0__.TurnkeyActivityError({\n        message: `Invalid activity status: ${activity.status}`,\n        activityId: id,\n        activityStatus: status,\n        activityType: type,\n    });\n}\nfunction assertNonNull(input) {\n    if (input == null) {\n        throw new Error(`Got unexpected ${JSON.stringify(input)}`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFtRztBQUN6RDtBQUMwQjtBQUNYOztBQUV6RDtBQUNBLFlBQVksbUNBQW1DO0FBQy9DLFVBQVUsa0JBQWtCO0FBQzVCO0FBQ0Esa0JBQWtCLCtEQUFvQjtBQUN0QztBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVEsK0NBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esc0JBQXNCLCtEQUFvQjtBQUMxQyxvRUFBb0UsVUFBVSxxQkFBcUIsZUFBZTtBQUNsSCxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVcsd0RBQVM7QUFDcEI7QUFDQSxpQ0FBaUMsVUFBVTtBQUMzQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFvQjtBQUN0QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQTtBQUNBLFlBQVkscUVBQXFFO0FBQ2pGLHdCQUF3QixtRUFBYTtBQUNyQztBQUNBO0FBQ0EsS0FBSztBQUNMLHVCQUF1Qix3REFBYTtBQUNwQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGtCQUFrQiwrREFBb0I7QUFDdEMsZ0VBQWdFLGNBQWMscUJBQXFCLGVBQWU7QUFDbEgsU0FBUztBQUNUO0FBQ0EsV0FBVyx3REFBUztBQUNwQjtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQW9CO0FBQ3RDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLDBCQUEwQixpREFBVztBQUNyQztBQUNBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtREFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLCtEQUFvQjtBQUNqRDtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFvQjtBQUN0QyxvREFBb0QsY0FBYztBQUNsRTtBQUNBLFNBQVM7QUFDVDtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0RBQW9CO0FBQ2xDLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLCtEQUFvQjtBQUNqRDtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFvQjtBQUN0Qyx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0Esd0JBQXdCLHdEQUFjO0FBQ3RDLG9CQUFvQixTQUFTO0FBQzdCLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0RBQW9CO0FBQ2xDLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxzQkFBc0I7QUFDaEU7QUFDQTtBQUNBOztBQUU4QztBQUM5QyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FkZHJlc3MsIHNlcmlhbGl6ZVRyYW5zYWN0aW9uLCBoYXNoTWVzc2FnZSwgaGFzaFR5cGVkRGF0YSwgc2lnbmF0dXJlVG9IZXggfSBmcm9tICd2aWVtJztcbmltcG9ydCB7IHRvQWNjb3VudCB9IGZyb20gJ3ZpZW0vYWNjb3VudHMnO1xuaW1wb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IsIFR1cm5rZXlDbGllbnQgfSBmcm9tICdAdHVybmtleS9odHRwJztcbmltcG9ydCB7IEFwaUtleVN0YW1wZXIgfSBmcm9tICdAdHVybmtleS9hcGkta2V5LXN0YW1wZXInO1xuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVBY2NvdW50KGlucHV0KSB7XG4gICAgY29uc3QgeyBjbGllbnQsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCB9ID0gaW5wdXQ7XG4gICAgbGV0IHsgZXRoZXJldW1BZGRyZXNzIH0gPSBpbnB1dDtcbiAgICBpZiAoIXNpZ25XaXRoKSB7XG4gICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgTWlzc2luZyBzaWduV2l0aCBwYXJhbWV0ZXJgLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzQWRkcmVzcyhzaWduV2l0aCkpIHtcbiAgICAgICAgLy8gb3ZlcnJpZGUgcHJvdmlkZWQgYGV0aGVyZXVtQWRkcmVzc2BcbiAgICAgICAgZXRoZXJldW1BZGRyZXNzID0gc2lnbldpdGg7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFldGhlcmV1bUFkZHJlc3MpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHByaXZhdGUga2V5IElELCBidXQgbm90IGFuIGV0aGVyZXVtQWRkcmVzc1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY2xpZW50LmdldFByaXZhdGVLZXkoe1xuICAgICAgICAgICAgcHJpdmF0ZUtleUlkOiBzaWduV2l0aCxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb25JZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGV0aGVyZXVtQWRkcmVzcyA9IGRhdGEucHJpdmF0ZUtleS5hZGRyZXNzZXMuZmluZCgoaXRlbSkgPT4gaXRlbS5mb3JtYXQgPT09IFwiQUREUkVTU19GT1JNQVRfRVRIRVJFVU1cIik/LmFkZHJlc3M7XG4gICAgICAgIGlmICh0eXBlb2YgZXRoZXJldW1BZGRyZXNzICE9PSBcInN0cmluZ1wiIHx8ICFldGhlcmV1bUFkZHJlc3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUdXJua2V5QWN0aXZpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYFVuYWJsZSB0byBmaW5kIEV0aGVyZXVtIGFkZHJlc3MgZm9yIGtleSAke3NpZ25XaXRofSB1bmRlciBvcmdhbml6YXRpb24gJHtvcmdhbml6YXRpb25JZH1gLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvQWNjb3VudCh7XG4gICAgICAgIGFkZHJlc3M6IGV0aGVyZXVtQWRkcmVzcyxcbiAgICAgICAgc2lnbk1lc3NhZ2U6IGZ1bmN0aW9uICh7IG1lc3NhZ2UsIH0pIHtcbiAgICAgICAgICAgIHJldHVybiBzaWduTWVzc2FnZShjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25UcmFuc2FjdGlvbjogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBhcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJpYWxpemVyID0gIWFyZ3M/LnNlcmlhbGl6ZXJcbiAgICAgICAgICAgICAgICA/IHNlcmlhbGl6ZVRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgOiBhcmdzLnNlcmlhbGl6ZXI7XG4gICAgICAgICAgICByZXR1cm4gc2lnblRyYW5zYWN0aW9uKGNsaWVudCwgdHJhbnNhY3Rpb24sIHNlcmlhbGl6ZXIsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25UeXBlZERhdGE6IGZ1bmN0aW9uICh0eXBlZERhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWduVHlwZWREYXRhKGNsaWVudCwgdHlwZWREYXRhLCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEN1c3RvbSBBY2NvdW50IGJhY2tlZCBieSBhIFR1cm5rZXkgQVBJIGtleS5cbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgY3JlYXRlQWNjb3VudH0gaW5zdGVhZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXBpS2V5QWNjb3VudChjb25maWcpIHtcbiAgICBjb25zdCB7IGFwaVB1YmxpY0tleSwgYXBpUHJpdmF0ZUtleSwgYmFzZVVybCwgb3JnYW5pemF0aW9uSWQsIHByaXZhdGVLZXlJZCB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHN0YW1wZXIgPSBuZXcgQXBpS2V5U3RhbXBlcih7XG4gICAgICAgIGFwaVB1YmxpY0tleTogYXBpUHVibGljS2V5LFxuICAgICAgICBhcGlQcml2YXRlS2V5OiBhcGlQcml2YXRlS2V5LFxuICAgIH0pO1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBUdXJua2V5Q2xpZW50KHtcbiAgICAgICAgYmFzZVVybDogYmFzZVVybCxcbiAgICB9LCBzdGFtcGVyKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgY2xpZW50LmdldFByaXZhdGVLZXkoe1xuICAgICAgICBwcml2YXRlS2V5SWQ6IHByaXZhdGVLZXlJZCxcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbklkLFxuICAgIH0pO1xuICAgIGNvbnN0IGV0aGVyZXVtQWRkcmVzcyA9IGRhdGEucHJpdmF0ZUtleS5hZGRyZXNzZXMuZmluZCgoaXRlbSkgPT4gaXRlbS5mb3JtYXQgPT09IFwiQUREUkVTU19GT1JNQVRfRVRIRVJFVU1cIik/LmFkZHJlc3M7XG4gICAgaWYgKHR5cGVvZiBldGhlcmV1bUFkZHJlc3MgIT09IFwic3RyaW5nXCIgfHwgIWV0aGVyZXVtQWRkcmVzcykge1xuICAgICAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICAgICAgbWVzc2FnZTogYFVuYWJsZSB0byBmaW5kIEV0aGVyZXVtIGFkZHJlc3MgZm9yIGtleSAke3ByaXZhdGVLZXlJZH0gdW5kZXIgb3JnYW5pemF0aW9uICR7b3JnYW5pemF0aW9uSWR9YCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0b0FjY291bnQoe1xuICAgICAgICBhZGRyZXNzOiBldGhlcmV1bUFkZHJlc3MsXG4gICAgICAgIHNpZ25NZXNzYWdlOiBmdW5jdGlvbiAoeyBtZXNzYWdlLCB9KSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbk1lc3NhZ2UoY2xpZW50LCBtZXNzYWdlLCBvcmdhbml6YXRpb25JZCwgcHJpdmF0ZUtleUlkKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lnblRyYW5zYWN0aW9uOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZXIgPSAhYXJncz8uc2VyaWFsaXplclxuICAgICAgICAgICAgICAgID8gc2VyaWFsaXplVHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICA6IGFyZ3Muc2VyaWFsaXplcjtcbiAgICAgICAgICAgIHJldHVybiBzaWduVHJhbnNhY3Rpb24oY2xpZW50LCB0cmFuc2FjdGlvbiwgc2VyaWFsaXplciwgb3JnYW5pemF0aW9uSWQsIHByaXZhdGVLZXlJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25UeXBlZERhdGE6IGZ1bmN0aW9uICh0eXBlZERhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWduVHlwZWREYXRhKGNsaWVudCwgdHlwZWREYXRhLCBvcmdhbml6YXRpb25JZCwgcHJpdmF0ZUtleUlkKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlKGNsaWVudCwgbWVzc2FnZSwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKSB7XG4gICAgY29uc3QgaGFzaGVkTWVzc2FnZSA9IGhhc2hNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIGNvbnN0IHNpZ25lZE1lc3NhZ2UgPSBhd2FpdCBzaWduTWVzc2FnZVdpdGhFcnJvcldyYXBwaW5nKGNsaWVudCwgaGFzaGVkTWVzc2FnZSwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKTtcbiAgICByZXR1cm4gYCR7c2lnbmVkTWVzc2FnZX1gO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnblRyYW5zYWN0aW9uKGNsaWVudCwgdHJhbnNhY3Rpb24sIHNlcmlhbGl6ZXIsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRUeCA9IHNlcmlhbGl6ZXIodHJhbnNhY3Rpb24pO1xuICAgIGNvbnN0IG5vbkhleFByZWZpeGVkU2VyaWFsaXplZFR4ID0gc2VyaWFsaXplZFR4LnJlcGxhY2UoL14weC8sIFwiXCIpO1xuICAgIHJldHVybiBhd2FpdCBzaWduVHJhbnNhY3Rpb25XaXRoRXJyb3JXcmFwcGluZyhjbGllbnQsIG5vbkhleFByZWZpeGVkU2VyaWFsaXplZFR4LCBvcmdhbml6YXRpb25JZCwgc2lnbldpdGgpO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnblR5cGVkRGF0YShjbGllbnQsIGRhdGEsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGNvbnN0IGhhc2hUb1NpZ24gPSBoYXNoVHlwZWREYXRhKGRhdGEpO1xuICAgIHJldHVybiBhd2FpdCBzaWduTWVzc2FnZVdpdGhFcnJvcldyYXBwaW5nKGNsaWVudCwgaGFzaFRvU2lnbiwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25UcmFuc2FjdGlvbldpdGhFcnJvcldyYXBwaW5nKGNsaWVudCwgdW5zaWduZWRUcmFuc2FjdGlvbiwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKSB7XG4gICAgbGV0IHNpZ25lZFR4O1xuICAgIHRyeSB7XG4gICAgICAgIHNpZ25lZFR4ID0gYXdhaXQgc2lnblRyYW5zYWN0aW9uSW1wbChjbGllbnQsIHVuc2lnbmVkVHJhbnNhY3Rpb24sIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUdXJua2V5QWN0aXZpdHlFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gc2lnbiB0cmFuc2FjdGlvbjogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYDB4JHtzaWduZWRUeH1gO1xufVxuYXN5bmMgZnVuY3Rpb24gc2lnblRyYW5zYWN0aW9uSW1wbChjbGllbnQsIHVuc2lnbmVkVHJhbnNhY3Rpb24sIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGNvbnN0IHsgYWN0aXZpdHkgfSA9IGF3YWl0IGNsaWVudC5zaWduVHJhbnNhY3Rpb24oe1xuICAgICAgICB0eXBlOiBcIkFDVElWSVRZX1RZUEVfU0lHTl9UUkFOU0FDVElPTl9WMlwiLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uSWQsXG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIHNpZ25XaXRoLFxuICAgICAgICAgICAgdHlwZTogXCJUUkFOU0FDVElPTl9UWVBFX0VUSEVSRVVNXCIsXG4gICAgICAgICAgICB1bnNpZ25lZFRyYW5zYWN0aW9uOiB1bnNpZ25lZFRyYW5zYWN0aW9uLFxuICAgICAgICB9LFxuICAgICAgICB0aW1lc3RhbXBNczogU3RyaW5nKERhdGUubm93KCkpLCAvLyBtaWxsaXNlY29uZCB0aW1lc3RhbXBcbiAgICB9KTtcbiAgICBjb25zdCB7IGlkLCBzdGF0dXMsIHR5cGUgfSA9IGFjdGl2aXR5O1xuICAgIGlmIChhY3Rpdml0eS5zdGF0dXMgPT09IFwiQUNUSVZJVFlfU1RBVFVTX0NPTVBMRVRFRFwiKSB7XG4gICAgICAgIHJldHVybiBhc3NlcnROb25OdWxsKGFjdGl2aXR5Py5yZXN1bHQ/LnNpZ25UcmFuc2FjdGlvblJlc3VsdD8uc2lnbmVkVHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBhY3Rpdml0eSBzdGF0dXM6ICR7YWN0aXZpdHkuc3RhdHVzfWAsXG4gICAgICAgIGFjdGl2aXR5SWQ6IGlkLFxuICAgICAgICBhY3Rpdml0eVN0YXR1czogc3RhdHVzLFxuICAgICAgICBhY3Rpdml0eVR5cGU6IHR5cGUsXG4gICAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiBzaWduTWVzc2FnZVdpdGhFcnJvcldyYXBwaW5nKGNsaWVudCwgbWVzc2FnZSwgb3JnYW5pemF0aW9uSWQsIHNpZ25XaXRoKSB7XG4gICAgbGV0IHNpZ25lZE1lc3NhZ2U7XG4gICAgdHJ5IHtcbiAgICAgICAgc2lnbmVkTWVzc2FnZSA9IGF3YWl0IHNpZ25NZXNzYWdlSW1wbChjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUdXJua2V5QWN0aXZpdHlFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR1cm5rZXlBY3Rpdml0eUVycm9yKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gc2lnbjogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgICAgICBjYXVzZTogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmVkTWVzc2FnZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlSW1wbChjbGllbnQsIG1lc3NhZ2UsIG9yZ2FuaXphdGlvbklkLCBzaWduV2l0aCkge1xuICAgIGNvbnN0IHsgYWN0aXZpdHkgfSA9IGF3YWl0IGNsaWVudC5zaWduUmF3UGF5bG9hZCh7XG4gICAgICAgIHR5cGU6IFwiQUNUSVZJVFlfVFlQRV9TSUdOX1JBV19QQVlMT0FEX1YyXCIsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb25JZCxcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgc2lnbldpdGgsXG4gICAgICAgICAgICBwYXlsb2FkOiBtZXNzYWdlLFxuICAgICAgICAgICAgZW5jb2Rpbmc6IFwiUEFZTE9BRF9FTkNPRElOR19IRVhBREVDSU1BTFwiLFxuICAgICAgICAgICAgaGFzaEZ1bmN0aW9uOiBcIkhBU0hfRlVOQ1RJT05fTk9fT1BcIixcbiAgICAgICAgfSxcbiAgICAgICAgdGltZXN0YW1wTXM6IFN0cmluZyhEYXRlLm5vdygpKSwgLy8gbWlsbGlzZWNvbmQgdGltZXN0YW1wXG4gICAgfSk7XG4gICAgY29uc3QgeyBpZCwgc3RhdHVzLCB0eXBlIH0gPSBhY3Rpdml0eTtcbiAgICBpZiAoYWN0aXZpdHkuc3RhdHVzID09PSBcIkFDVElWSVRZX1NUQVRVU19DT01QTEVURURcIikge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXNzZXJ0Tm9uTnVsbChhY3Rpdml0eT8ucmVzdWx0Py5zaWduUmF3UGF5bG9hZFJlc3VsdCk7XG4gICAgICAgIGxldCBhc3NlbWJsZWQgPSBzaWduYXR1cmVUb0hleCh7XG4gICAgICAgICAgICByOiBgMHgke3Jlc3VsdC5yfWAsXG4gICAgICAgICAgICBzOiBgMHgke3Jlc3VsdC5zfWAsXG4gICAgICAgICAgICB2OiByZXN1bHQudiA9PT0gXCIwMFwiID8gMjduIDogMjhuLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQXNzZW1ibGUgdGhlIGhleFxuICAgICAgICByZXR1cm4gYXNzZXJ0Tm9uTnVsbChhc3NlbWJsZWQpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHVybmtleUFjdGl2aXR5RXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBhY3Rpdml0eSBzdGF0dXM6ICR7YWN0aXZpdHkuc3RhdHVzfWAsXG4gICAgICAgIGFjdGl2aXR5SWQ6IGlkLFxuICAgICAgICBhY3Rpdml0eVN0YXR1czogc3RhdHVzLFxuICAgICAgICBhY3Rpdml0eVR5cGU6IHR5cGUsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBhc3NlcnROb25OdWxsKGlucHV0KSB7XG4gICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgdW5leHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGlucHV0KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnQgeyBjcmVhdGVBY2NvdW50LCBjcmVhdGVBcGlLZXlBY2NvdW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/index.mjs":
/*!******************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/index.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiKeyStamper: () => (/* binding */ ApiKeyStamper),\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n/// <reference lib=\"dom\" />\n// Header name for an API key stamp\nconst stampHeaderName = \"X-Stamp\";\n// `window.document` ensures that we're in a browser context\n// and `crypto.subtle` ensures that it supports the web crypto APIs\n// Inspired by https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isCryptoEnabledBrowser = typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof crypto !== \"undefined\" &&\n    typeof crypto.subtle !== \"undefined\";\n// We check `process.versions.node`\n// Taken from https://github.com/flexdinesh/browser-or-node/blob/master/src/index.ts\nconst isNode = typeof process !== \"undefined\" &&\n    process.versions != null &&\n    process.versions.node != null;\n/**\n * Signature function abstracting the differences between NodeJS and web environments for signing with API keys.\n */\nconst signWithApiKey = async (input) => {\n    if (isCryptoEnabledBrowser) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./webcrypto.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else if (isNode) {\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./nodecrypto.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n    else {\n        // If we don't have NodeJS or web crypto at our disposal, default to pure JS implementation\n        // This is the case for old browsers and react native environments\n        const fn = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@turnkey\").then(__webpack_require__.bind(__webpack_require__, /*! ./purejs.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\")).then((m) => m.signWithApiKey);\n        return fn(input);\n    }\n};\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass ApiKeyStamper {\n    constructor(config) {\n        this.apiPublicKey = config.apiPublicKey;\n        this.apiPrivateKey = config.apiPrivateKey;\n    }\n    async stamp(payload) {\n        const signature = await signWithApiKey({\n            publicKey: this.apiPublicKey,\n            privateKey: this.apiPrivateKey,\n            content: payload,\n        });\n        const stamp = {\n            publicKey: this.apiPublicKey,\n            scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n            signature: signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_0__.stringToBase64urlString)(JSON.stringify(stamp)),\n        };\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsME9BQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw0T0FBMEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvT0FBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMEVBQXVCO0FBQ3JEO0FBQ0E7QUFDQTs7QUFFeUM7QUFDekMiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIEhlYWRlciBuYW1lIGZvciBhbiBBUEkga2V5IHN0YW1wXG5jb25zdCBzdGFtcEhlYWRlck5hbWUgPSBcIlgtU3RhbXBcIjtcbi8vIGB3aW5kb3cuZG9jdW1lbnRgIGVuc3VyZXMgdGhhdCB3ZSdyZSBpbiBhIGJyb3dzZXIgY29udGV4dFxuLy8gYW5kIGBjcnlwdG8uc3VidGxlYCBlbnN1cmVzIHRoYXQgaXQgc3VwcG9ydHMgdGhlIHdlYiBjcnlwdG8gQVBJc1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNDcnlwdG9FbmFibGVkQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBjcnlwdG8uc3VidGxlICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gV2UgY2hlY2sgYHByb2Nlc3MudmVyc2lvbnMubm9kZWBcbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZsZXhkaW5lc2gvYnJvd3Nlci1vci1ub2RlL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuY29uc3QgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICE9IG51bGwgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbDtcbi8qKlxuICogU2lnbmF0dXJlIGZ1bmN0aW9uIGFic3RyYWN0aW5nIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIE5vZGVKUyBhbmQgd2ViIGVudmlyb25tZW50cyBmb3Igc2lnbmluZyB3aXRoIEFQSSBrZXlzLlxuICovXG5jb25zdCBzaWduV2l0aEFwaUtleSA9IGFzeW5jIChpbnB1dCkgPT4ge1xuICAgIGlmIChpc0NyeXB0b0VuYWJsZWRCcm93c2VyKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL3dlYmNyeXB0by5tanMnKS50aGVuKChtKSA9PiBtLnNpZ25XaXRoQXBpS2V5KTtcbiAgICAgICAgcmV0dXJuIGZuKGlucHV0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlKSB7XG4gICAgICAgIGNvbnN0IGZuID0gYXdhaXQgaW1wb3J0KCcuL25vZGVjcnlwdG8ubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIE5vZGVKUyBvciB3ZWIgY3J5cHRvIGF0IG91ciBkaXNwb3NhbCwgZGVmYXVsdCB0byBwdXJlIEpTIGltcGxlbWVudGF0aW9uXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGNhc2UgZm9yIG9sZCBicm93c2VycyBhbmQgcmVhY3QgbmF0aXZlIGVudmlyb25tZW50c1xuICAgICAgICBjb25zdCBmbiA9IGF3YWl0IGltcG9ydCgnLi9wdXJlanMubWpzJykudGhlbigobSkgPT4gbS5zaWduV2l0aEFwaUtleSk7XG4gICAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfVxufTtcbi8qKlxuICogU3RhbXBlciB0byB1c2Ugd2l0aCBgQHR1cm5rZXkvaHR0cGAncyBgVHVybmtleUNsaWVudGBcbiAqL1xuY2xhc3MgQXBpS2V5U3RhbXBlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXBpUHVibGljS2V5ID0gY29uZmlnLmFwaVB1YmxpY0tleTtcbiAgICAgICAgdGhpcy5hcGlQcml2YXRlS2V5ID0gY29uZmlnLmFwaVByaXZhdGVLZXk7XG4gICAgfVxuICAgIGFzeW5jIHN0YW1wKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc2lnbldpdGhBcGlLZXkoe1xuICAgICAgICAgICAgcHVibGljS2V5OiB0aGlzLmFwaVB1YmxpY0tleSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHRoaXMuYXBpUHJpdmF0ZUtleSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHBheWxvYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgICAgIHB1YmxpY0tleTogdGhpcy5hcGlQdWJsaWNLZXksXG4gICAgICAgICAgICBzY2hlbWU6IFwiU0lHTkFUVVJFX1NDSEVNRV9US19BUElfUDI1NlwiLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFtcEhlYWRlck5hbWU6IHN0YW1wSGVhZGVyTmFtZSxcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyVmFsdWU6IHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKEpTT04uc3RyaW5naWZ5KHN0YW1wKSksXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBBcGlLZXlTdGFtcGVyLCBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n\n\n\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const privateKeyObject = crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey({\n        // @ts-expect-error -- the key can be a JWK object since Node v15.12.0\n        // https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey\n        key: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.convertTurnkeyApiKeyToJwk)({\n            uncompressedPrivateKeyHex: privateKey,\n            compressedPublicKeyHex: publicKey,\n        }),\n        format: \"jwk\",\n    });\n    const sign = crypto__WEBPACK_IMPORTED_MODULE_0__.createSign(\"SHA256\");\n    sign.write(Buffer.from(content));\n    sign.end();\n    return sign.sign(privateKeyObject, \"hex\");\n};\n\n\n//# sourceMappingURL=nodecrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L25vZGVjcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUN1Qjs7QUFFeEQ7QUFDQSxZQUFZLGlDQUFpQztBQUM3Qyw2QkFBNkIsb0RBQXVCO0FBQ3BEO0FBQ0E7QUFDQSxhQUFhLHFFQUF5QjtBQUN0QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLGlCQUFpQiw4Q0FBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9ub2RlY3J5cHRvLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGNvbnZlcnRUdXJua2V5QXBpS2V5VG9Kd2sgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNvbnN0IHNpZ25XaXRoQXBpS2V5ID0gYXN5bmMgKGlucHV0KSA9PiB7XG4gICAgY29uc3QgeyBjb250ZW50LCBwdWJsaWNLZXksIHByaXZhdGVLZXkgfSA9IGlucHV0O1xuICAgIGNvbnN0IHByaXZhdGVLZXlPYmplY3QgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gdGhlIGtleSBjYW4gYmUgYSBKV0sgb2JqZWN0IHNpbmNlIE5vZGUgdjE1LjEyLjBcbiAgICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jcnlwdG8uaHRtbCNjcnlwdG9jcmVhdGVwcml2YXRla2V5a2V5XG4gICAgICAgIGtleTogY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgICAgICB1bmNvbXByZXNzZWRQcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5LFxuICAgICAgICAgICAgY29tcHJlc3NlZFB1YmxpY0tleUhleDogcHVibGljS2V5LFxuICAgICAgICB9KSxcbiAgICAgICAgZm9ybWF0OiBcImp3a1wiLFxuICAgIH0pO1xuICAgIGNvbnN0IHNpZ24gPSBjcnlwdG8uY3JlYXRlU2lnbihcIlNIQTI1NlwiKTtcbiAgICBzaWduLndyaXRlKEJ1ZmZlci5mcm9tKGNvbnRlbnQpKTtcbiAgICBzaWduLmVuZCgpO1xuICAgIHJldHVybiBzaWduLnNpZ24ocHJpdmF0ZUtleU9iamVjdCwgXCJoZXhcIik7XG59O1xuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZWNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/nodecrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(ssr)/../node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n\nconst signWithApiKey = async (input) => {\n    const publicKey = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.getPublicKey(input.privateKey, true);\n    // Public key in the usual 02 or 03 + 64 hex digits\n    const publicKeyString = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(publicKey);\n    if (publicKeyString != input.publicKey) {\n        throw new Error(`Bad API key. Expected to get public key ${input.publicKey}, got ${publicKeyString}`);\n    }\n    const hash = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.createHash)().update(input.content).digest();\n    const signature = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.sign(hash, input.privateKey);\n    return signature.toDERHex();\n};\n\n\n//# sourceMappingURL=purejs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3B1cmVqcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwQztBQUNLO0FBQ1c7O0FBRTFEO0FBQ0Esc0JBQXNCLG9EQUFJO0FBQzFCO0FBQ0EsNEJBQTRCLHdFQUFxQjtBQUNqRDtBQUNBLG1FQUFtRSxnQkFBZ0IsUUFBUSxnQkFBZ0I7QUFDM0c7QUFDQSxpQkFBaUIsNkRBQVU7QUFDM0Isc0JBQXNCLG9EQUFJO0FBQzFCO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC9wdXJlanMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHAyNTYgfSBmcm9tICdAbm9ibGUvY3VydmVzL3AyNTYnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ3NoYTI1Ni11aW50OGFycmF5JztcbmltcG9ydCB7IHVpbnQ4QXJyYXlUb0hleFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBwMjU2LmdldFB1YmxpY0tleShpbnB1dC5wcml2YXRlS2V5LCB0cnVlKTtcbiAgICAvLyBQdWJsaWMga2V5IGluIHRoZSB1c3VhbCAwMiBvciAwMyArIDY0IGhleCBkaWdpdHNcbiAgICBjb25zdCBwdWJsaWNLZXlTdHJpbmcgPSB1aW50OEFycmF5VG9IZXhTdHJpbmcocHVibGljS2V5KTtcbiAgICBpZiAocHVibGljS2V5U3RyaW5nICE9IGlucHV0LnB1YmxpY0tleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBBUEkga2V5LiBFeHBlY3RlZCB0byBnZXQgcHVibGljIGtleSAke2lucHV0LnB1YmxpY0tleX0sIGdvdCAke3B1YmxpY0tleVN0cmluZ31gKTtcbiAgICB9XG4gICAgY29uc3QgaGFzaCA9IGNyZWF0ZUhhc2goKS51cGRhdGUoaW5wdXQuY29udGVudCkuZGlnZXN0KCk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gcDI1Ni5zaWduKGhhc2gsIGlucHV0LnByaXZhdGVLZXkpO1xuICAgIHJldHVybiBzaWduYXR1cmUudG9ERVJIZXgoKTtcbn07XG5cbmV4cG9ydCB7IHNpZ25XaXRoQXBpS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXJlanMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/purejs.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   toByteString: () => (/* binding */ toByteString),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/bytes.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Converts the hex string to a byte array.\n *\n * @param hex the input\n * @return the byte array output\n * @throws {!Error}\n * @static\n */\nfunction fromHex(hex) {\n    if (hex.length % 2 != 0) {\n        throw new Error(\"Hex string length must be multiple of 2\");\n    }\n    const arr = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < hex.length; i += 2) {\n        arr[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n    return arr;\n}\n/**\n * Converts a byte array to hex.\n *\n * @param bytes the byte array input\n * @return hex the output\n * @static\n */\nfunction toHex(bytes) {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        const hexByte = bytes[i].toString(16);\n        result += hexByte.length > 1 ? hexByte : \"0\" + hexByte;\n    }\n    return result;\n}\n/**\n * Base64 encode a byte array.\n *\n * @param bytes the byte array input\n * @param opt_webSafe True indicates we should use the alternative\n *     alphabet, which does not require escaping for use in URLs.\n * @return base64 output\n * @static\n */\nfunction toBase64(bytes, opt_webSafe) {\n    const encoded = btoa(\n    /* padding */\n    toByteString(bytes)).replace(/=/g, \"\");\n    if (opt_webSafe) {\n        return encoded.replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    return encoded;\n}\n/**\n * Turns a byte array into the string given by the concatenation of the\n * characters to which the numbers correspond. Each byte is corresponding to a\n * character. Does not support multi-byte characters.\n *\n * @param bytes Array of numbers representing\n *     characters.\n * @return Stringification of the array.\n */\nfunction toByteString(bytes) {\n    let str = \"\";\n    for (let i = 0; i < bytes.length; i += 1) {\n        str += String.fromCharCode(bytes[i]);\n    }\n    return str;\n}\n\n\n//# sourceMappingURL=bytes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3RpbmsvYnl0ZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRWtEO0FBQ2xEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC90aW5rL2J5dGVzLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2J5dGVzLnRzXG4gKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKlxuICogQ29udmVydHMgdGhlIGhleCBzdHJpbmcgdG8gYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBoZXggdGhlIGlucHV0XG4gKiBAcmV0dXJuIHRoZSBieXRlIGFycmF5IG91dHB1dFxuICogQHRocm93cyB7IUVycm9yfVxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiBmcm9tSGV4KGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoICUgMiAhPSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhleCBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGFycltpIC8gMl0gPSBwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGUgYXJyYXkgdG8gaGV4LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHJldHVybiBoZXggdGhlIG91dHB1dFxuICogQHN0YXRpY1xuICovXG5mdW5jdGlvbiB0b0hleChieXRlcykge1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaGV4Qnl0ZSA9IGJ5dGVzW2ldLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmVzdWx0ICs9IGhleEJ5dGUubGVuZ3RoID4gMSA/IGhleEJ5dGUgOiBcIjBcIiArIGhleEJ5dGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEJhc2U2NCBlbmNvZGUgYSBieXRlIGFycmF5LlxuICpcbiAqIEBwYXJhbSBieXRlcyB0aGUgYnl0ZSBhcnJheSBpbnB1dFxuICogQHBhcmFtIG9wdF93ZWJTYWZlIFRydWUgaW5kaWNhdGVzIHdlIHNob3VsZCB1c2UgdGhlIGFsdGVybmF0aXZlXG4gKiAgICAgYWxwaGFiZXQsIHdoaWNoIGRvZXMgbm90IHJlcXVpcmUgZXNjYXBpbmcgZm9yIHVzZSBpbiBVUkxzLlxuICogQHJldHVybiBiYXNlNjQgb3V0cHV0XG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0KGJ5dGVzLCBvcHRfd2ViU2FmZSkge1xuICAgIGNvbnN0IGVuY29kZWQgPSBidG9hKFxuICAgIC8qIHBhZGRpbmcgKi9cbiAgICB0b0J5dGVTdHJpbmcoYnl0ZXMpKS5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIGlmIChvcHRfd2ViU2FmZSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIik7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVkO1xufVxuLyoqXG4gKiBUdXJucyBhIGJ5dGUgYXJyYXkgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxuICogY2hhcmFjdGVycyB0byB3aGljaCB0aGUgbnVtYmVycyBjb3JyZXNwb25kLiBFYWNoIGJ5dGUgaXMgY29ycmVzcG9uZGluZyB0byBhXG4gKiBjaGFyYWN0ZXIuIERvZXMgbm90IHN1cHBvcnQgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLlxuICpcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZ1xuICogICAgIGNoYXJhY3RlcnMuXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQnl0ZVN0cmluZyhieXRlcykge1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgeyBmcm9tSGV4LCB0b0Jhc2U2NCwgdG9CeXRlU3RyaW5nLCB0b0hleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pointDecode: () => (/* binding */ pointDecode)\n/* harmony export */ });\n/* harmony import */ var _bytes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytes.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/bytes.mjs\");\n\n\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts\n *\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * P-256 only\n */\nfunction getModulus() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"115792089210356248762697446949407573530086143415290314195533631308\" +\n        \"867097853951\");\n}\n/**\n * P-256 only\n */\nfunction getB() {\n    // https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf (Appendix D).\n    return BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\");\n}\n/** Converts byte array to bigint. */\nfunction byteArrayToInteger(bytes) {\n    return BigInt(\"0x\" + (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toHex)(bytes));\n}\n/** Converts bigint to byte array. */\nfunction integerToByteArray(i) {\n    let input = i.toString(16);\n    // If necessary, prepend leading zero to ensure that input length is even.\n    input = input.length % 2 === 0 ? input : \"0\" + input;\n    return (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.fromHex)(input);\n}\n/** Returns true iff the ith bit (in lsb order) of n is set. */\nfunction testBit(n, i) {\n    const m = BigInt(1) << BigInt(i);\n    return (n & m) !== BigInt(0);\n}\n/**\n * Computes a modular exponent.  Since JavaScript BigInt operations are not\n * constant-time, information about the inputs could leak.  Therefore, THIS\n * METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * @param b base\n * @param exp exponent\n * @param p modulus\n * @return b^exp modulo p\n */\nfunction modPow(b, exp, p) {\n    if (exp === BigInt(0)) {\n        return BigInt(1);\n    }\n    let result = b;\n    const exponentBitString = exp.toString(2);\n    for (let i = 1; i < exponentBitString.length; ++i) {\n        result = (result * result) % p;\n        if (exponentBitString[i] === \"1\") {\n            result = (result * b) % p;\n        }\n    }\n    return result;\n}\n/**\n * Computes a square root modulo an odd prime.  Since timing and exceptions can\n * leak information about the inputs, THIS METHOD SHOULD ONLY BE USED FOR\n * POINT DECOMPRESSION.\n *\n * @param x square\n * @param p prime modulus\n * @return square root of x modulo p\n */\nfunction modSqrt(x, p) {\n    if (p <= BigInt(0)) {\n        throw new Error(\"p must be positive\");\n    }\n    const base = x % p;\n    // The currently supported NIST curves P-256, P-384, and P-521 all satisfy\n    // p % 4 == 3.  However, although currently a no-op, the following check\n    // should be left in place in case other curves are supported in the future.\n    if (testBit(p, 0) && /* istanbul ignore next */ testBit(p, 1)) {\n        // Case p % 4 == 3 (applies to NIST curves P-256, P-384, and P-521)\n        // q = (p + 1) / 4\n        const q = (p + BigInt(1)) >> BigInt(2);\n        const squareRoot = modPow(base, q, p);\n        if ((squareRoot * squareRoot) % p !== base) {\n            throw new Error(\"could not find a modular square root\");\n        }\n        return squareRoot;\n    }\n    // Skipping other elliptic curve types that require Cipolla's algorithm.\n    throw new Error(\"unsupported modulus value\");\n}\n/**\n * Computes the y-coordinate of a point on an elliptic curve given its\n * x-coordinate.  Since timing and exceptions can leak information about the\n * inputs, THIS METHOD SHOULD ONLY BE USED FOR POINT DECOMPRESSION.\n *\n * P-256 only\n *\n * @param x x-coordinate\n * @param lsb least significant bit of the y-coordinate\n * @return y-coordinate\n */\nfunction getY(x, lsb) {\n    const p = getModulus();\n    const a = p - BigInt(3);\n    const b = getB();\n    const rhs = ((x * x + a) * x + b) % p;\n    let y = modSqrt(rhs, p);\n    if (lsb !== testBit(y, 0)) {\n        y = (p - y) % p;\n    }\n    return y;\n}\n/**\n * Decodes a public key in _compressed_ format.\n *\n * P-256 only\n */\nfunction pointDecode(point) {\n    const fieldSize = fieldSizeInBytes();\n    if (point.length !== 1 + fieldSize) {\n        throw new Error(\"compressed point has wrong length\");\n    }\n    if (point[0] !== 2 && point[0] !== 3) {\n        throw new Error(\"invalid format\");\n    }\n    const lsb = point[0] === 3; // point[0] must be 2 (false) or 3 (true).\n    const x = byteArrayToInteger(point.subarray(1, point.length));\n    const p = getModulus();\n    if (x < BigInt(0) || x >= p) {\n        throw new Error(\"x is out of range\");\n    }\n    const y = getY(x, lsb);\n    const result = {\n        kty: \"EC\",\n        crv: \"P-256\",\n        x: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(x), /* websafe */ true),\n        y: (0,_bytes_mjs__WEBPACK_IMPORTED_MODULE_0__.toBase64)(integerToByteArray(y), /* websafe */ true),\n        ext: true,\n    };\n    return result;\n}\n/**\n * P-256 only\n */\nfunction fieldSizeInBytes() {\n    return 32;\n}\n\n\n//# sourceMappingURL=elliptic_curves.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/utils.mjs":
/*!******************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/utils.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertTurnkeyApiKeyToJwk: () => (/* binding */ convertTurnkeyApiKeyToJwk)\n/* harmony export */ });\n/* harmony import */ var _tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tink/elliptic_curves.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/tink/elliptic_curves.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\nfunction convertTurnkeyApiKeyToJwk(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_tink_elliptic_curves_mjs__WEBPACK_IMPORTED_MODULE_0__.pointDecode)(hexStringToUint8Array(compressedPublicKeyHex));\n    jwk.d = hexStringToBase64urlString(uncompressedPrivateKeyHex);\n    return jwk;\n}\nfunction hexStringToUint8Array(input) {\n    if (input.length === 0 ||\n        input.length % 2 !== 0 ||\n        /[^a-fA-F0-9]/u.test(input)) {\n        throw new Error(`Invalid hex string: ${JSON.stringify(input)}`);\n    }\n    return Uint8Array.from(input\n        .match(/.{2}/g // Split string by every two characters\n    )\n        .map((byte) => parseInt(byte, 16)));\n}\nfunction hexStringToBase64urlString(input) {\n    const buffer = hexStringToUint8Array(input);\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.stringToBase64urlString)(buffer.reduce((result, x) => result + String.fromCharCode(x), \"\"));\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3V0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDRzs7QUFFNUQ7QUFDQSxZQUFZLG9EQUFvRDtBQUNoRSxnQkFBZ0Isc0VBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msc0JBQXNCO0FBQ3JFO0FBQ0E7QUFDQSxrQkFBa0IsRUFBRTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwRUFBdUI7QUFDbEM7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9hcGkta2V5LXN0YW1wZXIvZGlzdC91dGlscy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcG9pbnREZWNvZGUgfSBmcm9tICcuL3RpbmsvZWxsaXB0aWNfY3VydmVzLm1qcyc7XG5pbXBvcnQgeyBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyB9IGZyb20gJ0B0dXJua2V5L2VuY29kaW5nJztcblxuZnVuY3Rpb24gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayhpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gcG9pbnREZWNvZGUoaGV4U3RyaW5nVG9VaW50OEFycmF5KGNvbXByZXNzZWRQdWJsaWNLZXlIZXgpKTtcbiAgICBqd2suZCA9IGhleFN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgpO1xuICAgIHJldHVybiBqd2s7XG59XG5mdW5jdGlvbiBoZXhTdHJpbmdUb1VpbnQ4QXJyYXkoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIGlucHV0Lmxlbmd0aCAlIDIgIT09IDAgfHxcbiAgICAgICAgL1teYS1mQS1GMC05XS91LnRlc3QoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXggc3RyaW5nOiAke0pTT04uc3RyaW5naWZ5KGlucHV0KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShpbnB1dFxuICAgICAgICAubWF0Y2goLy57Mn0vZyAvLyBTcGxpdCBzdHJpbmcgYnkgZXZlcnkgdHdvIGNoYXJhY3RlcnNcbiAgICApXG4gICAgICAgIC5tYXAoKGJ5dGUpID0+IHBhcnNlSW50KGJ5dGUsIDE2KSkpO1xufVxuZnVuY3Rpb24gaGV4U3RyaW5nVG9CYXNlNjR1cmxTdHJpbmcoaW5wdXQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBoZXhTdHJpbmdUb1VpbnQ4QXJyYXkoaW5wdXQpO1xuICAgIHJldHVybiBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZyhidWZmZXIucmVkdWNlKChyZXN1bHQsIHgpID0+IHJlc3VsdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoeCksIFwiXCIpKTtcbn1cblxuZXhwb3J0IHsgY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signWithApiKey: () => (/* binding */ signWithApiKey)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/utils.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\nconst signWithApiKey = async (input) => {\n    const { content, publicKey, privateKey } = input;\n    const key = await importTurnkeyApiKey({\n        uncompressedPrivateKeyHex: privateKey,\n        compressedPublicKeyHex: publicKey,\n    });\n    return await signMessage({ key, content });\n};\nasync function importTurnkeyApiKey(input) {\n    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;\n    const jwk = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.convertTurnkeyApiKeyToJwk)({\n        uncompressedPrivateKeyHex,\n        compressedPublicKeyHex,\n    });\n    return await crypto.subtle.importKey(\"jwk\", jwk, {\n        name: \"ECDSA\",\n        namedCurve: \"P-256\",\n    }, false, // not extractable\n    [\"sign\"] // allow signing\n    );\n}\nasync function signMessage(input) {\n    const { key, content } = input;\n    const signatureIeee1363 = await crypto.subtle.sign({\n        name: \"ECDSA\",\n        hash: \"SHA-256\",\n    }, key, new TextEncoder().encode(content));\n    const signatureDer = convertEcdsaIeee1363ToDer(new Uint8Array(signatureIeee1363));\n    return (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToHexString)(signatureDer);\n}\n/**\n * `SubtleCrypto.sign(...)` outputs signature in IEEE P1363 format:\n * - https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign#ecdsa\n *\n * Turnkey expects the signature encoding to be DER-encoded ASN.1:\n * - https://github.com/tkhq/tkcli/blob/7f0159af5a73387ff050647180d1db4d3a3aa033/src/internal/apikey/apikey.go#L149\n *\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L114\n *\n * Transform an ECDSA signature in IEEE 1363 encoding to DER encoding.\n *\n * @param ieee the ECDSA signature in IEEE encoding\n * @return ECDSA signature in DER encoding\n */\nfunction convertEcdsaIeee1363ToDer(ieee) {\n    if (ieee.length % 2 != 0 || ieee.length == 0 || ieee.length > 132) {\n        throw new Error(\"Invalid IEEE P1363 signature encoding. Length: \" + ieee.length);\n    }\n    const r = toUnsignedBigNum(ieee.subarray(0, ieee.length / 2));\n    const s = toUnsignedBigNum(ieee.subarray(ieee.length / 2, ieee.length));\n    let offset = 0;\n    const length = 1 + 1 + r.length + 1 + 1 + s.length;\n    let der;\n    if (length >= 128) {\n        der = new Uint8Array(length + 3);\n        der[offset++] = 48;\n        der[offset++] = 128 + 1;\n        der[offset++] = length;\n    }\n    else {\n        der = new Uint8Array(length + 2);\n        der[offset++] = 48;\n        der[offset++] = length;\n    }\n    der[offset++] = 2;\n    der[offset++] = r.length;\n    der.set(r, offset);\n    offset += r.length;\n    der[offset++] = 2;\n    der[offset++] = s.length;\n    der.set(s, offset);\n    return der;\n}\n/**\n * Code modified from https://github.com/google/tink/blob/6f74b99a2bfe6677e3670799116a57268fd067fa/javascript/subtle/elliptic_curves.ts#L311\n *\n * Transform a big integer in big endian to minimal unsigned form which has\n * no extra zero at the beginning except when the highest bit is set.\n */\nfunction toUnsignedBigNum(bytes) {\n    // Remove zero prefixes.\n    let start = 0;\n    while (start < bytes.length && bytes[start] == 0) {\n        start++;\n    }\n    if (start == bytes.length) {\n        start = bytes.length - 1;\n    }\n    let extraZero = 0;\n    // If the 1st bit is not zero, add 1 zero byte.\n    if ((bytes[start] & 128) == 128) {\n        // Add extra zero.\n        extraZero = 1;\n    }\n    const res = new Uint8Array(bytes.length - start + extraZero);\n    res.set(bytes.subarray(start), extraZero);\n    return res;\n}\n\n\n//# sourceMappingURL=webcrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2FwaS1rZXktc3RhbXBlci9kaXN0L3dlYmNyeXB0by5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQ0U7O0FBRTFEO0FBQ0E7QUFDQSxZQUFZLGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsK0JBQStCLGNBQWM7QUFDN0M7QUFDQTtBQUNBLFlBQVksb0RBQW9EO0FBQ2hFLGdCQUFnQixxRUFBeUI7QUFDekM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsV0FBVyx3RUFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwQjtBQUMxQiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvYXBpLWtleS1zdGFtcGVyL2Rpc3Qvd2ViY3J5cHRvLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VHVybmtleUFwaUtleVRvSndrIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgdWludDhBcnJheVRvSGV4U3RyaW5nIH0gZnJvbSAnQHR1cm5rZXkvZW5jb2RpbmcnO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuY29uc3Qgc2lnbldpdGhBcGlLZXkgPSBhc3luYyAoaW5wdXQpID0+IHtcbiAgICBjb25zdCB7IGNvbnRlbnQsIHB1YmxpY0tleSwgcHJpdmF0ZUtleSB9ID0gaW5wdXQ7XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgaW1wb3J0VHVybmtleUFwaUtleSh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXksXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXg6IHB1YmxpY0tleSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgc2lnbk1lc3NhZ2UoeyBrZXksIGNvbnRlbnQgfSk7XG59O1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0VHVybmtleUFwaUtleShpbnB1dCkge1xuICAgIGNvbnN0IHsgdW5jb21wcmVzc2VkUHJpdmF0ZUtleUhleCwgY29tcHJlc3NlZFB1YmxpY0tleUhleCB9ID0gaW5wdXQ7XG4gICAgY29uc3QgandrID0gY29udmVydFR1cm5rZXlBcGlLZXlUb0p3ayh7XG4gICAgICAgIHVuY29tcHJlc3NlZFByaXZhdGVLZXlIZXgsXG4gICAgICAgIGNvbXByZXNzZWRQdWJsaWNLZXlIZXgsXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFwiandrXCIsIGp3aywge1xuICAgICAgICBuYW1lOiBcIkVDRFNBXCIsXG4gICAgICAgIG5hbWVkQ3VydmU6IFwiUC0yNTZcIixcbiAgICB9LCBmYWxzZSwgLy8gbm90IGV4dHJhY3RhYmxlXG4gICAgW1wic2lnblwiXSAvLyBhbGxvdyBzaWduaW5nXG4gICAgKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNpZ25NZXNzYWdlKGlucHV0KSB7XG4gICAgY29uc3QgeyBrZXksIGNvbnRlbnQgfSA9IGlucHV0O1xuICAgIGNvbnN0IHNpZ25hdHVyZUllZWUxMzYzID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKHtcbiAgICAgICAgbmFtZTogXCJFQ0RTQVwiLFxuICAgICAgICBoYXNoOiBcIlNIQS0yNTZcIixcbiAgICB9LCBrZXksIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlRGVyID0gY29udmVydEVjZHNhSWVlZTEzNjNUb0RlcihuZXcgVWludDhBcnJheShzaWduYXR1cmVJZWVlMTM2MykpO1xuICAgIHJldHVybiB1aW50OEFycmF5VG9IZXhTdHJpbmcoc2lnbmF0dXJlRGVyKTtcbn1cbi8qKlxuICogYFN1YnRsZUNyeXB0by5zaWduKC4uLilgIG91dHB1dHMgc2lnbmF0dXJlIGluIElFRUUgUDEzNjMgZm9ybWF0OlxuICogLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3VidGxlQ3J5cHRvL3NpZ24jZWNkc2FcbiAqXG4gKiBUdXJua2V5IGV4cGVjdHMgdGhlIHNpZ25hdHVyZSBlbmNvZGluZyB0byBiZSBERVItZW5jb2RlZCBBU04uMTpcbiAqIC0gaHR0cHM6Ly9naXRodWIuY29tL3RraHEvdGtjbGkvYmxvYi83ZjAxNTlhZjVhNzMzODdmZjA1MDY0NzE4MGQxZGI0ZDNhM2FhMDMzL3NyYy9pbnRlcm5hbC9hcGlrZXkvYXBpa2V5LmdvI0wxNDlcbiAqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS90aW5rL2Jsb2IvNmY3NGI5OWEyYmZlNjY3N2UzNjcwNzk5MTE2YTU3MjY4ZmQwNjdmYS9qYXZhc2NyaXB0L3N1YnRsZS9lbGxpcHRpY19jdXJ2ZXMudHMjTDExNFxuICpcbiAqIFRyYW5zZm9ybSBhbiBFQ0RTQSBzaWduYXR1cmUgaW4gSUVFRSAxMzYzIGVuY29kaW5nIHRvIERFUiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0gaWVlZSB0aGUgRUNEU0Egc2lnbmF0dXJlIGluIElFRUUgZW5jb2RpbmdcbiAqIEByZXR1cm4gRUNEU0Egc2lnbmF0dXJlIGluIERFUiBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0RWNkc2FJZWVlMTM2M1RvRGVyKGllZWUpIHtcbiAgICBpZiAoaWVlZS5sZW5ndGggJSAyICE9IDAgfHwgaWVlZS5sZW5ndGggPT0gMCB8fCBpZWVlLmxlbmd0aCA+IDEzMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElFRUUgUDEzNjMgc2lnbmF0dXJlIGVuY29kaW5nLiBMZW5ndGg6IFwiICsgaWVlZS5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCByID0gdG9VbnNpZ25lZEJpZ051bShpZWVlLnN1YmFycmF5KDAsIGllZWUubGVuZ3RoIC8gMikpO1xuICAgIGNvbnN0IHMgPSB0b1Vuc2lnbmVkQmlnTnVtKGllZWUuc3ViYXJyYXkoaWVlZS5sZW5ndGggLyAyLCBpZWVlLmxlbmd0aCkpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGxlbmd0aCA9IDEgKyAxICsgci5sZW5ndGggKyAxICsgMSArIHMubGVuZ3RoO1xuICAgIGxldCBkZXI7XG4gICAgaWYgKGxlbmd0aCA+PSAxMjgpIHtcbiAgICAgICAgZGVyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoICsgMyk7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSA0ODtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDEyOCArIDE7XG4gICAgICAgIGRlcltvZmZzZXQrK10gPSBsZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZXIgPSBuZXcgVWludDhBcnJheShsZW5ndGggKyAyKTtcbiAgICAgICAgZGVyW29mZnNldCsrXSA9IDQ4O1xuICAgICAgICBkZXJbb2Zmc2V0KytdID0gbGVuZ3RoO1xuICAgIH1cbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gci5sZW5ndGg7XG4gICAgZGVyLnNldChyLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSByLmxlbmd0aDtcbiAgICBkZXJbb2Zmc2V0KytdID0gMjtcbiAgICBkZXJbb2Zmc2V0KytdID0gcy5sZW5ndGg7XG4gICAgZGVyLnNldChzLCBvZmZzZXQpO1xuICAgIHJldHVybiBkZXI7XG59XG4vKipcbiAqIENvZGUgbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL3RpbmsvYmxvYi82Zjc0Yjk5YTJiZmU2Njc3ZTM2NzA3OTkxMTZhNTcyNjhmZDA2N2ZhL2phdmFzY3JpcHQvc3VidGxlL2VsbGlwdGljX2N1cnZlcy50cyNMMzExXG4gKlxuICogVHJhbnNmb3JtIGEgYmlnIGludGVnZXIgaW4gYmlnIGVuZGlhbiB0byBtaW5pbWFsIHVuc2lnbmVkIGZvcm0gd2hpY2ggaGFzXG4gKiBubyBleHRyYSB6ZXJvIGF0IHRoZSBiZWdpbm5pbmcgZXhjZXB0IHdoZW4gdGhlIGhpZ2hlc3QgYml0IGlzIHNldC5cbiAqL1xuZnVuY3Rpb24gdG9VbnNpZ25lZEJpZ051bShieXRlcykge1xuICAgIC8vIFJlbW92ZSB6ZXJvIHByZWZpeGVzLlxuICAgIGxldCBzdGFydCA9IDA7XG4gICAgd2hpbGUgKHN0YXJ0IDwgYnl0ZXMubGVuZ3RoICYmIGJ5dGVzW3N0YXJ0XSA9PSAwKSB7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3RhcnQgPSBieXRlcy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBsZXQgZXh0cmFaZXJvID0gMDtcbiAgICAvLyBJZiB0aGUgMXN0IGJpdCBpcyBub3QgemVybywgYWRkIDEgemVybyBieXRlLlxuICAgIGlmICgoYnl0ZXNbc3RhcnRdICYgMTI4KSA9PSAxMjgpIHtcbiAgICAgICAgLy8gQWRkIGV4dHJhIHplcm8uXG4gICAgICAgIGV4dHJhWmVybyA9IDE7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCAtIHN0YXJ0ICsgZXh0cmFaZXJvKTtcbiAgICByZXMuc2V0KGJ5dGVzLnN1YmFycmF5KHN0YXJ0KSwgZXh0cmFaZXJvKTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzaWduV2l0aEFwaUtleSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2ViY3J5cHRvLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/webcrypto.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs":
/*!***********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64StringToBase64UrlEncodedString: () => (/* binding */ base64StringToBase64UrlEncodedString),\n/* harmony export */   stringToBase64urlString: () => (/* binding */ stringToBase64urlString),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString)\n/* harmony export */ });\n/**\n * Code modified from https://github.com/github/webauthn-json/blob/e932b3585fa70b0bd5b5a4012ba7dbad7b0a0d0f/src/webauthn-json/base64url.ts#L23\n */\nfunction stringToBase64urlString(input) {\n    // string to base64 -- we do not rely on the browser's btoa since it's not present in React Native environments\n    const base64String = btoa(input);\n    return base64StringToBase64UrlEncodedString(base64String);\n}\nfunction base64StringToBase64UrlEncodedString(input) {\n    return input.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction uint8ArrayToHexString(input) {\n    return input.reduce((result, x) => result + x.toString(16).padStart(2, \"0\"), \"\");\n}\n// Polyfill btoa with a pure JS implementation. This is adapted from the following:\n// https://github.com/jsdom/abab/blob/80874ae1fe1cde2e587bb6e51b6d7c9b42ca1d34/lib/btoa.js\nfunction btoa(s) {\n    if (arguments.length === 0) {\n        throw new TypeError(\"1 argument required, but only 0 present.\");\n    }\n    let i;\n    // String conversion as required by Web IDL.\n    s = `${s}`;\n    // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n    // data contains any character whose code point is greater than U+00FF.\"\n    for (i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) > 255) {\n            throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);\n        }\n    }\n    let out = \"\";\n    for (i = 0; i < s.length; i += 3) {\n        const groupsOfSix = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n        ];\n        groupsOfSix[0] = s.charCodeAt(i) >> 2;\n        groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n        if (s.length > i + 1) {\n            groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n            groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n        }\n        if (s.length > i + 2) {\n            groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n            groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n        }\n        for (let j = 0; j < groupsOfSix.length; j++) {\n            if (typeof groupsOfSix[j] === \"undefined\") {\n                out += \"=\";\n            }\n            else {\n                out += btoaLookup(groupsOfSix[j]);\n            }\n        }\n    }\n    return out;\n}\nfunction btoaLookup(index) {\n    /**\n     * Lookup table for btoa(), which converts a six-bit number into the\n     * corresponding ASCII character.\n     */\n    const keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    if (index >= 0 && index < 64) {\n        return keystr[index];\n    }\n    // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n    return undefined;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2VuY29kaW5nL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0Esd0ZBQXdGLGlCQUFpQixjQUFjLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isd0JBQXdCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRztBQUNoRyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvZW5jb2RpbmcvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb2RlIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi93ZWJhdXRobi1qc29uL2Jsb2IvZTkzMmIzNTg1ZmE3MGIwYmQ1YjVhNDAxMmJhN2RiYWQ3YjBhMGQwZi9zcmMvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwudHMjTDIzXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQmFzZTY0dXJsU3RyaW5nKGlucHV0KSB7XG4gICAgLy8gc3RyaW5nIHRvIGJhc2U2NCAtLSB3ZSBkbyBub3QgcmVseSBvbiB0aGUgYnJvd3NlcidzIGJ0b2Egc2luY2UgaXQncyBub3QgcHJlc2VudCBpbiBSZWFjdCBOYXRpdmUgZW52aXJvbm1lbnRzXG4gICAgY29uc3QgYmFzZTY0U3RyaW5nID0gYnRvYShpbnB1dCk7XG4gICAgcmV0dXJuIGJhc2U2NFN0cmluZ1RvQmFzZTY0VXJsRW5jb2RlZFN0cmluZyhiYXNlNjRTdHJpbmcpO1xufVxuZnVuY3Rpb24gYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKS5yZXBsYWNlKC89L2csIFwiXCIpO1xufVxuZnVuY3Rpb24gdWludDhBcnJheVRvSGV4U3RyaW5nKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlZHVjZSgocmVzdWx0LCB4KSA9PiByZXN1bHQgKyB4LnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIiksIFwiXCIpO1xufVxuLy8gUG9seWZpbGwgYnRvYSB3aXRoIGEgcHVyZSBKUyBpbXBsZW1lbnRhdGlvbi4gVGhpcyBpcyBhZGFwdGVkIGZyb20gdGhlIGZvbGxvd2luZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9hYmFiL2Jsb2IvODA4NzRhZTFmZTFjZGUyZTU4N2JiNmU1MWI2ZDdjOWI0MmNhMWQzNC9saWIvYnRvYS5qc1xuZnVuY3Rpb24gYnRvYShzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIjEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC5cIik7XG4gICAgfVxuICAgIGxldCBpO1xuICAgIC8vIFN0cmluZyBjb252ZXJzaW9uIGFzIHJlcXVpcmVkIGJ5IFdlYiBJREwuXG4gICAgcyA9IGAke3N9YDtcbiAgICAvLyBcIlRoZSBidG9hKCkgbWV0aG9kIG11c3QgdGhyb3cgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiBET01FeGNlcHRpb24gaWZcbiAgICAvLyBkYXRhIGNvbnRhaW5zIGFueSBjaGFyYWN0ZXIgd2hvc2UgY29kZSBwb2ludCBpcyBncmVhdGVyIHRoYW4gVSswMEZGLlwiXG4gICAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHMuY2hhckNvZGVBdChpKSA+IDI1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkQ2hhcmFjdGVyRXJyb3I6IGZvdW5kIGNvZGUgcG9pbnQgZ3JlYXRlciB0aGFuIDI1NToke3MuY2hhckNvZGVBdChpKX0gYXQgcG9zaXRpb24gJHtpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBvdXQgPSBcIlwiO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIGNvbnN0IGdyb3Vwc09mU2l4ID0gW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBdO1xuICAgICAgICBncm91cHNPZlNpeFswXSA9IHMuY2hhckNvZGVBdChpKSA+PiAyO1xuICAgICAgICBncm91cHNPZlNpeFsxXSA9IChzLmNoYXJDb2RlQXQoaSkgJiAweDAzKSA8PCA0O1xuICAgICAgICBpZiAocy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMV0gfD0gcy5jaGFyQ29kZUF0KGkgKyAxKSA+PiA0O1xuICAgICAgICAgICAgZ3JvdXBzT2ZTaXhbMl0gPSAocy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4MGYpIDw8IDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID4gaSArIDIpIHtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzJdIHw9IHMuY2hhckNvZGVBdChpICsgMikgPj4gNjtcbiAgICAgICAgICAgIGdyb3Vwc09mU2l4WzNdID0gcy5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4M2Y7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncm91cHNPZlNpeC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cHNPZlNpeFtqXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIG91dCArPSBcIj1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSBidG9hTG9va3VwKGdyb3Vwc09mU2l4W2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuZnVuY3Rpb24gYnRvYUxvb2t1cChpbmRleCkge1xuICAgIC8qKlxuICAgICAqIExvb2t1cCB0YWJsZSBmb3IgYnRvYSgpLCB3aGljaCBjb252ZXJ0cyBhIHNpeC1iaXQgbnVtYmVyIGludG8gdGhlXG4gICAgICogY29ycmVzcG9uZGluZyBBU0NJSSBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgY29uc3Qga2V5c3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCA2NCkge1xuICAgICAgICByZXR1cm4ga2V5c3RyW2luZGV4XTtcbiAgICB9XG4gICAgLy8gVGhyb3cgSU5WQUxJRF9DSEFSQUNURVJfRVJSIGV4Y2VwdGlvbiBoZXJlIC0tIHdvbid0IGJlIGhpdCBpbiB0aGUgdGVzdHMuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IHsgYmFzZTY0U3RyaW5nVG9CYXNlNjRVcmxFbmNvZGVkU3RyaW5nLCBzdHJpbmdUb0Jhc2U2NHVybFN0cmluZywgdWludDhBcnJheVRvSGV4U3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs":
/*!****************************************************************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyClient: () => (/* binding */ TurnkeyClient)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../version.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/version.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../universal.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/universal.mjs\");\n\n\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\nclass TurnkeyClient {\n    constructor(config, stamper) {\n        /**\n         * Get details about an Activity\n         *\n         * Sign the provided `TGetActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_activity).\n         *\n         * See also {@link stampGetActivity}.\n         */\n        this.getActivity = async (input) => {\n            return this.request(\"/public/v1/query/get_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivity}.\n         */\n        this.stampGetActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an API key\n         *\n         * Sign the provided `TGetApiKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_key).\n         *\n         * See also {@link stampGetApiKey}.\n         */\n        this.getApiKey = async (input) => {\n            return this.request(\"/public/v1/query/get_api_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKey}.\n         */\n        this.stampGetApiKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about API keys for a user\n         *\n         * Sign the provided `TGetApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_api_keys).\n         *\n         * See also {@link stampGetApiKeys}.\n         */\n        this.getApiKeys = async (input) => {\n            return this.request(\"/public/v1/query/get_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetApiKeys}.\n         */\n        this.stampGetApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an authenticator\n         *\n         * Sign the provided `TGetAuthenticatorBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticator).\n         *\n         * See also {@link stampGetAuthenticator}.\n         */\n        this.getAuthenticator = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticator\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticator}.\n         */\n        this.stampGetAuthenticator = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticator\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about authenticators for a user\n         *\n         * Sign the provided `TGetAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_authenticators).\n         *\n         * See also {@link stampGetAuthenticators}.\n         */\n        this.getAuthenticators = async (input) => {\n            return this.request(\"/public/v1/query/get_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetAuthenticators}.\n         */\n        this.stampGetAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about an Organization\n         *\n         * Sign the provided `TGetOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_organization).\n         *\n         * See also {@link stampGetOrganization}.\n         */\n        this.getOrganization = async (input) => {\n            return this.request(\"/public/v1/query/get_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetOrganization}.\n         */\n        this.stampGetOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Policy\n         *\n         * Sign the provided `TGetPolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_policy).\n         *\n         * See also {@link stampGetPolicy}.\n         */\n        this.getPolicy = async (input) => {\n            return this.request(\"/public/v1/query/get_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicy}.\n         */\n        this.stampGetPolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Private Key\n         *\n         * Sign the provided `TGetPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_private_key).\n         *\n         * See also {@link stampGetPrivateKey}.\n         */\n        this.getPrivateKey = async (input) => {\n            return this.request(\"/public/v1/query/get_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKey}.\n         */\n        this.stampGetPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a User\n         *\n         * Sign the provided `TGetUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_user).\n         *\n         * See also {@link stampGetUser}.\n         */\n        this.getUser = async (input) => {\n            return this.request(\"/public/v1/query/get_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUser}.\n         */\n        this.stampGetUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get details about a Wallet\n         *\n         * Sign the provided `TGetWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/get_wallet).\n         *\n         * See also {@link stampGetWallet}.\n         */\n        this.getWallet = async (input) => {\n            return this.request(\"/public/v1/query/get_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallet}.\n         */\n        this.stampGetWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/get_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Activities within an Organization\n         *\n         * Sign the provided `TGetActivitiesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_activities).\n         *\n         * See also {@link stampGetActivities}.\n         */\n        this.getActivities = async (input) => {\n            return this.request(\"/public/v1/query/list_activities\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetActivitiesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetActivities}.\n         */\n        this.stampGetActivities = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_activities\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Policies within an Organization\n         *\n         * Sign the provided `TGetPoliciesBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_policies).\n         *\n         * See also {@link stampGetPolicies}.\n         */\n        this.getPolicies = async (input) => {\n            return this.request(\"/public/v1/query/list_policies\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPoliciesBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPolicies}.\n         */\n        this.stampGetPolicies = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_policies\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Key Tags within an Organization\n         *\n         * Sign the provided `TListPrivateKeyTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_key_tags).\n         *\n         * See also {@link stampListPrivateKeyTags}.\n         */\n        this.listPrivateKeyTags = async (input) => {\n            return this.request(\"/public/v1/query/list_private_key_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListPrivateKeyTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListPrivateKeyTags}.\n         */\n        this.stampListPrivateKeyTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_key_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Private Keys within an Organization\n         *\n         * Sign the provided `TGetPrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_private_keys).\n         *\n         * See also {@link stampGetPrivateKeys}.\n         */\n        this.getPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/query/list_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetPrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetPrivateKeys}.\n         */\n        this.stampGetPrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all User Tags within an Organization\n         *\n         * Sign the provided `TListUserTagsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_user_tags).\n         *\n         * See also {@link stampListUserTags}.\n         */\n        this.listUserTags = async (input) => {\n            return this.request(\"/public/v1/query/list_user_tags\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TListUserTagsBody` by using the client's `stamp` function.\n         *\n         * See also {@link ListUserTags}.\n         */\n        this.stampListUserTags = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_user_tags\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Users within an Organization\n         *\n         * Sign the provided `TGetUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_users).\n         *\n         * See also {@link stampGetUsers}.\n         */\n        this.getUsers = async (input) => {\n            return this.request(\"/public/v1/query/list_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetUsers}.\n         */\n        this.stampGetUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Accounts wirhin a Wallet\n         *\n         * Sign the provided `TGetWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallet_accounts).\n         *\n         * See also {@link stampGetWalletAccounts}.\n         */\n        this.getWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/query/list_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWalletAccounts}.\n         */\n        this.stampGetWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * List all Wallets within an Organization\n         *\n         * Sign the provided `TGetWalletsBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/list_wallets).\n         *\n         * See also {@link stampGetWallets}.\n         */\n        this.getWallets = async (input) => {\n            return this.request(\"/public/v1/query/list_wallets\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWalletsBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWallets}.\n         */\n        this.stampGetWallets = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/list_wallets\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.\n         *\n         * Sign the provided `TGetWhoamiBody` with the client's `stamp` function, and submit the request (POST /public/v1/query/whoami).\n         *\n         * See also {@link stampGetWhoami}.\n         */\n        this.getWhoami = async (input) => {\n            return this.request(\"/public/v1/query/whoami\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TGetWhoamiBody` by using the client's `stamp` function.\n         *\n         * See also {@link GetWhoami}.\n         */\n        this.stampGetWhoami = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/query/whoami\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Approve an Activity\n         *\n         * Sign the provided `TApproveActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/approve_activity).\n         *\n         * See also {@link stampApproveActivity}.\n         */\n        this.approveActivity = async (input) => {\n            return this.request(\"/public/v1/submit/approve_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TApproveActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link ApproveActivity}.\n         */\n        this.stampApproveActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/approve_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Add api keys to an existing User\n         *\n         * Sign the provided `TCreateApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_keys).\n         *\n         * See also {@link stampCreateApiKeys}.\n         */\n        this.createApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiKeys}.\n         */\n        this.stampCreateApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create API-only Users in an existing Organization\n         *\n         * Sign the provided `TCreateApiOnlyUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_api_only_users).\n         *\n         * See also {@link stampCreateApiOnlyUsers}.\n         */\n        this.createApiOnlyUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_api_only_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateApiOnlyUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateApiOnlyUsers}.\n         */\n        this.stampCreateApiOnlyUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_api_only_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Authenticators to authenticate requests to Turnkey\n         *\n         * Sign the provided `TCreateAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_authenticators).\n         *\n         * See also {@link stampCreateAuthenticators}.\n         */\n        this.createAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/create_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateAuthenticators}.\n         */\n        this.stampCreateAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Invitations to join an existing Organization\n         *\n         * Sign the provided `TCreateInvitationsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_invitations).\n         *\n         * See also {@link stampCreateInvitations}.\n         */\n        this.createInvitations = async (input) => {\n            return this.request(\"/public/v1/submit/create_invitations\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateInvitationsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateInvitations}.\n         */\n        this.stampCreateInvitations = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_invitations\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Policy\n         *\n         * Sign the provided `TCreatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_policy).\n         *\n         * See also {@link stampCreatePolicy}.\n         */\n        this.createPolicy = async (input) => {\n            return this.request(\"/public/v1/submit/create_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePolicy}.\n         */\n        this.stampCreatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a private key tag and add it to private keys.\n         *\n         * Sign the provided `TCreatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_key_tag).\n         *\n         * See also {@link stampCreatePrivateKeyTag}.\n         */\n        this.createPrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeyTag}.\n         */\n        this.stampCreatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create new Private Keys\n         *\n         * Sign the provided `TCreatePrivateKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_private_keys).\n         *\n         * See also {@link stampCreatePrivateKeys}.\n         */\n        this.createPrivateKeys = async (input) => {\n            return this.request(\"/public/v1/submit/create_private_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreatePrivateKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreatePrivateKeys}.\n         */\n        this.stampCreatePrivateKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_private_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a new Sub-Organization\n         *\n         * Sign the provided `TCreateSubOrganizationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_sub_organization).\n         *\n         * See also {@link stampCreateSubOrganization}.\n         */\n        this.createSubOrganization = async (input) => {\n            return this.request(\"/public/v1/submit/create_sub_organization\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateSubOrganizationBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateSubOrganization}.\n         */\n        this.stampCreateSubOrganization = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_sub_organization\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a user tag and add it to users.\n         *\n         * Sign the provided `TCreateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_user_tag).\n         *\n         * See also {@link stampCreateUserTag}.\n         */\n        this.createUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/create_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUserTag}.\n         */\n        this.stampCreateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create Users in an existing Organization\n         *\n         * Sign the provided `TCreateUsersBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_users).\n         *\n         * See also {@link stampCreateUsers}.\n         */\n        this.createUsers = async (input) => {\n            return this.request(\"/public/v1/submit/create_users\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateUsersBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateUsers}.\n         */\n        this.stampCreateUsers = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_users\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Create a Wallet and derive addresses\n         *\n         * Sign the provided `TCreateWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet).\n         *\n         * See also {@link stampCreateWallet}.\n         */\n        this.createWallet = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWallet}.\n         */\n        this.stampCreateWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Derive additional addresses using an existing wallet\n         *\n         * Sign the provided `TCreateWalletAccountsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/create_wallet_accounts).\n         *\n         * See also {@link stampCreateWalletAccounts}.\n         */\n        this.createWalletAccounts = async (input) => {\n            return this.request(\"/public/v1/submit/create_wallet_accounts\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TCreateWalletAccountsBody` by using the client's `stamp` function.\n         *\n         * See also {@link CreateWalletAccounts}.\n         */\n        this.stampCreateWalletAccounts = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/create_wallet_accounts\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove api keys from a User\n         *\n         * Sign the provided `TDeleteApiKeysBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_api_keys).\n         *\n         * See also {@link stampDeleteApiKeys}.\n         */\n        this.deleteApiKeys = async (input) => {\n            return this.request(\"/public/v1/submit/delete_api_keys\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteApiKeysBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteApiKeys}.\n         */\n        this.stampDeleteApiKeys = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_api_keys\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Remove authenticators from a User\n         *\n         * Sign the provided `TDeleteAuthenticatorsBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_authenticators).\n         *\n         * See also {@link stampDeleteAuthenticators}.\n         */\n        this.deleteAuthenticators = async (input) => {\n            return this.request(\"/public/v1/submit/delete_authenticators\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteAuthenticatorsBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteAuthenticators}.\n         */\n        this.stampDeleteAuthenticators = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_authenticators\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Invitation\n         *\n         * Sign the provided `TDeleteInvitationBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_invitation).\n         *\n         * See also {@link stampDeleteInvitation}.\n         */\n        this.deleteInvitation = async (input) => {\n            return this.request(\"/public/v1/submit/delete_invitation\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeleteInvitationBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeleteInvitation}.\n         */\n        this.stampDeleteInvitation = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_invitation\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Delete an existing Policy\n         *\n         * Sign the provided `TDeletePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/delete_policy).\n         *\n         * See also {@link stampDeletePolicy}.\n         */\n        this.deletePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/delete_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TDeletePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link DeletePolicy}.\n         */\n        this.stampDeletePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/delete_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Authenticate a user via Email\n         *\n         * Sign the provided `TEmailAuthBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/email_auth).\n         *\n         * See also {@link stampEmailAuth}.\n         */\n        this.emailAuth = async (input) => {\n            return this.request(\"/public/v1/submit/email_auth\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TEmailAuthBody` by using the client's `stamp` function.\n         *\n         * See also {@link EmailAuth}.\n         */\n        this.stampEmailAuth = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/email_auth\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Private Key\n         *\n         * Sign the provided `TExportPrivateKeyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_private_key).\n         *\n         * See also {@link stampExportPrivateKey}.\n         */\n        this.exportPrivateKey = async (input) => {\n            return this.request(\"/public/v1/submit/export_private_key\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportPrivateKeyBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportPrivateKey}.\n         */\n        this.stampExportPrivateKey = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_private_key\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet\n         *\n         * Sign the provided `TExportWalletBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet).\n         *\n         * See also {@link stampExportWallet}.\n         */\n        this.exportWallet = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWallet}.\n         */\n        this.stampExportWallet = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Exports a Wallet Account\n         *\n         * Sign the provided `TExportWalletAccountBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/export_wallet_account).\n         *\n         * See also {@link stampExportWalletAccount}.\n         */\n        this.exportWalletAccount = async (input) => {\n            return this.request(\"/public/v1/submit/export_wallet_account\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TExportWalletAccountBody` by using the client's `stamp` function.\n         *\n         * See also {@link ExportWalletAccount}.\n         */\n        this.stampExportWalletAccount = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/export_wallet_account\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Initializes a new email recovery\n         *\n         * Sign the provided `TInitUserEmailRecoveryBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/init_user_email_recovery).\n         *\n         * See also {@link stampInitUserEmailRecovery}.\n         */\n        this.initUserEmailRecovery = async (input) => {\n            return this.request(\"/public/v1/submit/init_user_email_recovery\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TInitUserEmailRecoveryBody` by using the client's `stamp` function.\n         *\n         * See also {@link InitUserEmailRecovery}.\n         */\n        this.stampInitUserEmailRecovery = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/init_user_email_recovery\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Completes the process of recovering a user by adding an authenticator\n         *\n         * Sign the provided `TRecoverUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/recover_user).\n         *\n         * See also {@link stampRecoverUser}.\n         */\n        this.recoverUser = async (input) => {\n            return this.request(\"/public/v1/submit/recover_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRecoverUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link RecoverUser}.\n         */\n        this.stampRecoverUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/recover_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Reject an Activity\n         *\n         * Sign the provided `TRejectActivityBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/reject_activity).\n         *\n         * See also {@link stampRejectActivity}.\n         */\n        this.rejectActivity = async (input) => {\n            return this.request(\"/public/v1/submit/reject_activity\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRejectActivityBody` by using the client's `stamp` function.\n         *\n         * See also {@link RejectActivity}.\n         */\n        this.stampRejectActivity = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/reject_activity\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Removes an organization feature\n         *\n         * Sign the provided `TRemoveOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/remove_organization_feature).\n         *\n         * See also {@link stampRemoveOrganizationFeature}.\n         */\n        this.removeOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/remove_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TRemoveOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link RemoveOrganizationFeature}.\n         */\n        this.stampRemoveOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/remove_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sets an organization feature\n         *\n         * Sign the provided `TSetOrganizationFeatureBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/set_organization_feature).\n         *\n         * See also {@link stampSetOrganizationFeature}.\n         */\n        this.setOrganizationFeature = async (input) => {\n            return this.request(\"/public/v1/submit/set_organization_feature\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSetOrganizationFeatureBody` by using the client's `stamp` function.\n         *\n         * See also {@link SetOrganizationFeature}.\n         */\n        this.stampSetOrganizationFeature = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/set_organization_feature\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a raw payload\n         *\n         * Sign the provided `TSignRawPayloadBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_raw_payload).\n         *\n         * See also {@link stampSignRawPayload}.\n         */\n        this.signRawPayload = async (input) => {\n            return this.request(\"/public/v1/submit/sign_raw_payload\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignRawPayloadBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignRawPayload}.\n         */\n        this.stampSignRawPayload = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_raw_payload\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Sign a transaction\n         *\n         * Sign the provided `TSignTransactionBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/sign_transaction).\n         *\n         * See also {@link stampSignTransaction}.\n         */\n        this.signTransaction = async (input) => {\n            return this.request(\"/public/v1/submit/sign_transaction\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TSignTransactionBody` by using the client's `stamp` function.\n         *\n         * See also {@link SignTransaction}.\n         */\n        this.stampSignTransaction = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/sign_transaction\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update an existing Policy\n         *\n         * Sign the provided `TUpdatePolicyBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_policy).\n         *\n         * See also {@link stampUpdatePolicy}.\n         */\n        this.updatePolicy = async (input) => {\n            return this.request(\"/public/v1/submit/update_policy\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePolicyBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePolicy}.\n         */\n        this.stampUpdatePolicy = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_policy\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdatePrivateKeyTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_private_key_tag).\n         *\n         * See also {@link stampUpdatePrivateKeyTag}.\n         */\n        this.updatePrivateKeyTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_private_key_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdatePrivateKeyTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdatePrivateKeyTag}.\n         */\n        this.stampUpdatePrivateKeyTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_private_key_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n         *\n         * Sign the provided `TUpdateRootQuorumBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_root_quorum).\n         *\n         * See also {@link stampUpdateRootQuorum}.\n         */\n        this.updateRootQuorum = async (input) => {\n            return this.request(\"/public/v1/submit/update_root_quorum\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateRootQuorumBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateRootQuorum}.\n         */\n        this.stampUpdateRootQuorum = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_root_quorum\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update a User in an existing Organization\n         *\n         * Sign the provided `TUpdateUserBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user).\n         *\n         * See also {@link stampUpdateUser}.\n         */\n        this.updateUser = async (input) => {\n            return this.request(\"/public/v1/submit/update_user\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUser}.\n         */\n        this.stampUpdateUser = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        /**\n         * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n         *\n         * Sign the provided `TUpdateUserTagBody` with the client's `stamp` function, and submit the request (POST /public/v1/submit/update_user_tag).\n         *\n         * See also {@link stampUpdateUserTag}.\n         */\n        this.updateUserTag = async (input) => {\n            return this.request(\"/public/v1/submit/update_user_tag\", input);\n        };\n        /**\n         * Produce a `SignedRequest` from `TUpdateUserTagBody` by using the client's `stamp` function.\n         *\n         * See also {@link UpdateUserTag}.\n         */\n        this.stampUpdateUserTag = async (input) => {\n            const fullUrl = this.config.baseUrl + \"/public/v1/submit/update_user_tag\";\n            const body = JSON.stringify(input);\n            const stamp = await this.stamper.stamp(body);\n            return {\n                body: body,\n                stamp: stamp,\n                url: fullUrl,\n            };\n        };\n        if (!config.baseUrl) {\n            throw new Error(`Missing base URL. Please verify env vars.`);\n        }\n        this.config = config;\n        this.stamper = stamper;\n    }\n    async request(url, body) {\n        const fullUrl = this.config.baseUrl + url;\n        const stringifiedBody = JSON.stringify(body);\n        const stamp = await this.stamper.stamp(stringifiedBody);\n        const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_2__.fetch)(fullUrl, {\n            method: \"POST\",\n            headers: {\n                [stamp.stampHeaderName]: stamp.stampHeaderValue,\n                \"X-Client-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n            },\n            body: stringifiedBody,\n            redirect: \"follow\",\n        });\n        if (!response.ok) {\n            let res;\n            try {\n                res = await response.json();\n            }\n            catch (_) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            throw new _base_mjs__WEBPACK_IMPORTED_MODULE_0__.TurnkeyRequestError(res);\n        }\n        const data = await response.json();\n        return data;\n    }\n}\n\n\n//# sourceMappingURL=public_api.client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs":
/*!*****************************************************************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approveActivity: () => (/* binding */ approveActivity),\n/* harmony export */   createApiKeys: () => (/* binding */ createApiKeys),\n/* harmony export */   createApiOnlyUsers: () => (/* binding */ createApiOnlyUsers),\n/* harmony export */   createAuthenticators: () => (/* binding */ createAuthenticators),\n/* harmony export */   createInvitations: () => (/* binding */ createInvitations),\n/* harmony export */   createPolicy: () => (/* binding */ createPolicy),\n/* harmony export */   createPrivateKeyTag: () => (/* binding */ createPrivateKeyTag),\n/* harmony export */   createPrivateKeys: () => (/* binding */ createPrivateKeys),\n/* harmony export */   createSubOrganization: () => (/* binding */ createSubOrganization),\n/* harmony export */   createUserTag: () => (/* binding */ createUserTag),\n/* harmony export */   createUsers: () => (/* binding */ createUsers),\n/* harmony export */   createWallet: () => (/* binding */ createWallet),\n/* harmony export */   createWalletAccounts: () => (/* binding */ createWalletAccounts),\n/* harmony export */   deleteApiKeys: () => (/* binding */ deleteApiKeys),\n/* harmony export */   deleteAuthenticators: () => (/* binding */ deleteAuthenticators),\n/* harmony export */   deleteInvitation: () => (/* binding */ deleteInvitation),\n/* harmony export */   deletePolicy: () => (/* binding */ deletePolicy),\n/* harmony export */   emailAuth: () => (/* binding */ emailAuth),\n/* harmony export */   exportPrivateKey: () => (/* binding */ exportPrivateKey),\n/* harmony export */   exportWallet: () => (/* binding */ exportWallet),\n/* harmony export */   exportWalletAccount: () => (/* binding */ exportWalletAccount),\n/* harmony export */   getActivities: () => (/* binding */ getActivities),\n/* harmony export */   getActivity: () => (/* binding */ getActivity),\n/* harmony export */   getApiKey: () => (/* binding */ getApiKey),\n/* harmony export */   getApiKeys: () => (/* binding */ getApiKeys),\n/* harmony export */   getAuthenticator: () => (/* binding */ getAuthenticator),\n/* harmony export */   getAuthenticators: () => (/* binding */ getAuthenticators),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getPolicies: () => (/* binding */ getPolicies),\n/* harmony export */   getPolicy: () => (/* binding */ getPolicy),\n/* harmony export */   getPrivateKey: () => (/* binding */ getPrivateKey),\n/* harmony export */   getPrivateKeys: () => (/* binding */ getPrivateKeys),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   getWallet: () => (/* binding */ getWallet),\n/* harmony export */   getWalletAccounts: () => (/* binding */ getWalletAccounts),\n/* harmony export */   getWallets: () => (/* binding */ getWallets),\n/* harmony export */   getWhoami: () => (/* binding */ getWhoami),\n/* harmony export */   initUserEmailRecovery: () => (/* binding */ initUserEmailRecovery),\n/* harmony export */   listPrivateKeyTags: () => (/* binding */ listPrivateKeyTags),\n/* harmony export */   listUserTags: () => (/* binding */ listUserTags),\n/* harmony export */   nOOPCodegenAnchor: () => (/* binding */ nOOPCodegenAnchor),\n/* harmony export */   recoverUser: () => (/* binding */ recoverUser),\n/* harmony export */   rejectActivity: () => (/* binding */ rejectActivity),\n/* harmony export */   removeOrganizationFeature: () => (/* binding */ removeOrganizationFeature),\n/* harmony export */   setOrganizationFeature: () => (/* binding */ setOrganizationFeature),\n/* harmony export */   signApproveActivity: () => (/* binding */ signApproveActivity),\n/* harmony export */   signCreateApiKeys: () => (/* binding */ signCreateApiKeys),\n/* harmony export */   signCreateApiOnlyUsers: () => (/* binding */ signCreateApiOnlyUsers),\n/* harmony export */   signCreateAuthenticators: () => (/* binding */ signCreateAuthenticators),\n/* harmony export */   signCreateInvitations: () => (/* binding */ signCreateInvitations),\n/* harmony export */   signCreatePolicy: () => (/* binding */ signCreatePolicy),\n/* harmony export */   signCreatePrivateKeyTag: () => (/* binding */ signCreatePrivateKeyTag),\n/* harmony export */   signCreatePrivateKeys: () => (/* binding */ signCreatePrivateKeys),\n/* harmony export */   signCreateSubOrganization: () => (/* binding */ signCreateSubOrganization),\n/* harmony export */   signCreateUserTag: () => (/* binding */ signCreateUserTag),\n/* harmony export */   signCreateUsers: () => (/* binding */ signCreateUsers),\n/* harmony export */   signCreateWallet: () => (/* binding */ signCreateWallet),\n/* harmony export */   signCreateWalletAccounts: () => (/* binding */ signCreateWalletAccounts),\n/* harmony export */   signDeleteApiKeys: () => (/* binding */ signDeleteApiKeys),\n/* harmony export */   signDeleteAuthenticators: () => (/* binding */ signDeleteAuthenticators),\n/* harmony export */   signDeleteInvitation: () => (/* binding */ signDeleteInvitation),\n/* harmony export */   signDeletePolicy: () => (/* binding */ signDeletePolicy),\n/* harmony export */   signEmailAuth: () => (/* binding */ signEmailAuth),\n/* harmony export */   signExportPrivateKey: () => (/* binding */ signExportPrivateKey),\n/* harmony export */   signExportWallet: () => (/* binding */ signExportWallet),\n/* harmony export */   signExportWalletAccount: () => (/* binding */ signExportWalletAccount),\n/* harmony export */   signGetActivities: () => (/* binding */ signGetActivities),\n/* harmony export */   signGetActivity: () => (/* binding */ signGetActivity),\n/* harmony export */   signGetApiKey: () => (/* binding */ signGetApiKey),\n/* harmony export */   signGetApiKeys: () => (/* binding */ signGetApiKeys),\n/* harmony export */   signGetAuthenticator: () => (/* binding */ signGetAuthenticator),\n/* harmony export */   signGetAuthenticators: () => (/* binding */ signGetAuthenticators),\n/* harmony export */   signGetOrganization: () => (/* binding */ signGetOrganization),\n/* harmony export */   signGetPolicies: () => (/* binding */ signGetPolicies),\n/* harmony export */   signGetPolicy: () => (/* binding */ signGetPolicy),\n/* harmony export */   signGetPrivateKey: () => (/* binding */ signGetPrivateKey),\n/* harmony export */   signGetPrivateKeys: () => (/* binding */ signGetPrivateKeys),\n/* harmony export */   signGetUser: () => (/* binding */ signGetUser),\n/* harmony export */   signGetUsers: () => (/* binding */ signGetUsers),\n/* harmony export */   signGetWallet: () => (/* binding */ signGetWallet),\n/* harmony export */   signGetWalletAccounts: () => (/* binding */ signGetWalletAccounts),\n/* harmony export */   signGetWallets: () => (/* binding */ signGetWallets),\n/* harmony export */   signGetWhoami: () => (/* binding */ signGetWhoami),\n/* harmony export */   signInitUserEmailRecovery: () => (/* binding */ signInitUserEmailRecovery),\n/* harmony export */   signListPrivateKeyTags: () => (/* binding */ signListPrivateKeyTags),\n/* harmony export */   signListUserTags: () => (/* binding */ signListUserTags),\n/* harmony export */   signNOOPCodegenAnchor: () => (/* binding */ signNOOPCodegenAnchor),\n/* harmony export */   signRawPayload: () => (/* binding */ signRawPayload),\n/* harmony export */   signRecoverUser: () => (/* binding */ signRecoverUser),\n/* harmony export */   signRejectActivity: () => (/* binding */ signRejectActivity),\n/* harmony export */   signRemoveOrganizationFeature: () => (/* binding */ signRemoveOrganizationFeature),\n/* harmony export */   signSetOrganizationFeature: () => (/* binding */ signSetOrganizationFeature),\n/* harmony export */   signSignRawPayload: () => (/* binding */ signSignRawPayload),\n/* harmony export */   signSignTransaction: () => (/* binding */ signSignTransaction),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction),\n/* harmony export */   signUpdatePolicy: () => (/* binding */ signUpdatePolicy),\n/* harmony export */   signUpdatePrivateKeyTag: () => (/* binding */ signUpdatePrivateKeyTag),\n/* harmony export */   signUpdateRootQuorum: () => (/* binding */ signUpdateRootQuorum),\n/* harmony export */   signUpdateUser: () => (/* binding */ signUpdateUser),\n/* harmony export */   signUpdateUserTag: () => (/* binding */ signUpdateUserTag),\n/* harmony export */   updatePolicy: () => (/* binding */ updatePolicy),\n/* harmony export */   updatePrivateKeyTag: () => (/* binding */ updatePrivateKeyTag),\n/* harmony export */   updateRootQuorum: () => (/* binding */ updateRootQuorum),\n/* harmony export */   updateUser: () => (/* binding */ updateUser),\n/* harmony export */   updateUserTag: () => (/* binding */ updateUserTag)\n/* harmony export */ });\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../base.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs\");\n\n\n/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */\n/**\n * Get Activity\n *\n * Get details about an Activity\n *\n * `POST /public/v1/query/get_activity`\n */\nconst getActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivity}\n */\nconst signGetActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about an API key\n *\n * `POST /public/v1/query/get_api_key`\n */\nconst getApiKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKey}\n */\nconst signGetApiKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get API key\n *\n * Get details about API keys for a user\n *\n * `POST /public/v1/query/get_api_keys`\n */\nconst getApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetApiKeys}\n */\nconst signGetApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticator\n *\n * Get details about an authenticator\n *\n * `POST /public/v1/query/get_authenticator`\n */\nconst getAuthenticator = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticator\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticator}\n */\nconst signGetAuthenticator = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticator\",\n    body: input.body,\n    options,\n});\n/**\n * Get Authenticators\n *\n * Get details about authenticators for a user\n *\n * `POST /public/v1/query/get_authenticators`\n */\nconst getAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetAuthenticators}\n */\nconst signGetAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Get Organization\n *\n * Get details about an Organization\n *\n * `POST /public/v1/query/get_organization`\n */\nconst getOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetOrganization}\n */\nconst signGetOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Get Policy\n *\n * Get details about a Policy\n *\n * `POST /public/v1/query/get_policy`\n */\nconst getPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicy}\n */\nconst signGetPolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Get Private Key\n *\n * Get details about a Private Key\n *\n * `POST /public/v1/query/get_private_key`\n */\nconst getPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKey}\n */\nconst signGetPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Get User\n *\n * Get details about a User\n *\n * `POST /public/v1/query/get_user`\n */\nconst getUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUser}\n */\nconst signGetUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_user\",\n    body: input.body,\n    options,\n});\n/**\n * Get Wallet\n *\n * Get details about a Wallet\n *\n * `POST /public/v1/query/get_wallet`\n */\nconst getWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/get_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallet}\n */\nconst signGetWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/get_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * List Activities\n *\n * List all Activities within an Organization\n *\n * `POST /public/v1/query/list_activities`\n */\nconst getActivities = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_activities\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetActivities}\n */\nconst signGetActivities = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_activities\",\n    body: input.body,\n    options,\n});\n/**\n * List Policies\n *\n * List all Policies within an Organization\n *\n * `POST /public/v1/query/list_policies`\n */\nconst getPolicies = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_policies\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPolicies}\n */\nconst signGetPolicies = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_policies\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Key Tags\n *\n * List all Private Key Tags within an Organization\n *\n * `POST /public/v1/query/list_private_key_tags`\n */\nconst listPrivateKeyTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListPrivateKeyTags}\n */\nconst signListPrivateKeyTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_key_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Private Keys\n *\n * List all Private Keys within an Organization\n *\n * `POST /public/v1/query/list_private_keys`\n */\nconst getPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetPrivateKeys}\n */\nconst signGetPrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * List User Tags\n *\n * List all User Tags within an Organization\n *\n * `POST /public/v1/query/list_user_tags`\n */\nconst listUserTags = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_user_tags\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.\n *\n * See {@link ListUserTags}\n */\nconst signListUserTags = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_user_tags\",\n    body: input.body,\n    options,\n});\n/**\n * List Users\n *\n * List all Users within an Organization\n *\n * `POST /public/v1/query/list_users`\n */\nconst getUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetUsers}\n */\nconst signGetUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_users\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets Accounts\n *\n * List all Accounts wirhin a Wallet\n *\n * `POST /public/v1/query/list_wallet_accounts`\n */\nconst getWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWalletAccounts}\n */\nconst signGetWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * List Wallets\n *\n * List all Wallets within an Organization\n *\n * `POST /public/v1/query/list_wallets`\n */\nconst getWallets = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/list_wallets\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWallets}\n */\nconst signGetWallets = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/list_wallets\",\n    body: input.body,\n    options,\n});\n/**\n * Who am I?\n *\n * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.\n *\n * `POST /public/v1/query/whoami`\n */\nconst getWhoami = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/query/whoami\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.\n *\n * See {@link GetWhoami}\n */\nconst signGetWhoami = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/query/whoami\",\n    body: input.body,\n    options,\n});\n/**\n * Approve Activity\n *\n * Approve an Activity\n *\n * `POST /public/v1/submit/approve_activity`\n */\nconst approveActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/approve_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link ApproveActivity}\n */\nconst signApproveActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/approve_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Create API Keys\n *\n * Add api keys to an existing User\n *\n * `POST /public/v1/submit/create_api_keys`\n */\nconst createApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiKeys}\n */\nconst signCreateApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create API-only Users\n *\n * Create API-only Users in an existing Organization\n *\n * `POST /public/v1/submit/create_api_only_users`\n */\nconst createApiOnlyUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateApiOnlyUsers}\n */\nconst signCreateApiOnlyUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_api_only_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Authenticators\n *\n * Create Authenticators to authenticate requests to Turnkey\n *\n * `POST /public/v1/submit/create_authenticators`\n */\nconst createAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateAuthenticators}\n */\nconst signCreateAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Create Invitations\n *\n * Create Invitations to join an existing Organization\n *\n * `POST /public/v1/submit/create_invitations`\n */\nconst createInvitations = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_invitations\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateInvitations}\n */\nconst signCreateInvitations = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_invitations\",\n    body: input.body,\n    options,\n});\n/**\n * Create Policy\n *\n * Create a new Policy\n *\n * `POST /public/v1/submit/create_policy`\n */\nconst createPolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePolicy}\n */\nconst signCreatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Key Tag\n *\n * Create a private key tag and add it to private keys.\n *\n * `POST /public/v1/submit/create_private_key_tag`\n */\nconst createPrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeyTag}\n */\nconst signCreatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Private Keys\n *\n * Create new Private Keys\n *\n * `POST /public/v1/submit/create_private_keys`\n */\nconst createPrivateKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreatePrivateKeys}\n */\nconst signCreatePrivateKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_private_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Create Sub-Organization\n *\n * Create a new Sub-Organization\n *\n * `POST /public/v1/submit/create_sub_organization`\n */\nconst createSubOrganization = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateSubOrganization}\n */\nconst signCreateSubOrganization = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_sub_organization\",\n    body: input.body,\n    options,\n});\n/**\n * Create User Tag\n *\n * Create a user tag and add it to users.\n *\n * `POST /public/v1/submit/create_user_tag`\n */\nconst createUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUserTag}\n */\nconst signCreateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Create Users\n *\n * Create Users in an existing Organization\n *\n * `POST /public/v1/submit/create_users`\n */\nconst createUsers = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_users\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateUsers}\n */\nconst signCreateUsers = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_users\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet\n *\n * Create a Wallet and derive addresses\n *\n * `POST /public/v1/submit/create_wallet`\n */\nconst createWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWallet}\n */\nconst signCreateWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Create Wallet Accounts\n *\n * Derive additional addresses using an existing wallet\n *\n * `POST /public/v1/submit/create_wallet_accounts`\n */\nconst createWalletAccounts = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.\n *\n * See {@link CreateWalletAccounts}\n */\nconst signCreateWalletAccounts = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/create_wallet_accounts\",\n    body: input.body,\n    options,\n});\n/**\n * Delete API Keys\n *\n * Remove api keys from a User\n *\n * `POST /public/v1/submit/delete_api_keys`\n */\nconst deleteApiKeys = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteApiKeys}\n */\nconst signDeleteApiKeys = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_api_keys\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Authenticators\n *\n * Remove authenticators from a User\n *\n * `POST /public/v1/submit/delete_authenticators`\n */\nconst deleteAuthenticators = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteAuthenticators}\n */\nconst signDeleteAuthenticators = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_authenticators\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Invitation\n *\n * Delete an existing Invitation\n *\n * `POST /public/v1/submit/delete_invitation`\n */\nconst deleteInvitation = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeleteInvitation}\n */\nconst signDeleteInvitation = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_invitation\",\n    body: input.body,\n    options,\n});\n/**\n * Delete Policy\n *\n * Delete an existing Policy\n *\n * `POST /public/v1/submit/delete_policy`\n */\nconst deletePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/delete_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link DeletePolicy}\n */\nconst signDeletePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/delete_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Perform Email Auth\n *\n * Authenticate a user via Email\n *\n * `POST /public/v1/submit/email_auth`\n */\nconst emailAuth = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/email_auth\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.\n *\n * See {@link EmailAuth}\n */\nconst signEmailAuth = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/email_auth\",\n    body: input.body,\n    options,\n});\n/**\n * Export Private Key\n *\n * Exports a Private Key\n *\n * `POST /public/v1/submit/export_private_key`\n */\nconst exportPrivateKey = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_private_key\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportPrivateKey}\n */\nconst signExportPrivateKey = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_private_key\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet\n *\n * Exports a Wallet\n *\n * `POST /public/v1/submit/export_wallet`\n */\nconst exportWallet = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWallet}\n */\nconst signExportWallet = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet\",\n    body: input.body,\n    options,\n});\n/**\n * Export Wallet Account\n *\n * Exports a Wallet Account\n *\n * `POST /public/v1/submit/export_wallet_account`\n */\nconst exportWalletAccount = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.\n *\n * See {@link ExportWalletAccount}\n */\nconst signExportWalletAccount = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/export_wallet_account\",\n    body: input.body,\n    options,\n});\n/**\n * Init Email Recovery\n *\n * Initializes a new email recovery\n *\n * `POST /public/v1/submit/init_user_email_recovery`\n */\nconst initUserEmailRecovery = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.\n *\n * See {@link InitUserEmailRecovery}\n */\nconst signInitUserEmailRecovery = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/init_user_email_recovery\",\n    body: input.body,\n    options,\n});\n/**\n * Recover a user\n *\n * Completes the process of recovering a user by adding an authenticator\n *\n * `POST /public/v1/submit/recover_user`\n */\nconst recoverUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/recover_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link RecoverUser}\n */\nconst signRecoverUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/recover_user\",\n    body: input.body,\n    options,\n});\n/**\n * Reject Activity\n *\n * Reject an Activity\n *\n * `POST /public/v1/submit/reject_activity`\n */\nconst rejectActivity = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/reject_activity\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.\n *\n * See {@link RejectActivity}\n */\nconst signRejectActivity = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/reject_activity\",\n    body: input.body,\n    options,\n});\n/**\n * Remove Organization Feature\n *\n * Removes an organization feature\n *\n * `POST /public/v1/submit/remove_organization_feature`\n */\nconst removeOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link RemoveOrganizationFeature}\n */\nconst signRemoveOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/remove_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Set Organization Feature\n *\n * Sets an organization feature\n *\n * `POST /public/v1/submit/set_organization_feature`\n */\nconst setOrganizationFeature = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.\n *\n * See {@link SetOrganizationFeature}\n */\nconst signSetOrganizationFeature = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/set_organization_feature\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Raw Payload\n *\n * Sign a raw payload\n *\n * `POST /public/v1/submit/sign_raw_payload`\n */\nconst signRawPayload = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignRawPayload}\n */\nconst signSignRawPayload = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_raw_payload\",\n    body: input.body,\n    options,\n});\n/**\n * Sign Transaction\n *\n * Sign a transaction\n *\n * `POST /public/v1/submit/sign_transaction`\n */\nconst signTransaction = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.\n *\n * See {@link SignTransaction}\n */\nconst signSignTransaction = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/sign_transaction\",\n    body: input.body,\n    options,\n});\n/**\n * Update Policy\n *\n * Update an existing Policy\n *\n * `POST /public/v1/submit/update_policy`\n */\nconst updatePolicy = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_policy\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePolicy}\n */\nconst signUpdatePolicy = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_policy\",\n    body: input.body,\n    options,\n});\n/**\n * Update Private Key Tag\n *\n * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_private_key_tag`\n */\nconst updatePrivateKeyTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdatePrivateKeyTag}\n */\nconst signUpdatePrivateKeyTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_private_key_tag\",\n    body: input.body,\n    options,\n});\n/**\n * Update Root Quorum\n *\n * Set the threshold and members of the root quorum. This must be approved by the current root quorum.\n *\n * `POST /public/v1/submit/update_root_quorum`\n */\nconst updateRootQuorum = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateRootQuorum}\n */\nconst signUpdateRootQuorum = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_root_quorum\",\n    body: input.body,\n    options,\n});\n/**\n * Update User\n *\n * Update a User in an existing Organization\n *\n * `POST /public/v1/submit/update_user`\n */\nconst updateUser = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUser}\n */\nconst signUpdateUser = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user\",\n    body: input.body,\n    options,\n});\n/**\n * Update User Tag\n *\n * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.\n *\n * `POST /public/v1/submit/update_user_tag`\n */\nconst updateUserTag = (input) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    method: \"POST\",\n    body: input.body,\n});\n/**\n * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.\n *\n * See {@link UpdateUserTag}\n */\nconst signUpdateUserTag = (input, options) => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/public/v1/submit/update_user_tag\",\n    body: input.body,\n    options,\n});\n/**\n * `POST /tkhq/api/v1/noop-codegen-anchor`\n */\nconst nOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.request)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n    method: \"POST\",\n});\n/**\n * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.\n *\n * See {@link NOOPCodegenAnchor}\n */\nconst signNOOPCodegenAnchor = () => (0,_base_mjs__WEBPACK_IMPORTED_MODULE_0__.signedRequest)({\n    uri: \"/tkhq/api/v1/noop-codegen-anchor\",\n});\n\n\n//# sourceMappingURL=public_api.fetcher.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/async.mjs":
/*!*******************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/async.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createActivityPoller: () => (/* binding */ createActivityPoller),\n/* harmony export */   withAsyncPolling: () => (/* binding */ withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/shared.mjs\");\n\n\n\nconst DEFAULT_REFRESH_INTERVAL_MS = 500;\n/**\n * Wraps a request to create a fetcher with built-in async polling support.\n *\n * @deprecated this function only works with {@link TurnkeyApi}.\n * Use {@link TurnkeyClient} and {@link createActivityPoller} instead.\n */\nfunction withAsyncPolling(params) {\n    const { request, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS } = params;\n    return async (input) => {\n        const initialResponse = await request(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await (0,_generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__.getActivity)({\n                body: {\n                    activityId: activity.id,\n                    organizationId: activity.organizationId,\n                },\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\n/**\n * Wraps a client request function (e.g. `client.createPrivateKeys`) in a poller.\n * The default refresh interval is 500ms.\n *\n * The returned poller will poll until the activity becomes `COMPLETED`.\n * If the activity becomes `FAILED` or `REJECTED` or is flagged as `NEEDS_CONSENSUS`, an error is thrown.\n *\n * @example\n * const activityPoller = createActivityPoller(client, client.createPrivateKeys);\n * const activity = await activityPoller(input);\n * console.log(activity.result); // activity is completed\n */\nfunction createActivityPoller(params) {\n    const { client, requestFn, refreshIntervalMs = DEFAULT_REFRESH_INTERVAL_MS, } = params;\n    return async (input) => {\n        const initialResponse = await requestFn(input);\n        let activity = initialResponse.activity;\n        while (true) {\n            switch (activity.status) {\n                case \"ACTIVITY_STATUS_COMPLETED\": {\n                    return activity;\n                }\n                case \"ACTIVITY_STATUS_CREATED\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_PENDING\": {\n                    // Async pending state -- keep polling\n                    break;\n                }\n                case \"ACTIVITY_STATUS_CONSENSUS_NEEDED\": {\n                    // If the activity requires consensus, we shouldn't be polling forever.\n                    // You can read the `TurnkeyActivityError` thrown to get the `activityId`,\n                    // store it somewhere, then re-fetch the activity via `.postGetActivity(...)`\n                    // when the required approvals/rejections are in place.\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Consensus needed for activity ${activity.id}`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_FAILED\": {\n                    // Activity failed\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} failed`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                case \"ACTIVITY_STATUS_REJECTED\": {\n                    // Activity was rejected\n                    throw new _shared_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyActivityError({\n                        message: `Activity ${activity.id} was rejected`,\n                        activityId: activity.id,\n                        activityStatus: activity.status,\n                        activityType: activity.type,\n                    });\n                }\n                default: {\n                    // Make sure the switch block is exhaustive\n                    assertNever(activity.status);\n                }\n            }\n            await sleep(refreshIntervalMs);\n            const pollingResponse = await client.getActivity({\n                activityId: activity.id,\n                organizationId: activity.organizationId,\n            });\n            activity = pollingResponse.activity;\n        }\n    };\n}\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, ms);\n    });\n}\nfunction assertNever(input, message) {\n    throw new Error(message != null ? message : `Unexpected case: ${JSON.stringify(input)}`);\n}\n\n\n//# sourceMappingURL=async.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/async.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs":
/*!******************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyRequestError: () => (/* binding */ TurnkeyRequestError),\n/* harmony export */   fetch: () => (/* reexport safe */ _universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   sealAndStampRequestBody: () => (/* binding */ sealAndStampRequestBody),\n/* harmony export */   signedRequest: () => (/* binding */ signedRequest)\n/* harmony export */ });\n/* harmony import */ var _turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turnkey/api-key-stamper */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/api-key-stamper/dist/index.mjs\");\n/* harmony import */ var _universal_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./universal.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/universal.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @turnkey/encoding */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/encoding/dist/index.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn.mjs\");\n\n\n\n\n\n\nconst sharedHeaders = {};\nconst sharedRequestOptions = {\n    redirect: \"follow\",\n};\n/**\n * @deprecated\n */\nasync function signedRequest(input) {\n    const { uri: inputUri, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const body = JSON.stringify(inputBody);\n    const stamp = await (0,_webauthn_mjs__WEBPACK_IMPORTED_MODULE_4__.getWebAuthnAssertion)(body, input.options);\n    return {\n        url: url.toString(),\n        body,\n        stamp,\n    };\n}\nasync function request(input) {\n    const { uri: inputUri, method, headers: inputHeaders = {}, query: inputQuery = {}, substitution: inputSubstitution = {}, body: inputBody = {}, } = input;\n    const url = constructUrl({\n        uri: inputUri,\n        query: inputQuery,\n        substitution: inputSubstitution,\n    });\n    const { sealedBody, xStamp } = await sealAndStampRequestBody({\n        body: inputBody,\n    });\n    const response = await (0,_universal_mjs__WEBPACK_IMPORTED_MODULE_1__.fetch)(url.toString(), {\n        ...sharedRequestOptions,\n        method,\n        headers: {\n            ...sharedHeaders,\n            ...inputHeaders,\n            \"X-Stamp\": xStamp,\n        },\n        body: sealedBody,\n    });\n    if (!response.ok) {\n        // Can't use native `cause` here because it's not well supported on Node v16\n        // https://node.green/#ES2022-features-Error-cause-property\n        let res;\n        try {\n            res = await response.json();\n        }\n        catch (_) {\n            throw new Error(`${response.status} ${response.statusText}`);\n        }\n        throw new TurnkeyRequestError(res);\n    }\n    const data = await response.json();\n    return data;\n}\nfunction constructUrl(input) {\n    const { uri, query, substitution } = input;\n    const baseUrl = getBaseUrl();\n    const url = new URL(substitutePath(uri, substitution), baseUrl);\n    for (const key in query) {\n        const value = query[key];\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                url.searchParams.append(key, item);\n            }\n        }\n        else {\n            url.searchParams.append(key, value ?? \"\");\n        }\n    }\n    return url;\n}\nfunction getBaseUrl() {\n    try {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        return baseUrl;\n    }\n    catch (e) {\n        const { baseUrl } = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getBrowserConfig)();\n        return baseUrl;\n    }\n}\nfunction substitutePath(uri, substitutionMap) {\n    let result = uri;\n    const keyList = Object.keys(substitutionMap);\n    for (const key of keyList) {\n        const output = result.replaceAll(`{${key}}`, substitutionMap[key]);\n        invariant(output !== result, `Substitution error: cannot find \"${key}\" in URI \"${uri}\". \\`substitutionMap\\`: ${JSON.stringify(substitutionMap)}`);\n        result = output;\n    }\n    invariant(!/\\{.*\\}/.test(result), `Substitution error: found unsubstituted components in \"${result}\"`);\n    return result;\n}\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message);\n    }\n}\nfunction stableStringify(input) {\n    return JSON.stringify(input);\n}\n/**\n * Seals and stamps the request body with your Turnkey API credentials.\n *\n * You can either:\n * - Before calling `sealAndStampRequestBody(...)`, initialize with your Turnkey API credentials via `init(...)`\n * - Or, provide `apiPublicKey` and `apiPrivateKey` here as arguments\n */\nasync function sealAndStampRequestBody(input) {\n    const { body } = input;\n    let { apiPublicKey, apiPrivateKey } = input;\n    if (!apiPublicKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPublicKey = config.apiPublicKey;\n    }\n    if (!apiPrivateKey) {\n        const config = (0,_config_mjs__WEBPACK_IMPORTED_MODULE_2__.getConfig)();\n        apiPrivateKey = config.apiPrivateKey;\n    }\n    const sealedBody = stableStringify(body);\n    const signature = await (0,_turnkey_api_key_stamper__WEBPACK_IMPORTED_MODULE_0__.signWithApiKey)({\n        content: sealedBody,\n        privateKey: apiPrivateKey,\n        publicKey: apiPublicKey,\n    });\n    const sealedStamp = stableStringify({\n        publicKey: apiPublicKey,\n        scheme: \"SIGNATURE_SCHEME_TK_API_P256\",\n        signature: signature,\n    });\n    const xStamp = (0,_turnkey_encoding__WEBPACK_IMPORTED_MODULE_3__.stringToBase64urlString)(sealedStamp);\n    return {\n        sealedBody,\n        xStamp,\n    };\n}\nclass TurnkeyRequestError extends Error {\n    constructor(input) {\n        let turnkeyErrorMessage = `Turnkey error ${input.code}: ${input.message}`;\n        if (input.details != null) {\n            turnkeyErrorMessage += ` (Details: ${JSON.stringify(input.details)})`;\n        }\n        super(turnkeyErrorMessage);\n        this.name = \"TurnkeyRequestError\";\n        this.details = input.details ?? null;\n        this.code = input.code;\n    }\n}\n\n\n//# sourceMappingURL=base.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/config.mjs":
/*!********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/config.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserInit: () => (/* binding */ browserInit),\n/* harmony export */   getBrowserConfig: () => (/* binding */ getBrowserConfig),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   init: () => (/* binding */ init)\n/* harmony export */ });\nconst config = {\n    apiPublicKey: null,\n    apiPrivateKey: null,\n    baseUrl: null,\n};\nconst browserConfig = {\n    baseUrl: null,\n};\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction browserInit(value) {\n    browserConfig.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\n/**\n * @deprecated use {@link TurnkeyClient} instead, which doesn't rely on global initialization logic.\n */\nfunction init(value) {\n    config.apiPublicKey = assertNonEmptyString(value.apiPublicKey, \"apiPublicKey\");\n    config.apiPrivateKey = assertNonEmptyString(value.apiPrivateKey, \"apiPrivateKey\");\n    config.baseUrl = assertNonEmptyString(value.baseUrl, \"baseUrl\");\n}\nfunction getConfig() {\n    return {\n        apiPublicKey: assertNonEmptyString(config.apiPublicKey, \"apiPublicKey\"),\n        apiPrivateKey: assertNonEmptyString(config.apiPrivateKey, \"apiPrivateKey\"),\n        baseUrl: assertNonEmptyString(config.baseUrl, \"baseUrl\"),\n    };\n}\nfunction getBrowserConfig() {\n    return {\n        baseUrl: assertNonEmptyString(browserConfig.baseUrl, \"baseUrl\"),\n    };\n}\nfunction assertNonEmptyString(input, name) {\n    if (typeof input !== \"string\" || !input) {\n        throw new Error(`\"${name}\" must be a non-empty string`);\n    }\n    return input;\n}\n\n\n//# sourceMappingURL=config.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9jb25maWcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsS0FBSztBQUNqQztBQUNBO0FBQ0E7O0FBRTBEO0FBQzFEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvY29uZmlnLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XG4gICAgYXBpUHVibGljS2V5OiBudWxsLFxuICAgIGFwaVByaXZhdGVLZXk6IG51bGwsXG4gICAgYmFzZVVybDogbnVsbCxcbn07XG5jb25zdCBicm93c2VyQ29uZmlnID0ge1xuICAgIGJhc2VVcmw6IG51bGwsXG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGJyb3dzZXJJbml0KHZhbHVlKSB7XG4gICAgYnJvd3NlckNvbmZpZy5iYXNlVXJsID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYmFzZVVybCwgXCJiYXNlVXJsXCIpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIFR1cm5rZXlDbGllbnR9IGluc3RlYWQsIHdoaWNoIGRvZXNuJ3QgcmVseSBvbiBnbG9iYWwgaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gKi9cbmZ1bmN0aW9uIGluaXQodmFsdWUpIHtcbiAgICBjb25maWcuYXBpUHVibGljS2V5ID0gYXNzZXJ0Tm9uRW1wdHlTdHJpbmcodmFsdWUuYXBpUHVibGljS2V5LCBcImFwaVB1YmxpY0tleVwiKTtcbiAgICBjb25maWcuYXBpUHJpdmF0ZUtleSA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmFwaVByaXZhdGVLZXksIFwiYXBpUHJpdmF0ZUtleVwiKTtcbiAgICBjb25maWcuYmFzZVVybCA9IGFzc2VydE5vbkVtcHR5U3RyaW5nKHZhbHVlLmJhc2VVcmwsIFwiYmFzZVVybFwiKTtcbn1cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhcGlQdWJsaWNLZXk6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGNvbmZpZy5hcGlQdWJsaWNLZXksIFwiYXBpUHVibGljS2V5XCIpLFxuICAgICAgICBhcGlQcml2YXRlS2V5OiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYXBpUHJpdmF0ZUtleSwgXCJhcGlQcml2YXRlS2V5XCIpLFxuICAgICAgICBiYXNlVXJsOiBhc3NlcnROb25FbXB0eVN0cmluZyhjb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VVcmw6IGFzc2VydE5vbkVtcHR5U3RyaW5nKGJyb3dzZXJDb25maWcuYmFzZVVybCwgXCJiYXNlVXJsXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eVN0cmluZyhpbnB1dCwgbmFtZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIgfHwgIWlucHV0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke25hbWV9XCIgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG5leHBvcnQgeyBicm93c2VySW5pdCwgZ2V0QnJvd3NlckNvbmZpZywgZ2V0Q29uZmlnLCBpbml0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/config.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/index.mjs":
/*!*******************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/index.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicApiService: () => (/* binding */ PublicApiService),\n/* harmony export */   TurnkeyActivityError: () => (/* reexport safe */ _shared_mjs__WEBPACK_IMPORTED_MODULE_4__.TurnkeyActivityError),\n/* harmony export */   TurnkeyApi: () => (/* reexport module object */ _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   TurnkeyClient: () => (/* reexport safe */ _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__.TurnkeyClient),\n/* harmony export */   TurnkeyRequestError: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.TurnkeyRequestError),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version_mjs__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   browserInit: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.browserInit),\n/* harmony export */   createActivityPoller: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.createActivityPoller),\n/* harmony export */   getWebAuthnAttestation: () => (/* reexport safe */ _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__.getWebAuthnAttestation),\n/* harmony export */   init: () => (/* reexport safe */ _config_mjs__WEBPACK_IMPORTED_MODULE_2__.init),\n/* harmony export */   sealAndStampRequestBody: () => (/* reexport safe */ _base_mjs__WEBPACK_IMPORTED_MODULE_3__.sealAndStampRequestBody),\n/* harmony export */   withAsyncPolling: () => (/* reexport safe */ _async_mjs__WEBPACK_IMPORTED_MODULE_6__.withAsyncPolling)\n/* harmony export */ });\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.fetcher.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.fetcher.mjs\");\n/* harmony import */ var _generated_services_coordinator_public_v1_public_api_client_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./__generated__/services/coordinator/public/v1/public_api.client.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/__generated__/services/coordinator/public/v1/public_api.client.mjs\");\n/* harmony import */ var _config_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/config.mjs\");\n/* harmony import */ var _base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/base.mjs\");\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/shared.mjs\");\n/* harmony import */ var _webauthn_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webauthn.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn.mjs\");\n/* harmony import */ var _async_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./async.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/async.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/version.mjs\");\n\n\n\n\n\n\n\n\n\n/**\n * @deprecated use `TurnkeyApi` instead\n */\nconst PublicApiService = _generated_services_coordinator_public_v1_public_api_fetcher_mjs__WEBPACK_IMPORTED_MODULE_0__;\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEc7QUFDUDtBQUNwRDtBQUN5QjtBQUN0QjtBQUNJO0FBQ2E7QUFDN0I7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2RkFBa0I7O0FBRW1CO0FBQzlEIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHB1YmxpY19hcGlfZmV0Y2hlciBmcm9tICcuL19fZ2VuZXJhdGVkX18vc2VydmljZXMvY29vcmRpbmF0b3IvcHVibGljL3YxL3B1YmxpY19hcGkuZmV0Y2hlci5tanMnO1xuZXhwb3J0IHsgVHVybmtleUNsaWVudCB9IGZyb20gJy4vX19nZW5lcmF0ZWRfXy9zZXJ2aWNlcy9jb29yZGluYXRvci9wdWJsaWMvdjEvcHVibGljX2FwaS5jbGllbnQubWpzJztcbmV4cG9ydCB7IGJyb3dzZXJJbml0LCBpbml0IH0gZnJvbSAnLi9jb25maWcubWpzJztcbmV4cG9ydCB7IFR1cm5rZXlSZXF1ZXN0RXJyb3IsIHNlYWxBbmRTdGFtcFJlcXVlc3RCb2R5IH0gZnJvbSAnLi9iYXNlLm1qcyc7XG5leHBvcnQgeyBUdXJua2V5QWN0aXZpdHlFcnJvciB9IGZyb20gJy4vc2hhcmVkLm1qcyc7XG5leHBvcnQgeyBnZXRXZWJBdXRobkF0dGVzdGF0aW9uIH0gZnJvbSAnLi93ZWJhdXRobi5tanMnO1xuZXhwb3J0IHsgY3JlYXRlQWN0aXZpdHlQb2xsZXIsIHdpdGhBc3luY1BvbGxpbmcgfSBmcm9tICcuL2FzeW5jLm1qcyc7XG5leHBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnLi92ZXJzaW9uLm1qcyc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGBUdXJua2V5QXBpYCBpbnN0ZWFkXG4gKi9cbmNvbnN0IFB1YmxpY0FwaVNlcnZpY2UgPSBwdWJsaWNfYXBpX2ZldGNoZXI7XG5cbmV4cG9ydCB7IFB1YmxpY0FwaVNlcnZpY2UsIHB1YmxpY19hcGlfZmV0Y2hlciBhcyBUdXJua2V5QXBpIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/shared.mjs":
/*!********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/shared.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TurnkeyActivityError: () => (/* binding */ TurnkeyActivityError)\n/* harmony export */ });\nclass TurnkeyActivityError extends Error {\n    constructor(input) {\n        const { message, cause, activityId, activityStatus, activityType } = input;\n        super(message);\n        this.name = \"TurnkeyActivityError\";\n        this.activityId = activityId ?? null;\n        this.activityStatus = activityStatus ?? null;\n        this.activityType = activityType ?? null;\n        this.cause = cause ?? null;\n    }\n}\n\n\n//# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC9zaGFyZWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsZ0JBQWdCLDJEQUEyRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnQztBQUNoQyIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3NoYXJlZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVHVybmtleUFjdGl2aXR5RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlLCBjYXVzZSwgYWN0aXZpdHlJZCwgYWN0aXZpdHlTdGF0dXMsIGFjdGl2aXR5VHlwZSB9ID0gaW5wdXQ7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlR1cm5rZXlBY3Rpdml0eUVycm9yXCI7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlJZCA9IGFjdGl2aXR5SWQgPz8gbnVsbDtcbiAgICAgICAgdGhpcy5hY3Rpdml0eVN0YXR1cyA9IGFjdGl2aXR5U3RhdHVzID8/IG51bGw7XG4gICAgICAgIHRoaXMuYWN0aXZpdHlUeXBlID0gYWN0aXZpdHlUeXBlID8/IG51bGw7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZSA/PyBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHVybmtleUFjdGl2aXR5RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/shared.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/universal.mjs":
/*!***********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/universal.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/node_modules/cross-fetch/dist/node-ponyfill.js\");\n\n\n/// <reference lib=\"dom\" />\n// This is useful for mocking fetch in tests.\nconst fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_0__.fetch;\n\n\n//# sourceMappingURL=universal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC91bml2ZXJzYWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDOztBQUUvQztBQUNBO0FBQ0EsY0FBYyw4Q0FBTzs7QUFFSjtBQUNqQiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3VuaXZlcnNhbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmV0Y2ggYXMgZmV0Y2gkMSB9IGZyb20gJ2Nyb3NzLWZldGNoJztcblxuLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIFRoaXMgaXMgdXNlZnVsIGZvciBtb2NraW5nIGZldGNoIGluIHRlc3RzLlxuY29uc3QgZmV0Y2ggPSBmZXRjaCQxO1xuXG5leHBvcnQgeyBmZXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pdmVyc2FsLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/universal.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/version.mjs":
/*!*********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/version.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"@turnkey/http@2.7.1\";\n\n\n//# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC92ZXJzaW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3QvdmVyc2lvbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVkVSU0lPTiA9IFwiQHR1cm5rZXkvaHR0cEAyLjcuMVwiO1xuXG5leHBvcnQgeyBWRVJTSU9OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/version.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/api.mjs":
/*!*******************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/api.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createResponseToJSON: () => (/* binding */ createResponseToJSON),\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction createResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAttestation, credential);\n}\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0Q7QUFDWjtBQUM0RDs7QUFFcEc7QUFDQSxXQUFXLHFEQUFPLENBQUMsNkRBQWlCLEVBQUUsMkVBQWtDO0FBQ3hFO0FBQ0E7QUFDQSxXQUFXLHFEQUFPLENBQUMsNkRBQWlCLEVBQUUseUVBQWdDO0FBQ3RFOztBQUVtRDtBQUNuRCIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vYXBpLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBidWZmZXJUb0Jhc2U2NHVybCB9IGZyb20gJy4vYmFzZTY0dXJsLm1qcyc7XG5pbXBvcnQgeyBjb252ZXJ0IH0gZnJvbSAnLi9jb252ZXJ0Lm1qcyc7XG5pbXBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiB9IGZyb20gJy4vc2NoZW1hLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlVG9KU09OKGNyZWRlbnRpYWwpIHtcbiAgICByZXR1cm4gY29udmVydChidWZmZXJUb0Jhc2U2NHVybCwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiwgY3JlZGVudGlhbCk7XG59XG5mdW5jdGlvbiBnZXRSZXNwb25zZVRvSlNPTihjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIGNvbnZlcnQoYnVmZmVyVG9CYXNlNjR1cmwsIHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uLCBjcmVkZW50aWFsKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlUmVzcG9uc2VUb0pTT04sIGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs":
/*!*************************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS92aWVtL25vZGVfbW9kdWxlcy9AdHVybmtleS9odHRwL2Rpc3Qvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs":
/*!***********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUU7QUFDekUiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/index.mjs":
/*!*********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/index.mjs ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/api.mjs\");\n\n\nasync function create(options) {\n    const response = (await navigator.credentials.create(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.createResponseToJSON)(response);\n    return response;\n}\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7O0FBRXBFO0FBQ0E7QUFDQSw0QkFBNEIsOERBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJEQUFpQjtBQUM3QztBQUNBOztBQUV1QjtBQUN2QiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLWpzb24vaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlc3BvbnNlVG9KU09OLCBnZXRSZXNwb25zZVRvSlNPTiB9IGZyb20gJy4vYXBpLm1qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmNyZWF0ZShvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gY3JlYXRlUmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldChvcHRpb25zKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbmF2aWdhdG9yLmNyZWRlbnRpYWxzLmdldChvcHRpb25zKSk7XG4gICAgcmVzcG9uc2UudG9KU09OID0gKCkgPT4gZ2V0UmVzcG9uc2VUb0pTT04ocmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlLCBnZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs":
/*!**********************************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion),\n/* harmony export */   publicKeyCredentialWithAttestation: () => (/* binding */ publicKeyCredentialWithAttestation)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.create()` response\nconst publicKeyCredentialWithAttestation = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        attestationObject: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        transports: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue, (response) => response.getTransports?.() || []),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFGOztBQUVyRjtBQUNBLFdBQVcsc0RBQVEsQ0FBQyxtREFBUztBQUM3QixrQkFBa0Isc0RBQVEsQ0FBQyxtREFBUztBQUNwQyxlQUFlLHNEQUFRLENBQUMsbURBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzREFBUSxDQUFDLG1EQUFTO0FBQzVCLFFBQVEsc0RBQVEsQ0FBQyxtREFBUztBQUMxQixXQUFXLHNEQUFRLENBQUMsc0RBQVk7QUFDaEMsNkJBQTZCLHNEQUFRLENBQUMsbURBQVM7QUFDL0MsY0FBYyxzREFBUTtBQUN0Qix3QkFBd0Isc0RBQVEsQ0FBQyxzREFBWTtBQUM3QywyQkFBMkIsc0RBQVEsQ0FBQyxzREFBWTtBQUNoRCxvQkFBb0IscURBQU8sQ0FBQyxtREFBUztBQUNyQyxLQUFLO0FBQ0wsNEJBQTRCLHFEQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQVEsQ0FBQyxtREFBUztBQUM1QixRQUFRLHNEQUFRLENBQUMsbURBQVM7QUFDMUIsV0FBVyxzREFBUSxDQUFDLHNEQUFZO0FBQ2hDLDZCQUE2QixzREFBUSxDQUFDLG1EQUFTO0FBQy9DLGNBQWMsc0RBQVE7QUFDdEIsd0JBQXdCLHNEQUFRLENBQUMsc0RBQVk7QUFDN0MsMkJBQTJCLHNEQUFRLENBQUMsc0RBQVk7QUFDaEQsbUJBQW1CLHNEQUFRLENBQUMsc0RBQVk7QUFDeEMsb0JBQW9CLHNEQUFRLENBQUMsc0RBQVk7QUFDekMsS0FBSztBQUNMLDRCQUE0QixxREFBTztBQUNuQzs7QUFFZ0Y7QUFDaEYiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWlyZWQsIG9wdGlvbmFsLCBkZXJpdmVkLCBjb3B5VmFsdWUsIGNvbnZlcnRWYWx1ZSB9IGZyb20gJy4vY29udmVydC5tanMnO1xuXG5jb25zdCBzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSA9IHtcbiAgICBhcHBpZDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICBhcHBpZEV4Y2x1ZGU6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgY3JlZFByb3BzOiBvcHRpb25hbChjb3B5VmFsdWUpLFxufTtcbi8vIGBuYXZpZ2F0b3IuY3JlYXRlKClgIHJlc3BvbnNlXG5jb25zdCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEF0dGVzdGF0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICB0cmFuc3BvcnRzOiBkZXJpdmVkKGNvcHlWYWx1ZSwgKHJlc3BvbnNlKSA9PiByZXNwb25zZS5nZXRUcmFuc3BvcnRzPy4oKSB8fCBbXSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuLy8gYG5hdmlnYXRvci5nZXQoKWAgcmVzcG9uc2VcbmNvbnN0IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uID0ge1xuICAgIHR5cGU6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgaWQ6IHJlcXVpcmVkKGNvcHlWYWx1ZSksXG4gICAgcmF3SWQ6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgYXV0aGVudGljYXRvckF0dGFjaG1lbnQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgcmVzcG9uc2U6IHJlcXVpcmVkKHtcbiAgICAgICAgY2xpZW50RGF0YUpTT046IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiByZXF1aXJlZChjb252ZXJ0VmFsdWUpLFxuICAgICAgICBzaWduYXR1cmU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHVzZXJIYW5kbGU6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgfSksXG4gICAgY2xpZW50RXh0ZW5zaW9uUmVzdWx0czogZGVyaXZlZChzaW1wbGlmaWVkQ2xpZW50RXh0ZW5zaW9uUmVzdWx0c1NjaGVtYSwgKHBrYykgPT4gcGtjLmdldENsaWVudEV4dGVuc2lvblJlc3VsdHMoKSksXG59O1xuXG5leHBvcnQgeyBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBdHRlc3RhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/schema.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn.mjs":
/*!**********************************************************************************!*\
  !*** ../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getWebAuthnAssertion: () => (/* binding */ getWebAuthnAssertion),\n/* harmony export */   getWebAuthnAttestation: () => (/* binding */ getWebAuthnAttestation),\n/* harmony export */   protocolTransportEnumToInternalEnum: () => (/* binding */ protocolTransportEnumToInternalEnum)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn-json/index.mjs\");\n\n\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\nconst defaultSigningOptions = {\n    publicKey: {\n        timeout: defaultTimeout,\n        userVerification: defaultUserVerification,\n    },\n};\nasync function getCredentialRequestOptions(payload, tkSigningOptions = defaultSigningOptions) {\n    const challenge = await getChallengeFromPayload(payload);\n    const signingOptions = {\n        ...tkSigningOptions,\n        publicKey: {\n            ...defaultSigningOptions.publicKey,\n            ...tkSigningOptions.publicKey,\n            challenge,\n        },\n    };\n    return signingOptions;\n}\nasync function getChallengeFromPayload(payload) {\n    const messageBuffer = new TextEncoder().encode(payload);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", messageBuffer);\n    const hexString = Buffer.from(hashBuffer).toString(\"hex\");\n    const hexBuffer = Buffer.from(hexString, \"utf8\");\n    return new Uint8Array(hexBuffer);\n}\n/* Pulled from https://www.w3.org/TR/webauthn-2/#enum-transport */\nfunction protocolTransportEnumToInternalEnum(protocolEnum) {\n    switch (protocolEnum) {\n        case \"internal\": {\n            return \"AUTHENTICATOR_TRANSPORT_INTERNAL\";\n        }\n        case \"usb\": {\n            return \"AUTHENTICATOR_TRANSPORT_USB\";\n        }\n        case \"nfc\": {\n            return \"AUTHENTICATOR_TRANSPORT_NFC\";\n        }\n        case \"ble\": {\n            return \"AUTHENTICATOR_TRANSPORT_BLE\";\n        }\n        case \"hybrid\": {\n            return \"AUTHENTICATOR_TRANSPORT_HYBRID\";\n        }\n        default: {\n            throw new Error(\"unsupported transport format\");\n        }\n    }\n}\nfunction toInternalAttestation(attestation) {\n    return {\n        credentialId: attestation.rawId,\n        attestationObject: attestation.response.attestationObject,\n        clientDataJson: attestation.response.clientDataJSON,\n        transports: attestation.response.transports.map(protocolTransportEnumToInternalEnum),\n    };\n}\nasync function getWebAuthnAssertion(payload, options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const signingOptions = await getCredentialRequestOptions(payload, options);\n    const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n    const assertion = clientGetResult.toJSON();\n    const stamp = {\n        authenticatorData: assertion.response.authenticatorData,\n        clientDataJson: assertion.response.clientDataJSON,\n        credentialId: assertion.id,\n        signature: assertion.response.signature,\n    };\n    return JSON.stringify(stamp);\n}\nasync function getWebAuthnAttestation(options) {\n    const webAuthnSupported = hasWebAuthnSupport();\n    if (!webAuthnSupported) {\n        throw new Error(\"webauthn is not supported by this browser\");\n    }\n    const res = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.create)(options);\n    return toInternalAttestation(res.toJSON());\n}\n// `hasWebAuthnSupport` checks for barebones webauthn support.\n// For additional details and granular settings, see:\n// https://web.dev/articles/passkey-form-autofill#feature-detection, https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential\nfunction hasWebAuthnSupport() {\n    return !!window.PublicKeyCredential;\n}\n\n\n//# sourceMappingURL=webauthn.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3ZpZW0vbm9kZV9tb2R1bGVzL0B0dXJua2V5L2h0dHAvZGlzdC93ZWJhdXRobi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDs7QUFFeEQsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsNkRBQUc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnRUFBTTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2RjtBQUM3RiIsInNvdXJjZXMiOlsiL2hvbWUvamFzcGVyL3Byb2plY3RzL2VsaXphLW1vZGUtZXhhbXBsZS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvdmllbS9ub2RlX21vZHVsZXMvQHR1cm5rZXkvaHR0cC9kaXN0L3dlYmF1dGhuLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUsIGdldCB9IGZyb20gJy4vd2ViYXV0aG4tanNvbi9pbmRleC5tanMnO1xuXG5jb25zdCBkZWZhdWx0VGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIGZpdmUgbWludXRlc1xuY29uc3QgZGVmYXVsdFVzZXJWZXJpZmljYXRpb24gPSBcInByZWZlcnJlZFwiO1xuY29uc3QgZGVmYXVsdFNpZ25pbmdPcHRpb25zID0ge1xuICAgIHB1YmxpY0tleToge1xuICAgICAgICB0aW1lb3V0OiBkZWZhdWx0VGltZW91dCxcbiAgICAgICAgdXNlclZlcmlmaWNhdGlvbjogZGVmYXVsdFVzZXJWZXJpZmljYXRpb24sXG4gICAgfSxcbn07XG5hc3luYyBmdW5jdGlvbiBnZXRDcmVkZW50aWFsUmVxdWVzdE9wdGlvbnMocGF5bG9hZCwgdGtTaWduaW5nT3B0aW9ucyA9IGRlZmF1bHRTaWduaW5nT3B0aW9ucykge1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGF3YWl0IGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpO1xuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0ge1xuICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLFxuICAgICAgICBwdWJsaWNLZXk6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRTaWduaW5nT3B0aW9ucy5wdWJsaWNLZXksXG4gICAgICAgICAgICAuLi50a1NpZ25pbmdPcHRpb25zLnB1YmxpY0tleSxcbiAgICAgICAgICAgIGNoYWxsZW5nZSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBzaWduaW5nT3B0aW9ucztcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldENoYWxsZW5nZUZyb21QYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBtZXNzYWdlQnVmZmVyID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBheWxvYWQpO1xuICAgIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgbWVzc2FnZUJ1ZmZlcik7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gQnVmZmVyLmZyb20oaGFzaEJ1ZmZlcikudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgY29uc3QgaGV4QnVmZmVyID0gQnVmZmVyLmZyb20oaGV4U3RyaW5nLCBcInV0ZjhcIik7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhleEJ1ZmZlcik7XG59XG4vKiBQdWxsZWQgZnJvbSBodHRwczovL3d3dy53My5vcmcvVFIvd2ViYXV0aG4tMi8jZW51bS10cmFuc3BvcnQgKi9cbmZ1bmN0aW9uIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtKHByb3RvY29sRW51bSkge1xuICAgIHN3aXRjaCAocHJvdG9jb2xFbnVtKSB7XG4gICAgICAgIGNhc2UgXCJpbnRlcm5hbFwiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9JTlRFUk5BTFwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ1c2JcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfVVNCXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIm5mY1wiOiB7XG4gICAgICAgICAgICByZXR1cm4gXCJBVVRIRU5USUNBVE9SX1RSQU5TUE9SVF9ORkNcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmxlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBcIkFVVEhFTlRJQ0FUT1JfVFJBTlNQT1JUX0JMRVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJoeWJyaWRcIjoge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVVUSEVOVElDQVRPUl9UUkFOU1BPUlRfSFlCUklEXCI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgdHJhbnNwb3J0IGZvcm1hdFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRvSW50ZXJuYWxBdHRlc3RhdGlvbihhdHRlc3RhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWRlbnRpYWxJZDogYXR0ZXN0YXRpb24ucmF3SWQsXG4gICAgICAgIGF0dGVzdGF0aW9uT2JqZWN0OiBhdHRlc3RhdGlvbi5yZXNwb25zZS5hdHRlc3RhdGlvbk9iamVjdCxcbiAgICAgICAgY2xpZW50RGF0YUpzb246IGF0dGVzdGF0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICB0cmFuc3BvcnRzOiBhdHRlc3RhdGlvbi5yZXNwb25zZS50cmFuc3BvcnRzLm1hcChwcm90b2NvbFRyYW5zcG9ydEVudW1Ub0ludGVybmFsRW51bSksXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXNzZXJ0aW9uKHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWJBdXRoblN1cHBvcnRlZCA9IGhhc1dlYkF1dGhuU3VwcG9ydCgpO1xuICAgIGlmICghd2ViQXV0aG5TdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2ViYXV0aG4gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIik7XG4gICAgfVxuICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0gYXdhaXQgZ2V0Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zKHBheWxvYWQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGNsaWVudEdldFJlc3VsdCA9IGF3YWl0IGdldChzaWduaW5nT3B0aW9ucyk7XG4gICAgY29uc3QgYXNzZXJ0aW9uID0gY2xpZW50R2V0UmVzdWx0LnRvSlNPTigpO1xuICAgIGNvbnN0IHN0YW1wID0ge1xuICAgICAgICBhdXRoZW50aWNhdG9yRGF0YTogYXNzZXJ0aW9uLnJlc3BvbnNlLmF1dGhlbnRpY2F0b3JEYXRhLFxuICAgICAgICBjbGllbnREYXRhSnNvbjogYXNzZXJ0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICBjcmVkZW50aWFsSWQ6IGFzc2VydGlvbi5pZCxcbiAgICAgICAgc2lnbmF0dXJlOiBhc3NlcnRpb24ucmVzcG9uc2Uuc2lnbmF0dXJlLFxuICAgIH07XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YW1wKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHdlYkF1dGhuU3VwcG9ydGVkID0gaGFzV2ViQXV0aG5TdXBwb3J0KCk7XG4gICAgaWYgKCF3ZWJBdXRoblN1cHBvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWJhdXRobiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclwiKTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlKG9wdGlvbnMpO1xuICAgIHJldHVybiB0b0ludGVybmFsQXR0ZXN0YXRpb24ocmVzLnRvSlNPTigpKTtcbn1cbi8vIGBoYXNXZWJBdXRoblN1cHBvcnRgIGNoZWNrcyBmb3IgYmFyZWJvbmVzIHdlYmF1dGhuIHN1cHBvcnQuXG4vLyBGb3IgYWRkaXRpb25hbCBkZXRhaWxzIGFuZCBncmFudWxhciBzZXR0aW5ncywgc2VlOlxuLy8gaHR0cHM6Ly93ZWIuZGV2L2FydGljbGVzL3Bhc3NrZXktZm9ybS1hdXRvZmlsbCNmZWF0dXJlLWRldGVjdGlvbiwgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1B1YmxpY0tleUNyZWRlbnRpYWxcbmZ1bmN0aW9uIGhhc1dlYkF1dGhuU3VwcG9ydCgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuUHVibGljS2V5Q3JlZGVudGlhbDtcbn1cblxuZXhwb3J0IHsgZ2V0V2ViQXV0aG5Bc3NlcnRpb24sIGdldFdlYkF1dGhuQXR0ZXN0YXRpb24sIHByb3RvY29sVHJhbnNwb3J0RW51bVRvSW50ZXJuYWxFbnVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJhdXRobi5tanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/viem/node_modules/@turnkey/http/dist/webauthn.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/index.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebauthnStamper: () => (/* binding */ WebauthnStamper)\n/* harmony export */ });\n/* harmony import */ var _webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn-json/index.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\");\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n\n\n\n/// <reference lib=\"dom\" />\n// Header name for a webauthn stamp\nconst stampHeaderName = \"X-Stamp-Webauthn\";\nconst defaultTimeout = 5 * 60 * 1000; // five minutes\nconst defaultUserVerification = \"preferred\";\n/**\n * Stamper to use with `@turnkey/http`'s `TurnkeyClient`\n */\nclass WebauthnStamper {\n    constructor(config) {\n        this.rpId = config.rpId;\n        this.timeout = config.timeout || defaultTimeout;\n        this.userVerification = config.userVerification || defaultUserVerification;\n        this.allowCredentials = config.allowCredentials || [];\n    }\n    async stamp(payload) {\n        const challenge = getChallengeFromPayload(payload);\n        const signingOptions = {\n            publicKey: {\n                rpId: this.rpId,\n                challenge: challenge,\n                allowCredentials: this.allowCredentials,\n                timeout: this.timeout,\n                userVerification: this.userVerification,\n            },\n        };\n        const clientGetResult = await (0,_webauthn_json_index_mjs__WEBPACK_IMPORTED_MODULE_0__.get)(signingOptions);\n        const assertion = clientGetResult.toJSON();\n        const stamp = {\n            authenticatorData: assertion.response.authenticatorData,\n            clientDataJson: assertion.response.clientDataJSON,\n            credentialId: assertion.id,\n            signature: assertion.response.signature,\n        };\n        return {\n            stampHeaderName: stampHeaderName,\n            stampHeaderValue: JSON.stringify(stamp),\n        };\n    }\n}\nfunction getChallengeFromPayload(payload) {\n    const hexString = (0,sha256_uint8array__WEBPACK_IMPORTED_MODULE_1__.createHash)().update(payload).digest(\"hex\");\n    return new TextEncoder().encode(hexString);\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdEO0FBQ0Q7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0NBQXNDLDZEQUFHO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkRBQVU7QUFDaEM7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi93ZWJhdXRobi1qc29uL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnc2hhMjU2LXVpbnQ4YXJyYXknO1xuXG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuLy8gSGVhZGVyIG5hbWUgZm9yIGEgd2ViYXV0aG4gc3RhbXBcbmNvbnN0IHN0YW1wSGVhZGVyTmFtZSA9IFwiWC1TdGFtcC1XZWJhdXRoblwiO1xuY29uc3QgZGVmYXVsdFRpbWVvdXQgPSA1ICogNjAgKiAxMDAwOyAvLyBmaXZlIG1pbnV0ZXNcbmNvbnN0IGRlZmF1bHRVc2VyVmVyaWZpY2F0aW9uID0gXCJwcmVmZXJyZWRcIjtcbi8qKlxuICogU3RhbXBlciB0byB1c2Ugd2l0aCBgQHR1cm5rZXkvaHR0cGAncyBgVHVybmtleUNsaWVudGBcbiAqL1xuY2xhc3MgV2ViYXV0aG5TdGFtcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5ycElkID0gY29uZmlnLnJwSWQ7XG4gICAgICAgIHRoaXMudGltZW91dCA9IGNvbmZpZy50aW1lb3V0IHx8IGRlZmF1bHRUaW1lb3V0O1xuICAgICAgICB0aGlzLnVzZXJWZXJpZmljYXRpb24gPSBjb25maWcudXNlclZlcmlmaWNhdGlvbiB8fCBkZWZhdWx0VXNlclZlcmlmaWNhdGlvbjtcbiAgICAgICAgdGhpcy5hbGxvd0NyZWRlbnRpYWxzID0gY29uZmlnLmFsbG93Q3JlZGVudGlhbHMgfHwgW107XG4gICAgfVxuICAgIGFzeW5jIHN0YW1wKHBheWxvYWQpIHtcbiAgICAgICAgY29uc3QgY2hhbGxlbmdlID0gZ2V0Q2hhbGxlbmdlRnJvbVBheWxvYWQocGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgcHVibGljS2V5OiB7XG4gICAgICAgICAgICAgICAgcnBJZDogdGhpcy5ycElkLFxuICAgICAgICAgICAgICAgIGNoYWxsZW5nZTogY2hhbGxlbmdlLFxuICAgICAgICAgICAgICAgIGFsbG93Q3JlZGVudGlhbHM6IHRoaXMuYWxsb3dDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgdXNlclZlcmlmaWNhdGlvbjogdGhpcy51c2VyVmVyaWZpY2F0aW9uLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xpZW50R2V0UmVzdWx0ID0gYXdhaXQgZ2V0KHNpZ25pbmdPcHRpb25zKTtcbiAgICAgICAgY29uc3QgYXNzZXJ0aW9uID0gY2xpZW50R2V0UmVzdWx0LnRvSlNPTigpO1xuICAgICAgICBjb25zdCBzdGFtcCA9IHtcbiAgICAgICAgICAgIGF1dGhlbnRpY2F0b3JEYXRhOiBhc3NlcnRpb24ucmVzcG9uc2UuYXV0aGVudGljYXRvckRhdGEsXG4gICAgICAgICAgICBjbGllbnREYXRhSnNvbjogYXNzZXJ0aW9uLnJlc3BvbnNlLmNsaWVudERhdGFKU09OLFxuICAgICAgICAgICAgY3JlZGVudGlhbElkOiBhc3NlcnRpb24uaWQsXG4gICAgICAgICAgICBzaWduYXR1cmU6IGFzc2VydGlvbi5yZXNwb25zZS5zaWduYXR1cmUsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFtcEhlYWRlck5hbWU6IHN0YW1wSGVhZGVyTmFtZSxcbiAgICAgICAgICAgIHN0YW1wSGVhZGVyVmFsdWU6IEpTT04uc3RyaW5naWZ5KHN0YW1wKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRDaGFsbGVuZ2VGcm9tUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgY29uc3QgaGV4U3RyaW5nID0gY3JlYXRlSGFzaCgpLnVwZGF0ZShwYXlsb2FkKS5kaWdlc3QoXCJoZXhcIik7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShoZXhTdHJpbmcpO1xufVxuXG5leHBvcnQgeyBXZWJhdXRoblN0YW1wZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs":
/*!****************************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getResponseToJSON: () => (/* binding */ getResponseToJSON)\n/* harmony export */ });\n/* harmony import */ var _base64url_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\");\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n/* harmony import */ var _schema_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\");\n\n\n\n\nfunction getResponseToJSON(credential) {\n    return (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.convert)(_base64url_mjs__WEBPACK_IMPORTED_MODULE_0__.bufferToBase64url, _schema_mjs__WEBPACK_IMPORTED_MODULE_2__.publicKeyCredentialWithAssertion, credential);\n}\n\n\n//# sourceMappingURL=api.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2FwaS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFvRDtBQUNaO0FBQ3dCOztBQUVoRTtBQUNBLFdBQVcscURBQU8sQ0FBQyw2REFBaUIsRUFBRSx5RUFBZ0M7QUFDdEU7O0FBRTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3Qvd2ViYXV0aG4tanNvbi9hcGkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH0gZnJvbSAnLi9iYXNlNjR1cmwubWpzJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcbmltcG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH0gZnJvbSAnLi9zY2hlbWEubWpzJztcblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VUb0pTT04oY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBjb252ZXJ0KGJ1ZmZlclRvQmFzZTY0dXJsLCBwdWJsaWNLZXlDcmVkZW50aWFsV2l0aEFzc2VydGlvbiwgY3JlZGVudGlhbCk7XG59XG5cbmV4cG9ydCB7IGdldFJlc3BvbnNlVG9KU09OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs":
/*!**********************************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToBase64url: () => (/* binding */ bufferToBase64url)\n/* harmony export */ });\nfunction bufferToBase64url(buffer) {\n    // Buffer to binary string\n    const byteView = new Uint8Array(buffer);\n    let str = \"\";\n    for (const charCode of byteView) {\n        str += String.fromCharCode(charCode);\n    }\n    // Binary string to base64\n    const base64String = btoa(str);\n    // Base64 to base64url\n    // We assume that the base64url string is well-formed.\n    const base64urlString = base64String\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=/g, \"\");\n    return base64urlString;\n}\n\n\n//# sourceMappingURL=base64url.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2Jhc2U2NHVybC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTZCO0FBQzdCIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3Qvd2ViYXV0aG4tanNvbi9iYXNlNjR1cmwubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJ1ZmZlclRvQmFzZTY0dXJsKGJ1ZmZlcikge1xuICAgIC8vIEJ1ZmZlciB0byBiaW5hcnkgc3RyaW5nXG4gICAgY29uc3QgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgY2hhckNvZGUgb2YgYnl0ZVZpZXcpIHtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgIH1cbiAgICAvLyBCaW5hcnkgc3RyaW5nIHRvIGJhc2U2NFxuICAgIGNvbnN0IGJhc2U2NFN0cmluZyA9IGJ0b2Eoc3RyKTtcbiAgICAvLyBCYXNlNjQgdG8gYmFzZTY0dXJsXG4gICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIGJhc2U2NHVybCBzdHJpbmcgaXMgd2VsbC1mb3JtZWQuXG4gICAgY29uc3QgYmFzZTY0dXJsU3RyaW5nID0gYmFzZTY0U3RyaW5nXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpXG4gICAgICAgIC5yZXBsYWNlKC89L2csIFwiXCIpO1xuICAgIHJldHVybiBiYXNlNjR1cmxTdHJpbmc7XG59XG5cbmV4cG9ydCB7IGJ1ZmZlclRvQmFzZTY0dXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR1cmwubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/base64url.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs":
/*!********************************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertValue: () => (/* binding */ convertValue),\n/* harmony export */   copyValue: () => (/* binding */ copyValue),\n/* harmony export */   derived: () => (/* binding */ derived),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   required: () => (/* binding */ required)\n/* harmony export */ });\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n// TODO: Parcel isn't deduplicating these values.\nconst copyValue = \"copy\";\nconst convertValue = \"convert\";\nfunction convert(conversionFn, schema, input) {\n    if (schema === copyValue) {\n        return input;\n    }\n    if (schema === convertValue) {\n        return conversionFn(input);\n    }\n    if (schema instanceof Array) {\n        return input.map((v) => convert(conversionFn, schema[0], v));\n    }\n    if (schema instanceof Object) {\n        const output = {};\n        for (const [key, schemaField] of Object.entries(schema)) {\n            if (schemaField.derive) {\n                const v = schemaField.derive(input);\n                if (v !== undefined) {\n                    input[key] = v;\n                }\n            }\n            if (!(key in input)) {\n                if (schemaField.required) {\n                    throw new Error(`Missing key: ${key}`);\n                }\n                continue;\n            }\n            // Fields can be null (rather than missing or `undefined`), e.g. the\n            // `userHandle` field of the `AuthenticatorAssertionResponse`:\n            // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n            if (input[key] == null) {\n                output[key] = null;\n                continue;\n            }\n            output[key] = convert(conversionFn, schemaField.schema, input[key]);\n        }\n        return output;\n    }\n}\nfunction derived(schema, derive) {\n    return {\n        required: true,\n        schema,\n        derive,\n    };\n}\nfunction required(schema) {\n    return {\n        required: true,\n        schema,\n    };\n}\nfunction optional(schema) {\n    return {\n        required: false,\n        schema,\n    };\n}\n\n\n//# sourceMappingURL=convert.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFeUU7QUFDekUiLCJzb3VyY2VzIjpbIi9ob21lL2phc3Blci9wcm9qZWN0cy9lbGl6YS1tb2RlLWV4YW1wbGUvbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2NvbnZlcnQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdlIGV4cG9ydCB0aGVzZSB2YWx1ZXMgaW4gb3JkZXIgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIHRvIGRlZHVwbGljYXRlXG4vLyBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gbWluaWZpZWQgSlMgY29kZS5cbi8vIFRPRE86IFBhcmNlbCBpc24ndCBkZWR1cGxpY2F0aW5nIHRoZXNlIHZhbHVlcy5cbmNvbnN0IGNvcHlWYWx1ZSA9IFwiY29weVwiO1xuY29uc3QgY29udmVydFZhbHVlID0gXCJjb252ZXJ0XCI7XG5mdW5jdGlvbiBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hLCBpbnB1dCkge1xuICAgIGlmIChzY2hlbWEgPT09IGNvcHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChzY2hlbWEgPT09IGNvbnZlcnRWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY29udmVyc2lvbkZuKGlucHV0KTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5tYXAoKHYpID0+IGNvbnZlcnQoY29udmVyc2lvbkZuLCBzY2hlbWFbMF0sIHYpKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBzY2hlbWFGaWVsZF0gb2YgT2JqZWN0LmVudHJpZXMoc2NoZW1hKSkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYUZpZWxkLmRlcml2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYgPSBzY2hlbWFGaWVsZC5kZXJpdmUoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRba2V5XSA9IHY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGlucHV0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzY2hlbWFGaWVsZC5yZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaWVsZHMgY2FuIGJlIG51bGwgKHJhdGhlciB0aGFuIG1pc3Npbmcgb3IgYHVuZGVmaW5lZGApLCBlLmcuIHRoZVxuICAgICAgICAgICAgLy8gYHVzZXJIYW5kbGVgIGZpZWxkIG9mIHRoZSBgQXV0aGVudGljYXRvckFzc2VydGlvblJlc3BvbnNlYDpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdXRobi8jaWZhY2UtYXV0aGVudGljYXRvcmFzc2VydGlvbnJlc3BvbnNlXG4gICAgICAgICAgICBpZiAoaW5wdXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0W2tleV0gPSBjb252ZXJ0KGNvbnZlcnNpb25Gbiwgc2NoZW1hRmllbGQuc2NoZW1hLCBpbnB1dFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc2NoZW1hLCBkZXJpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBkZXJpdmUsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlcXVpcmVkKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9wdGlvbmFsKHNjaGVtYSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgc2NoZW1hLFxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNvbnZlcnQsIGNvbnZlcnRWYWx1ZSwgY29weVZhbHVlLCBkZXJpdmVkLCBvcHRpb25hbCwgcmVxdWlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnZlcnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs":
/*!******************************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/* harmony import */ var _api_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/api.mjs\");\n\n\nasync function get(options) {\n    const response = (await navigator.credentials.get(options));\n    response.toJSON = () => (0,_api_mjs__WEBPACK_IMPORTED_MODULE_0__.getResponseToJSON)(response);\n    return response;\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4Qzs7QUFFOUM7QUFDQTtBQUNBLDRCQUE0QiwyREFBaUI7QUFDN0M7QUFDQTs7QUFFZTtBQUNmIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3Qvd2ViYXV0aG4tanNvbi9pbmRleC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UmVzcG9uc2VUb0pTT04gfSBmcm9tICcuL2FwaS5tanMnO1xuXG5hc3luYyBmdW5jdGlvbiBnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IG5hdmlnYXRvci5jcmVkZW50aWFscy5nZXQob3B0aW9ucykpO1xuICAgIHJlc3BvbnNlLnRvSlNPTiA9ICgpID0+IGdldFJlc3BvbnNlVG9KU09OKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmV4cG9ydCB7IGdldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs":
/*!*******************************************************************************!*\
  !*** ../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyCredentialWithAssertion: () => (/* binding */ publicKeyCredentialWithAssertion)\n/* harmony export */ });\n/* harmony import */ var _convert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert.mjs */ \"(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/convert.mjs\");\n\n\nconst simplifiedClientExtensionResultsSchema = {\n    appid: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    appidExclude: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    credProps: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n};\n// `navigator.get()` response\nconst publicKeyCredentialWithAssertion = {\n    type: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    id: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    rawId: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    authenticatorAttachment: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.optional)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.copyValue),\n    response: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)({\n        clientDataJSON: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        authenticatorData: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        signature: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n        userHandle: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.required)(_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.convertValue),\n    }),\n    clientExtensionResults: (0,_convert_mjs__WEBPACK_IMPORTED_MODULE_0__.derived)(simplifiedClientExtensionResultsSchema, (pkc) => pkc.getClientExtensionResults()),\n};\n\n\n//# sourceMappingURL=schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0dXJua2V5L3dlYmF1dGhuLXN0YW1wZXIvZGlzdC93ZWJhdXRobi1qc29uL3NjaGVtYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUY7O0FBRXJGO0FBQ0EsV0FBVyxzREFBUSxDQUFDLG1EQUFTO0FBQzdCLGtCQUFrQixzREFBUSxDQUFDLG1EQUFTO0FBQ3BDLGVBQWUsc0RBQVEsQ0FBQyxtREFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxVQUFVLHNEQUFRLENBQUMsbURBQVM7QUFDNUIsUUFBUSxzREFBUSxDQUFDLG1EQUFTO0FBQzFCLFdBQVcsc0RBQVEsQ0FBQyxzREFBWTtBQUNoQyw2QkFBNkIsc0RBQVEsQ0FBQyxtREFBUztBQUMvQyxjQUFjLHNEQUFRO0FBQ3RCLHdCQUF3QixzREFBUSxDQUFDLHNEQUFZO0FBQzdDLDJCQUEyQixzREFBUSxDQUFDLHNEQUFZO0FBQ2hELG1CQUFtQixzREFBUSxDQUFDLHNEQUFZO0FBQ3hDLG9CQUFvQixzREFBUSxDQUFDLHNEQUFZO0FBQ3pDLEtBQUs7QUFDTCw0QkFBNEIscURBQU87QUFDbkM7O0FBRTRDO0FBQzVDIiwic291cmNlcyI6WyIvaG9tZS9qYXNwZXIvcHJvamVjdHMvZWxpemEtbW9kZS1leGFtcGxlL25vZGVfbW9kdWxlcy9AdHVybmtleS93ZWJhdXRobi1zdGFtcGVyL2Rpc3Qvd2ViYXV0aG4tanNvbi9zY2hlbWEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVpcmVkLCBvcHRpb25hbCwgZGVyaXZlZCwgY29weVZhbHVlLCBjb252ZXJ0VmFsdWUgfSBmcm9tICcuL2NvbnZlcnQubWpzJztcblxuY29uc3Qgc2ltcGxpZmllZENsaWVudEV4dGVuc2lvblJlc3VsdHNTY2hlbWEgPSB7XG4gICAgYXBwaWQ6IG9wdGlvbmFsKGNvcHlWYWx1ZSksXG4gICAgYXBwaWRFeGNsdWRlOiBvcHRpb25hbChjb3B5VmFsdWUpLFxuICAgIGNyZWRQcm9wczogb3B0aW9uYWwoY29weVZhbHVlKSxcbn07XG4vLyBgbmF2aWdhdG9yLmdldCgpYCByZXNwb25zZVxuY29uc3QgcHVibGljS2V5Q3JlZGVudGlhbFdpdGhBc3NlcnRpb24gPSB7XG4gICAgdHlwZTogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICBpZDogcmVxdWlyZWQoY29weVZhbHVlKSxcbiAgICByYXdJZDogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICBhdXRoZW50aWNhdG9yQXR0YWNobWVudDogb3B0aW9uYWwoY29weVZhbHVlKSxcbiAgICByZXNwb25zZTogcmVxdWlyZWQoe1xuICAgICAgICBjbGllbnREYXRhSlNPTjogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgYXV0aGVudGljYXRvckRhdGE6IHJlcXVpcmVkKGNvbnZlcnRWYWx1ZSksXG4gICAgICAgIHNpZ25hdHVyZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICAgICAgdXNlckhhbmRsZTogcmVxdWlyZWQoY29udmVydFZhbHVlKSxcbiAgICB9KSxcbiAgICBjbGllbnRFeHRlbnNpb25SZXN1bHRzOiBkZXJpdmVkKHNpbXBsaWZpZWRDbGllbnRFeHRlbnNpb25SZXN1bHRzU2NoZW1hLCAocGtjKSA9PiBwa2MuZ2V0Q2xpZW50RXh0ZW5zaW9uUmVzdWx0cygpKSxcbn07XG5cbmV4cG9ydCB7IHB1YmxpY0tleUNyZWRlbnRpYWxXaXRoQXNzZXJ0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@turnkey/webauthn-stamper/dist/webauthn-json/schema.mjs\n");

/***/ })

};
;