/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RoundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedProcessors"
      | "calculateReward"
      | "claimRewards"
      | "completeRound"
      | "createRound"
      | "placeBet"
      | "rounds"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutomaticDistributionFailed"
      | "BetPlaced"
      | "RewardsClaimed"
      | "RoundCompleted"
      | "RoundCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedProcessors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedProcessors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace AutomaticDistributionFailedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    user: AddressLike,
    reason: string
  ];
  export type OutputTuple = [roundId: bigint, user: string, reason: string];
  export interface OutputObject {
    roundId: bigint;
    user: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    user: AddressLike,
    team: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    user: string,
    team: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    user: string;
    team: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [roundId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    roundId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundCompletedEvent {
  export type InputTuple = [roundId: BigNumberish, winningTeam: BigNumberish];
  export type OutputTuple = [roundId: bigint, winningTeam: bigint];
  export interface OutputObject {
    roundId: bigint;
    winningTeam: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundCreatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startTime: BigNumberish,
    distributionType: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    startTime: bigint,
    distributionType: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    startTime: bigint;
    distributionType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RoundManager extends BaseContract {
  connect(runner?: ContractRunner | null): RoundManager;
  waitForDeployment(): Promise<this>;

  interface: RoundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedProcessors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  calculateReward: TypedContractMethod<
    [roundId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeRound: TypedContractMethod<
    [roundId: BigNumberish, winningTeam: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRound: TypedContractMethod<
    [
      roundId: BigNumberish,
      duration: BigNumberish,
      distributionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  placeBet: TypedContractMethod<
    [roundId: BigNumberish, team: BigNumberish],
    [void],
    "payable"
  >;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
        totalStaked: bigint;
        winningTeam: bigint;
        platformFee: bigint;
        distributionType: bigint;
      }
    ],
    "view"
  >;

  withdrawPlatformFees: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedProcessors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [roundId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeRound"
  ): TypedContractMethod<
    [roundId: BigNumberish, winningTeam: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRound"
  ): TypedContractMethod<
    [
      roundId: BigNumberish,
      duration: BigNumberish,
      distributionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [roundId: BigNumberish, team: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
        totalStaked: bigint;
        winningTeam: bigint;
        platformFee: bigint;
        distributionType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AutomaticDistributionFailed"
  ): TypedContractEvent<
    AutomaticDistributionFailedEvent.InputTuple,
    AutomaticDistributionFailedEvent.OutputTuple,
    AutomaticDistributionFailedEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoundCompleted"
  ): TypedContractEvent<
    RoundCompletedEvent.InputTuple,
    RoundCompletedEvent.OutputTuple,
    RoundCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RoundCreated"
  ): TypedContractEvent<
    RoundCreatedEvent.InputTuple,
    RoundCreatedEvent.OutputTuple,
    RoundCreatedEvent.OutputObject
  >;

  filters: {
    "AutomaticDistributionFailed(uint256,address,string)": TypedContractEvent<
      AutomaticDistributionFailedEvent.InputTuple,
      AutomaticDistributionFailedEvent.OutputTuple,
      AutomaticDistributionFailedEvent.OutputObject
    >;
    AutomaticDistributionFailed: TypedContractEvent<
      AutomaticDistributionFailedEvent.InputTuple,
      AutomaticDistributionFailedEvent.OutputTuple,
      AutomaticDistributionFailedEvent.OutputObject
    >;

    "BetPlaced(uint256,address,uint8,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "RewardsClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RoundCompleted(uint256,uint8)": TypedContractEvent<
      RoundCompletedEvent.InputTuple,
      RoundCompletedEvent.OutputTuple,
      RoundCompletedEvent.OutputObject
    >;
    RoundCompleted: TypedContractEvent<
      RoundCompletedEvent.InputTuple,
      RoundCompletedEvent.OutputTuple,
      RoundCompletedEvent.OutputObject
    >;

    "RoundCreated(uint256,uint256,uint8)": TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;
    RoundCreated: TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;
  };
}
